#N canvas 80 399 450 300 10;
#X obj 38 233 dac~;
#N canvas 83 294 377 441 string 0;
#X obj 35 164 mtof;
#X obj 35 186 swap 1;
#X obj 35 210 /;
#X obj 35 124 * 2;
#X obj 111 180 *~;
#X obj 83 54 t b f;
#X obj 34 370 outlet~;
#X obj 128 127 ead~ 1 12;
#X obj 35 232 * 1000;
#X obj 111 149 sig~ 1;
#X obj 34 144 + 24;
#X obj 84 231 *~ 0.9;
#X obj 35 265 delread~ \$0-string;
#X obj 133 231 delwrite~ \$0-string 600;
#X obj 83 15 inlet;
#X obj 90 371 s~ \$0-noloop;
#X obj 140 204 r~ \$0-noloop;
#X obj 89 324 *~;
#X obj 90 348 z~;
#X obj 105 301 sig~ 0.93;
#X obj 128 86 block~ 64;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 1 1 2 1;
#X connect 2 0 8 0;
#X connect 3 0 10 0;
#X connect 4 0 11 0;
#X connect 4 0 13 0;
#X connect 5 0 7 0;
#X connect 5 1 3 0;
#X connect 7 0 4 1;
#X connect 8 0 12 0;
#X connect 9 0 4 0;
#X connect 10 0 0 0;
#X connect 11 0 6 0;
#X connect 12 0 6 0;
#X connect 12 0 17 0;
#X connect 14 0 5 0;
#X connect 16 0 13 0;
#X connect 17 0 18 0;
#X connect 18 0 15 0;
#X connect 19 0 17 1;
#X restore 39 171 pd string;
#X obj 39 146 hradio 15 1 0 8 empty empty empty 0 -6 0 8 -262144 -1
-1 3;
#X text 32 51 Pitfall. Creating feedback loops requires that we use
a pair of audio rate send and recieve objects to stop Pd believing
there is an infinite signal feedback path.;
#X text 32 106 Look inside the [pd string] subpatch to see this.;
#X obj 39 201 *~ 0.75;
#X msg 187 184 \; pd open dsp-loop-example1.pd ./;
#X msg 186 254 \; pd open dsp-loop-example2.pd ./;
#X text 251 159 bad way;
#X text 243 230 solution;
#X text 89 13 Pd searches for DSP loops are "shallow";
#X connect 1 0 5 0;
#X connect 2 0 1 0;
#X connect 5 0 0 0;
#X connect 5 0 0 1;
