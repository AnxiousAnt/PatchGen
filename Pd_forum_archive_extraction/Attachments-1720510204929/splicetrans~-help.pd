#N canvas 312 169 803 592 10;
#X text 332 242 use harm. 1 \, 3 \, 5 for transition table.;
#X floatatom 60 185 5 0 0 0 - - -;
#X obj 60 206 mtof;
#X floatatom 60 227 5 0 0 0 - - -;
#X obj 205 339 tabwrite~ \$0-spliced0;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0-spliced0 441 float 0;
#X coords 0 1 440 -1 200 140 1;
#X restore 545 35 graph;
#X msg 218 317 bang;
#N canvas 0 0 687 580 out 0;
#X obj 353 490 t b;
#X obj 353 437 f;
#X obj 353 515 f;
#X msg 467 514 0;
#X obj 353 467 moses 1;
#X obj 467 486 t b f;
#X obj 433 447 moses 1;
#X obj 29 97 dbtorms;
#X obj 85 170 inlet~;
#X msg 299 310 \; pd dsp 1;
#X obj 29 170 line~;
#X obj 64 242 *~;
#X obj 64 272 dac~;
#X obj 29 127 pack 0 50;
#X text 121 146 audio in;
#X text 138 464 test if less than 1 -->;
#X text 104 491 if true convert to bang -->;
#X text 100 96 <-- convert from dB to linear units;
#X floatatom 323 219 3 0 100 0 dB - -;
#X obj 350 240 bng 15 250 50 0 empty empty mute -38 7 0 12 -262144
-1 -1;
#X text 118 126 <-- make a ramp to avoid clicks or zipper noise;
#X obj 148 170 inlet~;
#X obj 154 241 *~;
#X text 373 378 MUTE logic:;
#X obj 323 174 r \$0-master-lvl;
#X obj 353 541 s \$0-master-lvl;
#X obj 323 279 s \$0-master-out;
#X obj 29 71 r \$0-master-out;
#X obj 433 418 r \$0-master-out;
#X text 60 10 Level control abstraction \, used in many of the Pd example
patches. The "level" and "mute" controls show up on the parent \, calling
patch.;
#X text 66 517 previous nonzero master-lvl -->;
#X text 138 421 recall previous;
#X text 138 439 value of master-lvl -->;
#X text 39 319 automatically start DSP -->;
#X obj 85 192 hip~ 3;
#X obj 147 192 hip~ 3;
#X connect 0 0 2 0;
#X connect 1 0 4 0;
#X connect 2 0 25 0;
#X connect 3 0 25 0;
#X connect 4 0 0 0;
#X connect 4 1 5 0;
#X connect 5 0 3 0;
#X connect 6 1 2 1;
#X connect 7 0 13 0;
#X connect 8 0 34 0;
#X connect 10 0 22 0;
#X connect 10 0 11 0;
#X connect 11 0 12 0;
#X connect 13 0 10 0;
#X connect 18 0 9 0;
#X connect 18 0 26 0;
#X connect 19 0 1 0;
#X connect 21 0 35 0;
#X connect 22 0 12 1;
#X connect 24 0 18 0;
#X connect 27 0 7 0;
#X connect 28 0 1 1;
#X connect 28 0 6 0;
#X connect 34 0 11 1;
#X connect 35 0 22 1;
#X coords 0 -1 1 1 85 60 1 300 200;
#X restore 58 441 pd out;
#X obj 59 362 *~ 1;
#X obj 100 361 *~ 0;
#X obj 123 342 tgl 15 0 empty empty aliased 17 7 1 10 -262144 -1 -1
0 1;
#X obj 82 317 tgl 15 0 empty empty bandlim. 17 7 1 10 -262144 -1 -1
0 1;
#X text 334 212 use harm. 1 \, 3 for transition table.;
#X text 49 18 [splicetrans~];
#X text 74 42 Replace jumps in a phasor~ signal by a bandlimited transition.
;
#X text 56 81 Inlets:;
#X text 79 99 in0~: phasor signal from 0-1;
#X text 78 117 in1~: frequency of phasor signal;
#X text 56 143 Outlets:;
#X text 77 159 out0~: phasor signal from 0-1 with bandlimited jump.
;
#X text 295 391 Extracting even.odd harmonics from a phasor~ with bandlimit
;
#X obj 376 467 throw~ \$0-outl;
#X obj 449 443 throw~ \$0-outr;
#X obj 145 406 catch~ \$0-outr;
#X obj 132 381 catch~ \$0-outl;
#X obj 170 317 -~ 0.5;
#N canvas 483 205 746 653 even.odd 0;
#X floatatom 45 74 5 0 0 1 frequency - -;
#X obj 101 155 wrap~;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0-phasor-output 882 float 0;
#X coords 0 1.02 882 -1.02 200 130 1;
#X restore 504 23 graph;
#X obj 45 102 phasor~ 0;
#X obj 36 244 -~;
#X obj 98 244 +~;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0-wrap-output 882 float 0;
#X coords 0 1.02 882 -1.02 200 130 1;
#X restore 505 158 graph;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0-sum 882 float 0;
#X coords 0 1.02 882 -1.02 200 130 1;
#X restore 506 293 graph;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0-difference 882 float 0;
#X coords 0 1.02 882 -1.02 200 130 1;
#X restore 506 433 graph;
#X msg 172 180 bang;
#X text 102 8 BUCHLA'S METHOD;
#X text 511 567 ---- 0.02 seconds ----;
#X obj 125 99 s \$0-freq;
#N canvas 0 0 450 300 s 0;
#X obj 119 107 r \$0-freq;
#X obj 31 87 inlet~;
#X obj 29 158 outlet~;
#X obj 29 130 -~ 0.5;
#X obj 30 108 splicetrans~;
#X connect 0 0 4 1;
#X connect 1 0 4 0;
#X connect 3 0 2 0;
#X connect 4 0 3 0;
#X restore 102 180 pd s;
#N canvas 0 0 450 300 s 0;
#X obj 119 107 r \$0-freq;
#X obj 31 87 inlet~;
#X obj 30 168 outlet~;
#X obj 30 136 -~ 0.5;
#X obj 30 109 splicetrans~;
#X connect 0 0 4 1;
#X connect 1 0 4 0;
#X connect 3 0 2 0;
#X connect 4 0 3 0;
#X restore 44 181 pd s;
#X obj 45 50 mtof;
#X floatatom 45 31 5 0 0 0 - - -;
#X obj 172 215 tabwrite~ \$0-phasor-output;
#X obj 172 248 tabwrite~ \$0-wrap-output;
#X obj 172 282 tabwrite~ \$0-sum;
#X obj 172 327 tabwrite~ \$0-difference;
#X obj 37 383 outlet~;
#X obj 97 383 outlet~;
#X obj 101 130 -~ 0.5;
#X text 198 99 for [splicetrans~];
#X floatatom 156 129 5 0 0 0 - - -;
#X obj 98 355 *~ 0;
#X obj 121 336 tgl 15 0 empty empty sum 17 7 1 10 -262144 -1 -1 0 1
;
#X obj 60 335 tgl 15 0 empty empty diff 17 7 1 10 -262144 -1 -1 0 1
;
#X obj 37 356 *~ 0;
#X text 27 414 [pd s] contains [splicetrans~]. The important thing
to note here is: Always put [splicetrans~] after any [wrap~] operations
you may be using! Otherwise [wrap] will destroy the hard-earned bandlimit
at the jumps.;
#X text 27 483 This is an example on how to use the bandlimited version
of phasor~ with splicetrans~ for constructing classical waveforms like
saw and square. It's a variation on the example patch K04.even.odd.pd
;
#X connect 0 0 3 0;
#X connect 0 0 12 0;
#X connect 1 0 13 0;
#X connect 3 0 14 0;
#X connect 3 0 23 0;
#X connect 4 0 20 0;
#X connect 4 0 29 0;
#X connect 5 0 19 0;
#X connect 5 0 26 0;
#X connect 9 0 17 0;
#X connect 9 0 18 0;
#X connect 9 0 19 0;
#X connect 9 0 20 0;
#X connect 13 0 4 1;
#X connect 13 0 5 1;
#X connect 13 0 18 0;
#X connect 14 0 5 0;
#X connect 14 0 4 0;
#X connect 14 0 17 0;
#X connect 15 0 0 0;
#X connect 16 0 15 0;
#X connect 23 0 1 0;
#X connect 25 0 23 1;
#X connect 26 0 22 0;
#X connect 27 0 26 1;
#X connect 28 0 29 1;
#X connect 29 0 21 0;
#X restore 377 419 pd even.odd;
#X obj 221 212 splicetrans~ 0;
#X obj 220 239 splicetrans~ 1;
#X obj 60 277 splicetrans~;
#X obj 60 247 phasor~;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 29 1;
#X connect 3 0 30 0;
#X connect 6 0 4 0;
#X connect 8 0 7 0;
#X connect 8 0 7 1;
#X connect 9 0 7 0;
#X connect 9 0 7 1;
#X connect 10 0 9 1;
#X connect 11 0 8 1;
#X connect 23 0 7 1;
#X connect 24 0 7 0;
#X connect 25 0 4 0;
#X connect 26 0 21 0;
#X connect 26 1 22 0;
#X connect 29 0 8 0;
#X connect 29 0 25 0;
#X connect 30 0 9 0;
#X connect 30 0 29 0;
