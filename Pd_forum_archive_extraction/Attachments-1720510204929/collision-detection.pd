#N canvas 293 132 576 778 10;
#X text 54 24 Collision Detection (CD);
#X floatatom 178 160 5 0 0 0 X - -;
#X floatatom 201 257 5 0 0 1 Radius - -;
#X floatatom 194 182 5 0 0 1 Reference_N - -;
#X obj 178 204 - 4;
#X obj 178 307 tgl 24 0 empty empty hit? 28 7 1 10 -262144 -1 -1 0
1;
#X obj 178 234 abs;
#X floatatom 134 258 5 0 0 0 - - -;
#X obj 178 281 <= 1;
#X text 81 84 If we want to know \, if a certain number is close to
another number we can check \, if the absolute distance between our
reference number N and the test number X is smaller than a certain
radius R.;
#X text 65 53 Collision in one dimension;
#X text 68 342 Collision in two dimensions;
#X text 78 369 In two dimensions \, we can do the CD in different ways.
;
#X text 78 564 b) Collisions with "real" distance:;
#N canvas 285 204 675 739 Circle_Collision 0;
#X floatatom 188 392 5 0 0 1 Radius - -;
#X obj 180 456 tgl 24 0 empty empty hit? 28 7 1 10 -262144 -1 -1 0
1;
#X obj 180 430 <= 1;
#X obj 180 258 list-map2;
#X text 294 197 Reference Vector;
#X obj 180 198 pack 0 0;
#X obj 205 167 t b a;
#X obj 260 259 -;
#X floatatom 180 118 5 0 0 0 x - -;
#X floatatom 205 145 5 0 0 0 y - -;
#X floatatom 113 406 5 0 0 0 distance - -;
#X obj 262 176 loadbang;
#X obj 260 306 *;
#X obj 260 282 t a a;
#X obj 180 363 sqrt;
#X obj 180 333 list-reduce;
#X obj 264 333 +;
#X text 298 260 [(x1 - x2)^2 \, (y1 - y2)^2( \, (z1 - z2)^2 \, ...]
;
#X text 303 333 sum it;
#X text 303 365 square root;
#N canvas 338 318 701 557 gem-example 0;
#X obj 561 79 inlet radius;
#X obj 424 81 inlet reference;
#X obj 366 264 gemhead;
#X msg 377 426 draw line;
#X obj 377 402 loadbang;
#X obj 366 297 translateXYZ;
#X obj 424 264 unpack 0 0;
#X obj 366 461 circle 1;
#X obj 60 337 color 1 1 1;
#X msg 234 298 1 1 1;
#X msg 281 297 1 0 0;
#X obj 234 250 select 0 1;
#X obj 60 170 gemhead;
#X obj 60 252 translateXYZ;
#X obj 86 206 unpack 0 0;
#X obj 234 64 inlet test;
#X obj 60 373 circle 0.2;
#N canvas 0 0 538 449 collide 0;
#X obj 97 339 <= 1;
#X obj 97 137 list-map2;
#X obj 177 138 -;
#X obj 177 185 *;
#X obj 177 161 t a a;
#X obj 97 242 sqrt;
#X obj 97 212 list-reduce;
#X obj 181 212 +;
#X obj 105 318 t b a;
#X obj 126 76 inlet reference;
#X obj 97 52 inlet test;
#X obj 300 167 inlet radius;
#X obj 97 366 outlet;
#X obj 126 100 t b a;
#X connect 0 0 12 0;
#X connect 1 0 6 0;
#X connect 1 1 2 0;
#X connect 2 0 4 0;
#X connect 3 0 1 2;
#X connect 4 0 3 0;
#X connect 4 1 3 1;
#X connect 5 0 0 0;
#X connect 6 0 5 0;
#X connect 6 1 7 0;
#X connect 7 0 6 1;
#X connect 8 0 0 0;
#X connect 8 1 0 1;
#X connect 9 0 13 0;
#X connect 10 0 1 0;
#X connect 11 0 8 0;
#X connect 13 0 1 0;
#X connect 13 1 1 1;
#X restore 234 148 pd collide;
#X obj 247 175 tgl 24 0 empty empty hit? 28 7 1 10 -262144 -1 -1 0
1;
#X obj 366 348 color 1 1 1;
#X obj 337 154 gemhead;
#X obj 337 218 curve 2;
#X obj 359 177 list append 0;
#X obj 381 197 list append 0;
#X connect 0 0 7 1;
#X connect 0 0 17 2;
#X connect 1 0 6 0;
#X connect 1 0 17 1;
#X connect 1 0 23 0;
#X connect 2 0 5 0;
#X connect 3 0 7 0;
#X connect 4 0 3 0;
#X connect 5 0 19 0;
#X connect 6 0 5 1;
#X connect 6 1 5 2;
#X connect 8 0 16 0;
#X connect 9 0 8 1;
#X connect 9 0 19 1;
#X connect 10 0 8 1;
#X connect 10 0 19 1;
#X connect 11 0 9 0;
#X connect 11 1 10 0;
#X connect 12 0 13 0;
#X connect 13 0 8 0;
#X connect 14 0 13 1;
#X connect 14 1 13 2;
#X connect 15 0 14 0;
#X connect 15 0 17 0;
#X connect 15 0 22 0;
#X connect 17 0 11 0;
#X connect 17 0 18 0;
#X connect 19 0 7 0;
#X connect 20 0 21 0;
#X connect 22 0 21 1;
#X connect 23 0 21 2;
#X restore 128 617 pd gem-example;
#X obj 398 609 gemwin;
#X msg 398 571 create \, 1;
#X msg 262 198 2 -1;
#X msg 264 222 0 0;
#X obj 188 409 t b a;
#N canvas 0 0 240 290 gemmouse 0;
#X obj 71 39 gemmouse 8 8;
#X obj 115 77 swap 8;
#X obj 115 103 -;
#X obj 115 125 - 4;
#X obj 71 124 - 4;
#X obj 71 146 pack 0 0;
#X obj 71 173 spigot;
#X obj 71 196 outlet;
#X connect 0 0 4 0;
#X connect 0 1 1 0;
#X connect 0 2 6 1;
#X connect 1 0 2 0;
#X connect 1 1 2 1;
#X connect 2 0 3 0;
#X connect 3 0 5 1;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X restore 128 552 pd gemmouse;
#N canvas 0 0 337 300 set-reference 0;
#X obj 71 39 gemmouse 8 8;
#X obj 115 77 swap 8;
#X obj 115 103 -;
#X obj 115 125 - 4;
#X obj 71 124 - 4;
#X obj 71 146 pack 0 0;
#X obj 71 173 spigot;
#X obj 71 196 outlet;
#X text 178 42 right button;
#X connect 0 0 4 0;
#X connect 0 1 1 0;
#X connect 0 4 6 1;
#X connect 1 0 2 0;
#X connect 1 1 2 1;
#X connect 2 0 3 0;
#X connect 3 0 5 1;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X restore 174 573 pd set-reference;
#X floatatom 221 598 5 0 0 1 Radius - -;
#X text 66 41 b) Collisions with "circular" distance:;
#X text 215 549 button 1;
#X text 295 574 button 3;
#X text 85 68 Depending on your goal \, it may be better to calculate
the distance in all directions \, and compare it with a radius:;
#X text 102 519 And this is how it looks like in Gem:;
#X connect 0 0 25 0;
#X connect 2 0 1 0;
#X connect 3 0 15 0;
#X connect 3 1 7 0;
#X connect 5 0 3 0;
#X connect 6 0 5 0;
#X connect 6 1 5 1;
#X connect 7 0 13 0;
#X connect 8 0 5 0;
#X connect 9 0 6 0;
#X connect 11 0 23 0;
#X connect 12 0 3 2;
#X connect 13 0 12 0;
#X connect 13 1 12 1;
#X connect 14 0 2 0;
#X connect 14 0 10 0;
#X connect 15 0 14 0;
#X connect 15 1 16 0;
#X connect 16 0 15 1;
#X connect 22 0 21 0;
#X connect 23 0 3 1;
#X connect 24 0 3 1;
#X connect 25 0 2 0;
#X connect 25 1 2 1;
#X connect 26 0 20 0;
#X connect 27 0 20 1;
#X connect 28 0 20 2;
#X restore 99 593 pd Circle_Collision;
#X text 99 448 copy/paste version:;
#N canvas 479 250 283 303 grid-collision 0;
#X obj 34 131 list-map2;
#X obj 129 130 -;
#X obj 129 155 abs;
#X obj 129 187 <= 1;
#X obj 63 57 inlet reference;
#X obj 177 32 inlet radius;
#X obj 34 212 list-reduce;
#X obj 120 212 &&;
#X obj 34 32 inlet test;
#X obj 34 244 outlet;
#X obj 177 75 t b a;
#X connect 0 0 6 0;
#X connect 0 1 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 0 2;
#X connect 4 0 0 1;
#X connect 5 0 10 0;
#X connect 6 0 9 0;
#X connect 6 1 7 0;
#X connect 7 0 6 1;
#X connect 8 0 0 0;
#X connect 10 0 0 0;
#X connect 10 1 3 1;
#X restore 100 510 pd grid-collision;
#X text 98 488 test;
#X text 134 475 reference;
#X text 109 533 0/1;
#N canvas 0 0 586 760 Grid_Collision 0;
#X text 39 50 a) Grid Collisions (Collision with a rectangle);
#X text 60 75 Here we put a rectangle or square around or test point.
This is easy to implement: Just check for collisions in x-direction
and y-dimension like above and then "AND" both results:;
#X floatatom 103 142 5 0 0 0 X - -;
#X floatatom 126 249 5 0 0 1 Radius - -;
#X floatatom 119 177 5 0 0 1 Reference_Nx - -;
#X obj 103 196 - 4;
#X obj 103 299 tgl 24 0 empty empty hit? 28 7 1 10 -262144 -1 -1 0
1;
#X obj 103 226 abs;
#X floatatom 59 250 5 0 0 0 - - -;
#X obj 103 273 <= 1;
#X floatatom 302 145 5 0 0 0 Y - -;
#X floatatom 325 252 5 0 0 1 Radius - -;
#X floatatom 318 180 5 0 0 1 Reference_Ny - -;
#X obj 302 199 - 4;
#X obj 302 302 tgl 24 0 empty empty hit? 28 7 1 10 -262144 -1 -1 0
1;
#X obj 302 229 abs;
#X floatatom 258 253 5 0 0 0 - - -;
#X obj 302 276 <= 1;
#X obj 195 343 &&;
#X obj 195 365 tgl 24 0 empty empty hit? 28 7 1 10 -262144 -1 -1 0
1;
#X obj 195 320 t b a;
#X obj 106 580 list-map2;
#X obj 201 579 -;
#X obj 201 604 abs;
#X obj 201 636 <= 1;
#X obj 106 681 list-reduce;
#X obj 192 681 &&;
#X obj 185 505 pack 0 0;
#X obj 206 479 t b a;
#X floatatom 185 444 5 0 0 1 Reference_Nx - -;
#X floatatom 206 461 5 0 0 1 Reference_Ny - -;
#X obj 106 506 pack 0 0;
#X obj 127 480 t b a;
#X floatatom 106 445 5 0 0 1 X - -;
#X floatatom 127 462 5 0 0 1 Y - -;
#X floatatom 251 509 5 0 0 1 Width - -;
#X obj 106 704 tgl 24 0 empty empty hit? 28 7 1 10 -262144 -1 -1 1
1;
#X obj 251 532 t b a;
#X text 51 400 With some list-abstractions this becomes even more elegant
(now we assume a square grid!);
#X connect 2 0 5 0;
#X connect 3 0 9 1;
#X connect 4 0 5 1;
#X connect 5 0 7 0;
#X connect 7 0 8 0;
#X connect 7 0 9 0;
#X connect 9 0 6 0;
#X connect 9 0 18 0;
#X connect 10 0 13 0;
#X connect 11 0 17 1;
#X connect 12 0 13 1;
#X connect 13 0 15 0;
#X connect 15 0 16 0;
#X connect 15 0 17 0;
#X connect 17 0 14 0;
#X connect 17 0 20 0;
#X connect 18 0 19 0;
#X connect 20 0 18 0;
#X connect 20 1 18 1;
#X connect 21 0 25 0;
#X connect 21 1 22 0;
#X connect 22 0 23 0;
#X connect 23 0 24 0;
#X connect 24 0 21 2;
#X connect 25 0 36 0;
#X connect 25 1 26 0;
#X connect 26 0 25 1;
#X connect 27 0 21 1;
#X connect 28 0 27 0;
#X connect 28 1 27 1;
#X connect 29 0 27 0;
#X connect 30 0 28 0;
#X connect 31 0 21 0;
#X connect 32 0 31 0;
#X connect 32 1 31 1;
#X connect 33 0 31 0;
#X connect 34 0 32 0;
#X connect 35 0 37 0;
#X connect 37 0 21 0;
#X connect 37 1 24 1;
#X restore 101 419 pd Grid_Collision;
#X text 100 634 use this for copy/paste:;
#X text 105 671 test;
#X text 131 655 reference;
#X text 186 671 radius;
#X text 106 718 0/1;
#N canvas 0 0 538 449 circle-collide 0;
#X obj 97 339 <= 1;
#X obj 97 137 list-map2;
#X obj 177 138 -;
#X obj 177 185 *;
#X obj 177 161 t a a;
#X obj 97 242 sqrt;
#X obj 97 212 list-reduce;
#X obj 181 212 +;
#X obj 105 318 t b a;
#X obj 126 76 inlet reference;
#X obj 97 52 inlet test;
#X obj 300 167 inlet radius;
#X obj 97 366 outlet;
#X obj 126 100 t b a;
#X connect 0 0 12 0;
#X connect 1 0 6 0;
#X connect 1 1 2 0;
#X connect 2 0 4 0;
#X connect 3 0 1 2;
#X connect 4 0 3 0;
#X connect 4 1 3 1;
#X connect 5 0 0 0;
#X connect 6 0 5 0;
#X connect 6 1 7 0;
#X connect 7 0 6 1;
#X connect 8 0 0 0;
#X connect 8 1 0 1;
#X connect 9 0 13 0;
#X connect 10 0 1 0;
#X connect 11 0 8 0;
#X connect 13 0 1 0;
#X connect 13 1 1 1;
#X restore 107 692 pd circle-collide;
#X text 192 490 radius/width;
#X text 79 395 a) Grid Collisions (Collision with a rectangle or square)
;
#X connect 1 0 4 0;
#X connect 2 0 8 1;
#X connect 3 0 4 1;
#X connect 4 0 6 0;
#X connect 6 0 7 0;
#X connect 6 0 8 0;
#X connect 8 0 5 0;
