#N canvas 1008 226 869 765 10;
#N canvas 756 635 874 300 handle-queue 0;
#N canvas 5 126 222 242 queue 0;
#X obj 20 148 textfile;
#X obj 20 169 outlet;
#X obj 65 170 outlet;
#X obj 20 18 inlet;
#X msg 128 79 clear;
#X obj 20 45 route add next rewind clear;
#X msg 142 102 rewind;
#X obj 20 99 list trim;
#X obj 163 142 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 20 76 list prepend add;
#X connect 0 0 1 0;
#X connect 0 1 2 0;
#X connect 3 0 5 0;
#X connect 4 0 0 0;
#X connect 5 0 9 0;
#X connect 5 1 0 0;
#X connect 5 2 4 0;
#X connect 5 3 6 0;
#X connect 5 4 9 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X connect 8 0 0 0;
#X connect 9 0 7 0;
#X restore 116 175 pd queue;
#X obj 152 120 list prepend add;
#X msg 92 78 add end;
#X obj 65 52 t b b;
#X msg 65 175 next;
#X obj 116 200 route end;
#X obj 151 263 outlet;
#X obj 65 8 inlet;
#X obj 65 32 route end clear;
#X obj 167 223 t b a;
#X msg 108 54 clear \, rewind;
#X obj 152 141 list trim;
#X obj 362 247 outlet;
#X text 289 55 "clear" clears the queue;
#X text 290 74 <anything> is added to the queue;
#X text 290 22 simple line-based command queue;
#X text 290 104 comment;
#X text 291 90 "end" - adds the line "end" to the queue;
#X text 331 106 - outputs a bang on its right outlet;
#X text 341 136 outlet until the "end" is reached which causes a;
#X text 342 150 bang on the left outlet.;
#X text 329 123 - outputs the last queue line by line on the left;
#X connect 0 0 5 0;
#X connect 1 0 11 0;
#X connect 2 0 0 0;
#X connect 3 0 4 0;
#X connect 3 1 2 0;
#X connect 3 1 12 0;
#X connect 4 0 0 0;
#X connect 5 0 6 0;
#X connect 5 1 9 0;
#X connect 7 0 8 0;
#X connect 8 0 3 0;
#X connect 8 1 10 0;
#X connect 8 2 1 0;
#X connect 9 0 4 0;
#X connect 9 1 6 0;
#X connect 10 0 0 0;
#X connect 11 0 0 0;
#X restore 256 273 pd handle-queue;
#X msg 81 399 end;
#N canvas 5 126 513 280 make-pivot-split-seq 0;
#X obj 50 38 inlet;
#X obj 51 159 outlet;
#X obj 51 61 list split 1;
#X obj 51 82 t b f;
#N canvas 1228 603 676 426 pivot-split 0;
#X text 390 48 pivot;
#X obj 167 137 <;
#X obj 41 51 t a b;
#X obj 265 274 f;
#X obj 265 387 outlet;
#X obj 167 162 sel 0 1;
#X obj 167 108 t f f;
#N canvas 4 101 450 300 list-drip 0;
#X obj 69 23 inlet;
#X obj 126 189 t b a;
#X obj 69 81 list;
#X obj 153 234 outlet;
#X obj 69 102 route bang;
#X obj 69 234 outlet;
#X obj 126 162 list split 1;
#X obj 20 123 bang;
#X connect 0 0 2 0;
#X connect 1 0 7 0;
#X connect 1 1 3 0;
#X connect 2 0 4 0;
#X connect 4 0 5 0;
#X connect 4 1 6 0;
#X connect 6 0 1 0;
#X connect 6 1 2 1;
#X connect 7 0 2 0;
#X restore 41 77 pd list-drip;
#X text 354 144 output the sequence:;
#X obj 354 32 inlet pivot;
#X obj 41 142 t b b b;
#X text 355 201 qsort <list2>;
#X text 354 168 qsort <list1>;
#X text 355 185 <pivot>;
#X text 352 82 sort the list in left inlet into two lists with list1
;
#X text 352 99 containing (elements<pivot) and list2 containing (elements>=pivot)
;
#X obj 41 30 inlet restlist;
#X text 173 48 init list1 and list2;
#X text 476 257 list1;
#X text 107 277 list2;
#X text 50 125 done;
#X obj 85 226 v \$0-current;
#X obj 357 232 v \$0-current;
#X obj 194 138 v \$0-current;
#X obj 41 298 route bang;
#X obj 357 277 route bang;
#X text 426 280 don't output empty list;
#X msg 177 67 clear;
#N canvas 1 26 450 300 list-accumulate 0;
#X obj 182 122 list;
#X obj 113 165 t a a;
#X msg 72 65 list;
#X obj 31 16 inlet;
#X obj 31 241 list;
#X obj 31 286 outlet;
#X obj 113 144 list prepend;
#X obj 31 37 route bang clear list float symbol;
#X obj 191 62 symbol;
#X obj 31 262 list trim;
#X connect 0 0 6 1;
#X connect 1 0 0 0;
#X connect 1 1 4 1;
#X connect 2 0 1 0;
#X connect 3 0 7 0;
#X connect 4 0 9 0;
#X connect 6 0 1 0;
#X connect 7 0 4 0;
#X connect 7 1 2 0;
#X connect 7 2 6 0;
#X connect 7 3 6 0;
#X connect 7 4 8 0;
#X connect 8 0 6 0;
#X connect 9 0 5 0;
#X restore 41 257 pd list-accumulate;
#N canvas 1 26 450 300 list-accumulate 0;
#X obj 182 122 list;
#X obj 113 165 t a a;
#X msg 72 65 list;
#X obj 31 16 inlet;
#X obj 31 241 list;
#X obj 31 286 outlet;
#X obj 113 144 list prepend;
#X obj 31 37 route bang clear list float symbol;
#X obj 191 62 symbol;
#X obj 31 262 list trim;
#X connect 0 0 6 1;
#X connect 1 0 0 0;
#X connect 1 1 4 1;
#X connect 2 0 1 0;
#X connect 3 0 7 0;
#X connect 4 0 9 0;
#X connect 6 0 1 0;
#X connect 7 0 4 0;
#X connect 7 1 2 0;
#X connect 7 2 6 0;
#X connect 7 3 6 0;
#X connect 7 4 8 0;
#X connect 8 0 6 0;
#X connect 9 0 5 0;
#X restore 357 256 pd list-accumulate;
#N canvas 2 51 450 300 list-prepend 0;
#X obj 40 40 inlet;
#X obj 40 82 list trim;
#X obj 40 103 outlet;
#X obj 145 40 inlet;
#X obj 40 61 list prepend qsort;
#X connect 0 0 4 0;
#X connect 1 0 2 0;
#X connect 3 0 4 1;
#X connect 4 0 1 0;
#X restore 414 310 pd list-prepend qsort;
#N canvas 2 51 450 300 list-prepend 0;
#X obj 40 40 inlet;
#X obj 40 82 list trim;
#X obj 40 103 outlet;
#X obj 145 41 inlet;
#X obj 40 61 list prepend qsort;
#X connect 0 0 4 0;
#X connect 1 0 2 0;
#X connect 3 0 4 1;
#X connect 4 0 1 0;
#X restore 98 322 pd list-prepend qsort;
#X connect 1 0 5 0;
#X connect 2 0 7 0;
#X connect 2 1 27 0;
#X connect 3 0 4 0;
#X connect 5 0 21 0;
#X connect 5 1 22 0;
#X connect 6 0 1 0;
#X connect 6 1 23 0;
#X connect 7 0 10 0;
#X connect 7 1 6 0;
#X connect 9 0 1 1;
#X connect 9 0 3 1;
#X connect 10 0 28 0;
#X connect 10 1 3 0;
#X connect 10 2 29 0;
#X connect 16 0 2 0;
#X connect 21 0 28 0;
#X connect 22 0 29 0;
#X connect 24 1 31 0;
#X connect 25 1 30 0;
#X connect 27 0 28 0;
#X connect 27 0 29 0;
#X connect 28 0 24 0;
#X connect 29 0 25 0;
#X connect 30 0 4 0;
#X connect 31 0 4 0;
#X restore 51 134 pd pivot-split;
#X obj 51 103 list;
#X text 153 61 take first element of list as pivot;
#X text 153 152 "qsort <left-seq> \, <pivot> \, qsort <right-seq>"
;
#X text 155 135 output the seq;
#X connect 0 0 2 0;
#X connect 2 0 3 0;
#X connect 2 1 5 1;
#X connect 3 0 5 0;
#X connect 3 1 4 1;
#X connect 4 0 1 0;
#X connect 5 0 4 0;
#X restore 371 374 pd make-pivot-split-seq;
#X obj 350 447 route qsort float;
#X msg 640 331 clear;
#X obj 256 303 route bang float qsort;
#X msg 323 385 \$1;
#X obj 323 426 t a a;
#X text 4 580 flag indicating existence of "qsort";
#X obj 256 559 route dirty clean;
#X text 656 348 clear result accumulator;
#X text 3 655 "clean" means just floats in sequence;
#X text 4 671 this indicates we're ready and can output the list.;
#X text 363 272 command queue;
#N canvas 1 26 450 300 symbol 0;
#X obj 72 23 inlet;
#X obj 15 22 inlet;
#X obj 15 86 symbol;
#X msg 15 107 \$1;
#X obj 15 128 outlet;
#X obj 72 44 symbol;
#X connect 0 0 5 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 5 0 2 1;
#X restore 256 537 pd symbol;
#X msg 307 488 dirty;
#N canvas 2 51 217 280 route-list-length-1 0;
#X obj 57 52 t a a;
#X obj 84 145 list;
#X obj 57 97 sel 1;
#X obj 43 146 list;
#X obj 84 117 bang;
#X obj 57 75 list length;
#X obj 43 203 outlet;
#X obj 91 204 outlet;
#X obj 57 28 inlet;
#X connect 0 0 5 0;
#X connect 0 1 1 1;
#X connect 0 1 3 1;
#X connect 1 0 7 0;
#X connect 2 0 3 0;
#X connect 2 1 4 0;
#X connect 3 0 6 0;
#X connect 4 0 1 0;
#X connect 5 0 2 0;
#X connect 8 0 0 0;
#X restore 342 325 pd route-list-length-1;
#X text 365 393 command sequence out;
#X msg 621 305 clean;
#X text 610 287 clear dirty flag;
#X obj 152 416 print queue-out;
#X obj 152 394 spigot;
#X obj 185 374 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 204 372 debug;
#X text -11 365 trigger next;
#X text -12 380 iteration/recursion;
#X text 536 567 collect all floats on each recursion anew.;
#X obj 255 13 inlet;
#X obj 255 156 t b a b;
#X msg 231 234 end;
#X msg 294 178 clear;
#X text 343 179 clear queue;
#X text 431 211 add qsort command to queue;
#X text 56 235 trigger iteration/recursion;
#X text 337 11 quicksort implementation;
#X text 339 39 This is an attempt to establish a recursion by capturing
the;
#X text 6 593 commands in command sequence.;
#X text 2 613 "dirty" means qsort commands still existent;
#X text 7 626 and we have to trigger another round.;
#X text 339 129 In order to see the recursion in action set the toggle
;
#X text 339 144 labeled "debug" in the left center of this window.
;
#X text 340 159 Each recursion ends with a bang.;
#X obj 483 708 outlet;
#X text 339 56 state of the last recursion in a queue. It was inspired
from;
#X text 339 72 the clarity and ease of a functional approach to quicksort
;
#X text 340 87 although it's a far cry from that being still entirely
;
#X text 338 102 imperative and by no means efficient.;
#X text 296 419 to;
#X text 285 433 queue;
#X text 287 406 add;
#N canvas 1 26 450 300 list-accumulate 0;
#X obj 182 122 list;
#X obj 113 165 t a a;
#X msg 72 65 list;
#X obj 31 16 inlet;
#X obj 31 241 list;
#X obj 31 286 outlet;
#X obj 113 144 list prepend;
#X obj 31 37 route bang clear list float symbol;
#X obj 191 62 symbol;
#X obj 31 262 list trim;
#X connect 0 0 6 1;
#X connect 1 0 0 0;
#X connect 1 1 4 1;
#X connect 2 0 1 0;
#X connect 3 0 7 0;
#X connect 4 0 9 0;
#X connect 6 0 1 0;
#X connect 7 0 4 0;
#X connect 7 1 2 0;
#X connect 7 2 6 0;
#X connect 7 3 6 0;
#X connect 7 4 8 0;
#X connect 8 0 6 0;
#X connect 9 0 5 0;
#X restore 483 667 pd list-accumulate;
#N canvas 2 51 450 300 list-prepend 0;
#X obj 40 40 inlet;
#X obj 40 82 list trim;
#X obj 40 103 outlet;
#X obj 145 41 inlet;
#X obj 40 61 list prepend qsort;
#X connect 0 0 4 0;
#X connect 1 0 2 0;
#X connect 3 0 4 1;
#X connect 4 0 1 0;
#X restore 295 210 pd list-prepend qsort;
#X obj 538 708 print output;
#X msg 137 88 4;
#X msg 64 98 1 1 1 1;
#X msg -6 39 13 12 11 9 8 7 6 5 4 3 1;
#X text -6 21 worst-case;
#X text 536 585 but output list only on end of last recursion.;
#X msg 136 12 5 2 3 10 13 6 4 11;
#X text 339 115 It could also be improved by better guessing of a pivot.
;
#X text 534 602 this is fairly inefficient but getting rid of;
#X text 536 637 It's more a proof of concept anyway.;
#X text 533 619 that ends in something a lot harder to read;
#X text 12 737 Orm Finnendahl 2011;
#X connect 0 0 21 0;
#X connect 0 0 5 0;
#X connect 0 1 18 0;
#X connect 0 1 4 0;
#X connect 1 0 0 0;
#X connect 2 0 7 0;
#X connect 3 0 15 0;
#X connect 3 1 50 0;
#X connect 4 0 50 0;
#X connect 5 0 14 0;
#X connect 5 1 6 0;
#X connect 5 2 16 0;
#X connect 6 0 7 0;
#X connect 7 0 0 0;
#X connect 7 1 3 0;
#X connect 9 0 1 0;
#X connect 9 1 50 0;
#X connect 14 0 9 0;
#X connect 15 0 14 1;
#X connect 16 0 6 0;
#X connect 16 1 2 0;
#X connect 18 0 14 1;
#X connect 21 0 20 0;
#X connect 22 0 21 1;
#X connect 27 0 28 0;
#X connect 28 0 29 0;
#X connect 28 1 51 0;
#X connect 28 2 30 0;
#X connect 29 0 0 0;
#X connect 30 0 0 0;
#X connect 50 0 52 0;
#X connect 50 0 42 0;
#X connect 51 0 0 0;
#X connect 53 0 28 0;
#X connect 54 0 28 0;
#X connect 55 0 28 0;
#X connect 58 0 28 0;
