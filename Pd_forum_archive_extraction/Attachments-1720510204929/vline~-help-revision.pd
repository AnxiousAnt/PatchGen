#N canvas 209 80 830 571 12;
#X obj 28 523 snapshot~;
#X floatatom 28 546 5 0 0 0 - - -;
#X obj 38 496 metro 100;
#X obj 38 471 r start;
#X msg 550 21 \; pd dsp 1 \; start bang;
#X msg 28 306 1 1000;
#X msg 56 422 stop;
#X msg 45 353 0;
#X text 644 36 Click to start;
#X text 639 94 Click to stop;
#X text 180 522 see also:;
#X obj 266 524 line;
#X msg 550 75 \; pd dsp 0 \; start 0;
#X obj 312 524 line~;
#X obj 21 7 vline~;
#X text 85 7 - high-precision audio ramp generator;
#X obj 28 448 vline~;
#X text 15 44 The vline~ object \, like line~ \, generates linear ramps
whose levels and timing are determined by messages you send it. The
messages consist of a target value \, a time interval (zero if not
supplied) \, and an initial delay (also zero if not supplied.) Ramps
may start and stop between audio samples \, in which case the output
is interpolated accordingly.;
#X text 15 155 Any number of future ramps may be scheduled and vline~
will remember them and execute them in order. They must be specified
in increasing order of initial delay however \, since a segment cancels
all planned segments at any future time.;
#X text 93 303 ramp up;
#X msg 37 328 0 1000;
#X text 100 331 ramp down;
#X text 57 373 ramp up \, jump down \, ramp up again;
#X msg 51 394 1 1000 \, 0 0 1000 \, 1 1000 1000;
#X text 83 352 jump down;
#X text 99 421 "stop" message freezes vline~ at its current value;
#X text 559 519 updated for version 0.39.2;
#X text 18 234 Note: vline~ will continue to store any messages sent
to it even when audio processing is switched off. This can lead to
a rise in CPU usage \, so try to avoid sending messages to vline~ when
audio processing is halted.;
#X connect 0 0 1 0;
#X connect 2 0 0 0;
#X connect 3 0 2 0;
#X connect 5 0 16 0;
#X connect 6 0 16 0;
#X connect 7 0 16 0;
#X connect 16 0 0 0;
#X connect 20 0 16 0;
#X connect 23 0 16 0;
