[
  {
    "title": "abs",
    "description": "calculates absolute value",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "see_also": [
      "+~",
      "+",
      "div",
      "expr"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "input value"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "abs.md"
  },
  {
    "title": "abs~",
    "description": "calculates absolute value of signal",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math",
    "last_update": "0.42",
    "see_also": [
      "abs",
      "expr~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "input for absolute value"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "absolute value"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "initial value"
      }
    ],
    "draft": false,
    "content": "The abs~ object passes nonnegative values unchanged, but replaces negative ones with their (positive) inverses.",
    "filename": "abs~.md"
  },
  {
    "title": "adc~",
    "description": "Audio input from sound card",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Audio I/O",
    "last_update": "0.47",
    "inlets": {
      "1st": [
        {
          "type": "set <list>",
          "description": "resets the channel(s)"
        }
      ]
    },
    "outlets": {
      "nth": [
        {
          "type": "signal",
          "description": "signal input from sound card"
        }
      ]
    },
    "arguments": [
      {
        "type": "list",
        "description": "set input channels",
        "default": "1 2"
      }
    ],
    "draft": false,
    "content": "adc~ and dac~ provide real-time audio input and output for Pd, respectively, whether analog or digital. By default they are stereo (with channel numbers 1, 2",
    "filename": "adc~.md"
  },
  {
    "title": "&",
    "description": "bitwise AND",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Logic",
    "see_also": [
      "+~",
      "expr",
      "sin",
      "log"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/bitwise-operators.md\" >}}",
    "filename": "and.md"
  },
  {
    "title": "&&",
    "description": "logical AND",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Logic",
    "see_also": [
      "+~",
      "expr",
      "sin",
      "log"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "andand.md"
  },
  {
    "title": "append",
    "description": "add an item to a data structure list",
    "see_also": [
      "pointer",
      "getsize",
      "setsize",
      "get",
      "set",
      "scalar",
      "struct",
      "element"
    ],
    "pdcategory": "vanilla, Data Structures, UI",
    "last_update": "0.47",
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "set field value and append new data structure"
        }
      ],
      "nth": [
        {
          "type": "float",
          "description": "set field value"
        }
      ],
      "2nd": [
        {
          "type": "pointer",
          "description": "a pointer to the data structure to add"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "pointer",
          "description": "a pointer to added data structure"
        }
      ]
    },
    "arguments": [
      {
        "type": "symbol",
        "description": "set template name"
      },
      {
        "type": "list",
        "description": "set field names and create an inlet for each (one inlet is created by default)"
      }
    ],
    "methods": [
      {
        "type": "set <symbol, symbol>",
        "description": "if none or just one field is given, you can use 'set' to set struct name and field"
      }
    ],
    "draft": true,
    "content": "\"append\" maintains a pointer to a scalar, or else an empty pointer to the head of a list. You may set the pointer using the leftmost inlet. The creation arguments specify the template of a new scalar to append, and the names of the fields (there should be at least one) you will wish to initialize. To append an object, send a number to the leftmost inlet. \"Append\"'s pointer is updated to point to the new scalar, and the new pointer is also output.\n\nTo insert to the beginning of a list, you can append to the \"head\" of the list.\n\nIf there are no fields or just one specified as as argument, you can use a \"set\" message to set both the template and field.",
    "filename": "append.md"
  },
  {
    "title": "array define",
    "description": "create an array",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Arrays and Tables",
    "last_update": "0.52",
    "see_also": [
      "array",
      "array size",
      "array sum",
      "array get",
      "array set",
      "array quantile",
      "array random",
      "array max",
      "array min",
      "text",
      "scalar",
      "list"
    ],
    "arguments": [
      {
        "description": "array name",
        "default": "internal numbered 'table#'",
        "type": "symbol"
      },
      {
        "description": "size and xrange",
        "default": 100,
        "type": "float"
      }
    ],
    "inlets": null,
    "1st": [
      {
        "type": "pointer",
        "description": "a pointer to the scalar containing the array at bangs"
      }
    ],
    "outlets": null,
    "flags": [
      {
        "name": "-k",
        "description": "saves/keeps the contents of the array with the patch"
      },
      {
        "name": "yrange <float, float>",
        "description": "set minimum and maximum plot range"
      },
      {
        "name": "-pix <float, float>",
        "description": "set x and y graph size"
      }
    ],
    "methods": [
      {
        "type": "send <symbol>",
        "description": "send pointer to a named receive object"
      }
    ],
    "draft": false,
    "content": "create, store, and/or edit an array",
    "filename": "array-define.md"
  },
  {
    "title": "array get",
    "description": "get contents as a list",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Arrays and Tables",
    "last_update": "0.52",
    "see_also": [
      "array",
      "array define",
      "array size",
      "array sum",
      "array set",
      "array quantile",
      "array random",
      "array max",
      "array min"
    ],
    "arguments": [
      {
        "description": "array name if no flags are given",
        "type": "symbol",
        "default": "none"
      },
      {
        "description": "initial onset",
        "type": "float",
        "default": 0
      },
      {
        "description": "initial number of points",
        "type": "float",
        "default": "-1 (end of array)"
      }
    ],
    "inlets": null,
    "1st": [
      {
        "type": "list",
        "description": "array's elements for the given range at bangs"
      }
    ],
    "2nd": [
      {
        "type": "float",
        "description": "number or points to output from onset (-1 is the end of array)"
      }
    ],
    "3rd": [
      {
        "type": "symbol",
        "description": "set array name"
      },
      {
        "type": "pointer",
        "description": "pointer to the array if -s flag is used"
      }
    ],
    "outlets": null,
    "flags": [
      {
        "name": "-s <symbol, symbol>",
        "description": "struct name and field name of main structure"
      },
      {
        "name": "-f <symbol, symbol>",
        "description": "struct name and field name of element structure"
      }
    ],
    "draft": false,
    "content": "get contents (all or a range) as a list",
    "filename": "array-get.md"
  },
  {
    "title": "array max",
    "description": "output maximum value of an array",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Arrays and Tables",
    "last_update": "0.52",
    "see_also": [
      "array",
      "array define",
      "array size",
      "array sum",
      "array get",
      "array set",
      "array quantile",
      "array random",
      "array min"
    ],
    "arguments": [
      {
        "description": "array name if no flags are given",
        "type": "symbol",
        "default": "none"
      },
      {
        "description": "initial onset",
        "type": "float",
        "default": 0
      },
      {
        "description": "initial number of points",
        "type": "float",
        "default": "-1 (end of array)"
      }
    ],
    "inlets": null,
    "1st": [
      {
        "type": "float",
        "description": "maximum value"
      }
    ],
    "2nd": [
      {
        "type": "float",
        "description": "index of found value"
      }
    ],
    "3rd": [
      {
        "type": "symbol",
        "description": "set array name"
      },
      {
        "type": "pointer",
        "description": "pointer to the array if -s flag is used"
      }
    ],
    "outlets": null,
    "flags": [
      {
        "name": "-s <symbol, symbol>",
        "description": "struct name and field name of main structure"
      },
      {
        "name": "-f <symbol, symbol>",
        "description": "struct name and field name of element structure"
      }
    ],
    "draft": false,
    "content": "find highest value in the array",
    "filename": "array-max.md"
  },
  {
    "title": "array min",
    "description": "output minimum value of an array",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Arrays and Tables",
    "last_update": "0.52",
    "see_also": [
      "array",
      "array define",
      "array size",
      "array sum",
      "array get",
      "array set",
      "array quantile",
      "array random",
      "array max",
      "array min"
    ],
    "arguments": [
      {
        "description": "array name if no flags are given",
        "type": "symbol",
        "default": "none"
      },
      {
        "description": "initial onset",
        "type": "float",
        "default": 0
      },
      {
        "description": "initial number of points",
        "type": "float",
        "default": "-1 (end of array)"
      }
    ],
    "inlets": null,
    "1st": [
      {
        "type": "float",
        "description": "minimum value"
      }
    ],
    "2nd": [
      {
        "type": "float",
        "description": "index of found value"
      }
    ],
    "3rd": [
      {
        "type": "symbol",
        "description": "set array name"
      },
      {
        "type": "pointer",
        "description": "pointer to the array if -s flag is used"
      }
    ],
    "outlets": null,
    "flags": [
      {
        "name": "-s <symbol, symbol>",
        "description": "struct name and field name of main structure"
      },
      {
        "name": "-f <symbol, symbol>",
        "description": "struct name and field name of element structure"
      }
    ],
    "draft": false,
    "content": "find lowest value in the array",
    "filename": "array-min.md"
  },
  {
    "title": "array quantile",
    "description": "outputs the specified quantile",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Arrays and Tables",
    "last_update": "0.52",
    "see_also": [
      "array",
      "array define",
      "array size",
      "array sum",
      "array get",
      "array set",
      "array random",
      "array max",
      "array min"
    ],
    "arguments": [
      {
        "description": "array name if no flags are given",
        "type": "symbol",
        "default": "none"
      },
      {
        "description": "initial onset",
        "type": "float",
        "default": 0
      },
      {
        "description": "initial number of points",
        "type": "float",
        "default": "-1 (end of array)"
      }
    ],
    "inlets": null,
    "1st": [
      {
        "type": "float",
        "description": "array's quantile at bangs"
      }
    ],
    "2nd": [
      {
        "type": "float",
        "description": "array onset (0 is start of array)"
      }
    ],
    "3rd": [
      {
        "type": "float",
        "description": "number of points (-1 is the end of array)"
      }
    ],
    "4th": [
      {
        "type": "symbol",
        "description": "set array name"
      },
      {
        "type": "pointer",
        "description": "pointer to the array if -s flag is used"
      }
    ],
    "outlets": null,
    "flags": [
      {
        "name": "-s <symbol, symbol>",
        "description": "struct name and field name of main structure"
      },
      {
        "name": "-f <symbol, symbol>",
        "description": "struct name and field name of element structure"
      }
    ],
    "draft": false,
    "content": "outputs the specified quantile",
    "filename": "array-quantile.md"
  },
  {
    "title": "array random",
    "description": "array as probabilities",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Arrays and Tables",
    "last_update": "0.52",
    "see_also": [
      "array",
      "array define",
      "array size",
      "array sum",
      "array get",
      "array set",
      "array quantile",
      "array max",
      "array min"
    ],
    "arguments": [
      {
        "description": "array name if no flags are given",
        "type": "symbol",
        "default": "none"
      },
      {
        "description": "initial onset",
        "type": "float",
        "default": 0
      },
      {
        "description": "initial number of points",
        "type": "float",
        "default": "-1 (end of array)"
      }
    ],
    "inlets": null,
    "1st": [
      {
        "type": "float",
        "description": "weighted random index value from the array at bangs"
      }
    ],
    "2nd": [
      {
        "type": "float",
        "description": "set number of points (-1 is the end of the array)"
      }
    ],
    "3rd": [
      {
        "type": "symbol",
        "description": "set array name"
      },
      {
        "type": "pointer",
        "description": "pointer to the array if -s flag is used"
      }
    ],
    "outlets": null,
    "flags": [
      {
        "name": "-s <symbol, symbol>",
        "description": "struct name and field name of main structure"
      },
      {
        "name": "-f <symbol, symbol>",
        "description": "struct name and field name of element structure"
      }
    ],
    "methods": [
      {
        "type": "seed <float>",
        "description": "sets random seed"
      }
    ],
    "draft": false,
    "content": "array as weighted probabilities",
    "filename": "array-random.md"
  },
  {
    "title": "array set",
    "description": "set contents from a list",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Arrays and Tables",
    "last_update": "0.52",
    "see_also": [
      "array",
      "array define",
      "array size",
      "array sum",
      "array get",
      "array quantile",
      "array random",
      "array max",
      "array min"
    ],
    "arguments": [
      {
        "description": "array name if no flags are given",
        "default": "none",
        "type": "symbol"
      },
      {
        "description": "initial onset",
        "type": "float",
        "default": 0
      }
    ],
    "inlets": null,
    "1st": [
      {
        "type": "list",
        "description": "list of values to write to array"
      }
    ],
    "2nd": [
      {
        "type": "float",
        "description": "onset (index to set from, 0 is the start)"
      }
    ],
    "3rd": [
      {
        "type": "symbol",
        "description": "set array name"
      },
      {
        "type": "pointer",
        "description": "pointer to the array if -s flag is used"
      }
    ],
    "flags": [
      {
        "name": "-s <symbol, symbol>",
        "description": "struct name and field name of main structure"
      },
      {
        "name": "-f <symbol, symbol>",
        "description": "struct name and field name of element structure"
      }
    ],
    "draft": false,
    "content": "set contents (all or a range) from a list",
    "filename": "array-set.md"
  },
  {
    "title": "array size",
    "description": "output or set array size",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Arrays and Tables",
    "last_update": "0.52",
    "see_also": [
      "array",
      "array define",
      "array sum",
      "array get",
      "array set",
      "array quantile",
      "array random",
      "array max",
      "array min"
    ],
    "arguments": [
      {
        "description": "array name if no flags are given",
        "default": "none",
        "type": "symbol"
      }
    ],
    "flags": [
      {
        "name": "-s <symbol, symbol>",
        "description": "struct name and field name of main structure"
      },
      {
        "name": "-f <symbol, symbol>",
        "description": "struct name and field name of element structure"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "output the array size"
        },
        {
          "type": "float",
          "description": "set the array size"
        }
      ],
      "2nd": [
        {
          "type": "symbol",
          "description": "set array name"
        },
        {
          "type": "pointer",
          "description": "pointer to the array if '-s' flag is used"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "array size"
        }
      ]
    },
    "draft": false,
    "content": "\"array define\" maintains an array and can name it so that other objects can find it (and later should have some alternative, anonymous way to be found",
    "filename": "array-size.md"
  },
  {
    "title": "array sum",
    "description": "sum all or a range of elements",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Arrays and Tables",
    "last_update": "0.52",
    "see_also": [
      "array",
      "array define",
      "array size",
      "array get",
      "array set",
      "array quantile",
      "array random",
      "array max",
      "array min"
    ],
    "arguments": [
      {
        "description": "array name if no flags are given",
        "type": "symbol",
        "default": "none"
      },
      {
        "description": "initial onset",
        "type": "float",
        "default": 0
      },
      {
        "description": "initial number of points",
        "type": "float",
        "default": "-1 (end of array)"
      }
    ],
    "inlets": null,
    "1st": [
      {
        "type": "float",
        "description": "the sum of the specified range at bangs"
      }
    ],
    "2nd": [
      {
        "type": "float",
        "description": "number or points to sum from onset (-1 is the end of array)"
      }
    ],
    "3rd": [
      {
        "type": "symbol",
        "description": "set array name"
      },
      {
        "type": "pointer",
        "description": "pointer to the array if -s flag is used"
      }
    ],
    "outlets": null,
    "flags": [
      {
        "name": "-s <symbol, symbol>",
        "description": "struct name and field name of main structure"
      },
      {
        "name": "-f <symbol, symbol>",
        "description": "struct name and field name of element structure"
      }
    ],
    "draft": false,
    "content": "output the sum of the array or a range selection",
    "filename": "array-sum.md"
  },
  {
    "title": "atan",
    "description": "arctangent function",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "see_also": [
      "+~",
      "+",
      "div",
      "expr"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "input value"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "Unlike the signal version cos~, control-rate trigonometric functions take inputs in radians.",
    "filename": "atan.md"
  },
  {
    "title": "atan2",
    "description": "2-argument arctangent function",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "see_also": [
      "+~",
      "+",
      "div",
      "expr"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "The atan2 version takes an (x, y",
    "filename": "atan2.md"
  },
  {
    "title": "bag",
    "description": "collection of numbers",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "last_update": "0.33",
    "see_also": [
      "poly",
      "makenote"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "value to store or delete depending on the flag"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "flag (true <non-0>, or false <0>)"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the stored values on flush message"
        }
      ]
    },
    "methods": [
      {
        "type": "flush",
        "description": "output stored values and clear the bag"
      },
      {
        "type": "clear",
        "description": "clear stored values from the bag (no output)"
      }
    ],
    "draft": false,
    "content": "The bag object adds a value to or removes it from a collection of numbers depending on the flag. The left inlet takes the value and the right inlet takes the flag. If the flag is true (non-0), the value is added to the collection and removed otherwise. The example here takes a list input, which gets spread at inlets (as is common in Pd).\n\nThe collection may have many copies of the same value. You can output the collection (and empty it) with a \"flush\" message, or just empty it with \"clear.\" You can use this to mimic a sustain pedal, for example.",
    "filename": "bag.md"
  },
  {
    "title": "bang, b",
    "description": "output a bang message",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management, Triggers and Clocks",
    "last_update": "0.27",
    "inlets": {
      "1st": [
        {
          "type": "anything",
          "description": "any message outputs a bang"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "bang",
          "description": "a bang message"
        }
      ]
    },
    "draft": false,
    "content": "The [bang] object outputs a \"bang\" message for whatever message it receives.",
    "filename": "bang.md"
  },
  {
    "title": "bang~",
    "description": "output bang after each DSP cycle",
    "categories": [
      "object"
    ],
    "see_also": [
      "block~"
    ],
    "pdcategory": "vanilla, Triggers and Clocks",
    "last_update": "0.33",
    "inlets": {
      "1st": [
        {
          "type": null,
          "description": "inactive inlet"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "bang",
          "description": "at every DSP block cycle when DSP is on"
        }
      ]
    },
    "draft": false,
    "content": "bang~ outputs a bang after each DSP block cycle (at the same logical time as the DSP cycle.) This is primarily useful for sampling the outputs of analysis algorithms.\n\nBy default, a block size is 64 samples, at a 44100 sample rate, this about 1.45 ms. You can change the sample rate in audio settings and the block size with the block~ or switch~ object. Note that the minimum block size bang~ can handle is 64!",
    "filename": "bang~.md"
  },
  {
    "title": "bendin",
    "description": "MIDI input",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.48-2",
    "see_also": [
      "notein",
      "noteout"
    ],
    "arguments": [
      {
        "description": "MIDI channel/port",
        "type": "float"
      }
    ],
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI bend value"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI channel/port"
        }
      ]
    },
    "bref": "MIDI input",
    "draft": false,
    "content": "**Known bug:** [bendin] and [bendout] are inconsistent ([bendin] outputs values from 0 to 16383 and [bendout] takes values from -8192 to 8191) - this won't change.",
    "filename": "bendin.md"
  },
  {
    "title": "bendout",
    "description": "MIDI output",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.48-2",
    "see_also": [
      "notein",
      "noteout"
    ],
    "arguments": [
      {
        "description": "MIDI channel/port",
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI bend value"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI channel/port"
        }
      ]
    },
    "bref": "MIDI output",
    "draft": false,
    "content": "**Known bug:** [bendin] and [bendout] are inconsistent ([bendin] outputs values from 0 to 16383 and [bendout] takes values from -8192 to 8191) - this won't change.",
    "filename": "bendout.md"
  },
  {
    "title": "biquad~",
    "description": "2nd order (2-pole / 2-zero) filter",
    "categories": [
      "object"
    ],
    "see_also": [
      "lop~",
      "hip~",
      "bp~",
      "vcf~",
      "bob~",
      "fexpr~",
      "slop~",
      "rpole~",
      "rzero~",
      "rzero_rev~",
      "cpole~",
      "czero~",
      "czero_rev~"
    ],
    "pdcategory": "vanilla, Filters",
    "last_update": "0.30",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "input signal to be filtered"
        },
        {
          "type": "list",
          "description": "the five coefficients (fb1 fb2 ff1 ff2 ff3)"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "the filtered signal output"
        }
      ]
    },
    "arguments": [
      {
        "type": "list",
        "description": "initializes the 5 coefficients (fb1 fb2 ff1 ff2 ff3)"
      }
    ],
    "methods": [
      {
        "type": "set <float, float>",
        "description": "set last two input samples"
      },
      {
        "type": "clear",
        "description": "clear filter's memory buffer"
      }
    ],
    "draft": false,
    "content": "Biquad~ calculates the following difference equation:\n\n`y(n) = ff1 * w(n) + ff2 * w(n-1) + ff3 * w(n-2)`\n\n`w(n) = x(n) + fb1 * w(n-1) + fb2 * w(n-2)`\n\nThe filter's coefficients syntax (set via arguments or list input) is: fb1 fb2 ff1 ff2 ff3",
    "filename": "biquad~.md"
  },
  {
    "title": "block~",
    "description": "set block size for DSP",
    "categories": [
      "object"
    ],
    "see_also": [
      "fft~",
      "bang~",
      "switch~"
    ],
    "pdcategory": "vanilla, Analysis, Audio I/O",
    "last_update": "0.43",
    "inlets": {
      "1st": [
        {
          "type": "set <list>",
          "description": "set argument values (size, overlap, up/downsampling)"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "set block size",
        "default": 64
      },
      {
        "type": "float",
        "description": "set overlap for FFT",
        "default": 1
      },
      {
        "type": "float",
        "description": "up/down-sampling factor",
        "default": 1
      }
    ],
    "draft": false,
    "content": "set block size and on/off control for DSP",
    "filename": "block~.md"
  },
  {
    "title": "bob~",
    "description": "Runge-Kutte numerical simulation of the Moog analog resonant filter",
    "categories": [
      "object"
    ],
    "see_also": [
      "lop~",
      "hip~",
      "bp~",
      "vcf~",
      "biquad~",
      "slop~",
      "cpole~",
      "fexpr~"
    ],
    "pdcategory": "vanilla, Filters",
    "last_update": "0.52",
    "inlets": {
      "1st": [
        {
          "type": "float/signal",
          "description": "input to be filtered"
        }
      ],
      "2nd": [
        {
          "type": "float/signal",
          "description": "resonant or cutoff frequency in Hz"
        }
      ],
      "3rd": [
        {
          "type": "float/signal",
          "description": "resonance"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "filtered signal"
        }
      ]
    },
    "methods": [
      {
        "type": "saturation <float>",
        "description": "sent saturation point of \"transistors\""
      },
      {
        "type": "oversample <float>",
        "description": "sent oversampling"
      },
      {
        "type": "clear",
        "description": "clear internal state"
      },
      {
        "type": "print",
        "description": "post internal state and parameters on Pd's window"
      }
    ],
    "draft": false,
    "content": "The design of bob~ is based on papers by Tim Stilson, Timothy E. Stinchcombe, and Antti Huovilainen. See README.txt for pointers. The three audio inputs are the signal to filter, the cutoff/resonant frequency in cycles per second, and \"resonance\" (the sharpness of the filter). Nominally, a resonance of 4 should be the limit of stability -- above that, the filter oscillates.\n\nBy default bob~ does one step of 4th-order Runge-Kutte integration per audio sample. This works OK for resonant/cutoff frequencies up to about 1/2 Nyquist. To improve accuracy and/or to extend the range of the filter to higher cutoff frequencies you can oversample by any factor - but note that computation time rises accordingly. At high cutoff frequencies/resonance values the RK approximation can go unstable. You can combat this by raising the oversampling factor.\n\nThe saturation parameter determines at what signal level the \"transistors\" in the model saturate. The maximum output amplitude is about 2/3 of that value. \"Clear\" momentarily shorts out the capacitors in case the filter has gone unstable and stopped working.\n\nCompatibility note: there was a bug in this module, fixed for Pd version 0.52. You can get the (incorrect) pre-0.52 behavior by setting pd's compatibility level to 0.51.",
    "filename": "bob~.md"
  },
  {
    "title": "catch~",
    "description": "catch signal from one or more throw~ objects",
    "categories": [
      "object"
    ],
    "see_also": [
      "send~"
    ],
    "pdcategory": "vanilla, Mixing and Routing, Audio I/O",
    "last_update": "0.33",
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "signal from matching throw~ object(s)"
        }
      ]
    },
    "arguments": [
      {
        "type": "symbol",
        "description": "catch~ name symbol",
        "default": "empty symbol"
      },
      {
        "type": "float",
        "description": "number of channels"
      }
    ],
    "methods": [
      {
        "type": "channels <float>",
        "description": "sets number of channels"
      }
    ],
    "draft": false,
    "content": "Any number of throw~ objects can add into one catch~ object (but two catch~ objects cannot share the same name",
    "filename": "catch~.md"
  },
  {
    "title": "change",
    "description": "remove repeated numbers from a stream",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "last_update": "0.27",
    "arguments": [
      {
        "description": "initial value",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "output current value"
        },
        {
          "type": "float",
          "description": "input value (repeated numbers are filtered)"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "unrepeated value"
        }
      ]
    },
    "methods": [
      {
        "type": "set <float>",
        "description": "set the value"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "change.md"
  },
  {
    "title": "choice",
    "description": "search for a best match to an incoming list",
    "categories": [
      "object"
    ],
    "see_also": {},
    "pdcategory": "vanilla, Analysis",
    "last_update": "0.30",
    "inlets": {
      "1st": [
        {
          "type": "print",
          "description": "post debugging information in the print out window"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "index of best match (from zero)"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "non-0 avoids repeated output",
        "default": 0
      }
    ],
    "methods": [
      {
        "type": "add <list>",
        "description": "add vectors into the objects"
      },
      {
        "type": "clear",
        "description": "delete all stored vectors"
      }
    ],
    "draft": false,
    "content": "The choice object holds a list of vectors, each having up to ten elements. When sent a list of numbers, it outputs the index of the known vector that matches most closely. The quality of the match is the dot product of the two vectors after normalizing them, i.e., the vector whose direction is closest to that of the input wins.\n\nIf given a non-0 creation argument, choice tries to avoid repetitious outputs by weighting less recently output vectors preferentially.\n\nYou can use this to choose interactively between a number of behaviors depending on their attributes. For example, you might have stored a number of melodies, of which some are syncopated, some chromatic, some are more than 100 years old, some are bugle calls, and some are Christmas carols. You could then ask to find a syncopated bugle call (1, 0, 0, 1, 0",
    "filename": "choice.md"
  },
  {
    "title": "clip",
    "description": "force a number into a range",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "last_update": "0.47",
    "see_also": [
      "clip~",
      "expr",
      "max",
      "min"
    ],
    "arguments": [
      {
        "description": "initial lower limit",
        "default": 0,
        "type": "float"
      },
      {
        "description": "initial upper limit",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "number to clip"
        },
        {
          "type": "bang",
          "description": "re-clip last incoming number"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set lower limit"
        }
      ],
      "3rd": [
        {
          "type": "float",
          "description": "set upper limit"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the clipped value"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "clip.md"
  },
  {
    "title": "clip~",
    "description": "restrict a signal between two limits",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math, Effects",
    "last_update": "0.33",
    "see_also": [
      "min~",
      "max~",
      "clip",
      "expr~"
    ],
    "arguments": [
      {
        "description": "initial lower limit",
        "default": 0,
        "type": "float"
      },
      {
        "description": "initial upper limit",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "signal value to clip"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set lower limit"
        }
      ],
      "3rd": [
        {
          "type": "float",
          "description": "set upper limit"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "the clipped signal"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "clip~.md"
  },
  {
    "title": "clone",
    "description": "make multiple copies of an abstraction",
    "categories": [
      "object"
    ],
    "see_also": [
      "poly"
    ],
    "pdcategory": "vanilla, UI, Data Management",
    "last_update": "0.54",
    "inlets": {
      "nth": [
        {
          "type": "list",
          "description": "first number selects instance; rest of the list is sent to that instance's inlet"
        },
        {
          "type": "signal",
          "description": "signal sent to all instances"
        }
      ]
    },
    "outlets": {
      "nth": [
        {
          "type": "data outlets",
          "description": "output with a prepended instance number"
        },
        {
          "type": "signal outlets",
          "description": "output from all instances either as multichannel signal or summed into mono signal"
        }
      ]
    },
    "flags": [
      {
        "name": "-x",
        "description": "avoids including a first argument setting voice number"
      },
      {
        "name": "-s <float>",
        "description": "sets starting voice number",
        "default": 0
      },
      {
        "name": "-di",
        "description": "distribute multichannel input signals across cloned patches"
      },
      {
        "name": "-do",
        "description": "combine signal outputs to make a multichannel signal"
      },
      {
        "name": "-d",
        "description": "set both -di and -do flags"
      }
    ],
    "arguments": [
      {
        "type": "symbol",
        "description": "abstraction name"
      },
      {
        "type": "float",
        "description": "number of instances"
      },
      {
        "type": "list",
        "description": "optional arguments to the abstraction"
      }
    ],
    "methods": [
      {
        "type": "resize <float>",
        "description": "resizes the number of copies"
      },
      {
        "type": "vis <list>",
        "description": "opens a copy, takes copy number and visualization status (1 to open, 0 to close)"
      },
      {
        "type": "next <list>",
        "description": "forwards a message to the next instance's inlet (incrementing and repeating circularly)"
      },
      {
        "type": "this <list>",
        "description": "forwards a message to the previous instance's inlet sent to by \"this\" or \"next\""
      },
      {
        "type": "set <list>",
        "description": "sets the \"next\"/\"this\" counter"
      },
      {
        "type": "all <list>",
        "description": "sends a message to all instances' inlet"
      }
    ],
    "draft": false,
    "content": "clone creates any number of instances of a desired abstraction (a patch loaded as an object in another patch",
    "filename": "clone.md"
  },
  {
    "title": "complex-mod~",
    "description": "complex amplitude modulator",
    "categories": [
      "object"
    ],
    "see_also": [
      "hilbert~"
    ],
    "pdcategory": "vanilla, Effects, Signal Math",
    "last_update": "0.52",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "real part of signal input"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "imaginary part of signal input"
        }
      ],
      "3rd": [
        {
          "type": "float/signal",
          "description": "frequency shift amount in Hz"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "frequency shifted side band"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "opposite side band (shifted in reverse)"
        }
      ]
    },
    "draft": false,
    "content": "The complex modulator takes two signals in which it considers to be the real and imaginary part of a complex-valued signal. It then does a complex multiplication by a sinusoid to shift all frequencies up or down by any frequency shift in Hz.\n\nThis is also known as 'single side band modulation' and relates to ring modulation (which has two sidebands)\n\nThe left output is the frequency shifted by the amount of the frequency shift. The right outlet gives us the other side band, which is shifted by the same amount in reverse.\n\n(for instance, if the shift is 100, left output shifts the frequency up by 100 and the right shifts it down by 100)",
    "filename": "complex-mod~.md"
  },
  {
    "title": "cos",
    "description": "cosine function",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "see_also": [
      "+~",
      "+",
      "div",
      "expr"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "input value"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "Unlike the signal version cos~, control-rate trigonometric functions take inputs in radians.",
    "filename": "cos.md"
  },
  {
    "title": "cos~",
    "description": "cosine waveshaper",
    "categories": [
      "object"
    ],
    "see_also": [
      "osc~",
      "cos",
      "tabread4~",
      "expr~"
    ],
    "pdcategory": "vanilla, Effects, Signal Math",
    "last_update": "0.41",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "input from 0-1 (wraps into 0-1 if outside this range)"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "phase ramp (in the range of 0 to 1)"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "sets input value"
      }
    ],
    "draft": false,
    "content": "The cos~ object outputs the cosine of two pi times its signal input. So -1, 0, 1 and 2 give 1 out, 0.5 gives -1, and so on.",
    "filename": "cos~.md"
  },
  {
    "title": "cpole~",
    "description": "complex one-pole filter",
    "categories": [
      "object"
    ],
    "see_also": [
      "lop~",
      "hip~",
      "bp~",
      "vcf~",
      "bob~",
      "biquad~",
      "fexpr~",
      "slop~"
    ],
    "pdcategory": "vanilla, Filters",
    "last_update": "0.43",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "signal to filter (real part)"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "signal to filter (imaginary part)"
        }
      ],
      "3rd": [
        {
          "type": "signal",
          "description": "filter coefficient (real part)"
        }
      ],
      "4th": [
        {
          "type": "signal",
          "description": "filter coefficient (imaginary part)"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "filtered signal, real part"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "filtered signal, imaginary part"
        }
      ]
    },
    "arguments": [
      {
        "type": "list",
        "description": "real and imaginary part of coefficient",
        "default": "0 0"
      }
    ],
    "methods": [
      {
        "type": "set <float, float>",
        "description": "set internal state (real and imaginary part)"
      },
      {
        "type": "clear",
        "description": "clear internal state to zero (same as \"set 0 0\")"
      }
    ],
    "draft": false,
    "content": "cpole~ filters a complex audio signal (first two inlets",
    "filename": "cpole~.md"
  },
  {
    "title": "cputime",
    "description": "measure CPU time",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Triggers and Clocks, Analysis",
    "last_update": "0.33",
    "see_also": [
      "realtime",
      "timer"
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "reset (set elapsed time to zero)"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "time to measure"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "bang",
          "description": "output elapsed time"
        }
      ]
    },
    "draft": false,
    "content": "The cputime object measures elapsed CPU time,  as measured by your operating system. This appears to work on NT,  IRIX,  and Linux,  but not on W98.",
    "filename": "cputime.md"
  },
  {
    "title": "ctlin",
    "description": "MIDI input",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.48-2",
    "see_also": [
      "notein",
      "noteout"
    ],
    "arguments": [
      {
        "description": "MIDI controller number",
        "type": "float"
      },
      {
        "description": "MIDI channel/port",
        "type": "float"
      }
    ],
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI controller value"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI controller number"
        }
      ],
      "3rd": [
        {
          "type": "float",
          "description": "MIDI channel/port"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "ctlin.md"
  },
  {
    "title": "ctlout",
    "description": "MIDI output",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.48-2",
    "see_also": [
      "notein",
      "noteout"
    ],
    "arguments": [
      {
        "description": "MIDI controller number",
        "type": "float"
      },
      {
        "description": "MIDI channel/port",
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI controller value"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI controller number"
        }
      ],
      "3rd": [
        {
          "type": "float",
          "description": "MIDI channel/port"
        }
      ]
    },
    "bref": "MIDI output",
    "draft": false,
    "content": "",
    "filename": "ctlout.md"
  },
  {
    "title": "czero_rev~",
    "description": "complex one-zero \"reverse\" filter",
    "categories": [
      "object"
    ],
    "see_also": [
      "lop~",
      "hip~",
      "bp~",
      "vcf~",
      "bob~",
      "biquad~",
      "fexpr~",
      "slop~"
    ],
    "pdcategory": "vanilla, Filters",
    "last_update": "0.38",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "signal to filter (real part)"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "signal to filter (imaginary part)"
        }
      ],
      "3rd": [
        {
          "type": "signal",
          "description": "filter coefficient (real part)"
        }
      ],
      "4th": [
        {
          "type": "signal",
          "description": "filter coefficient (imaginary part)"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "filtered signal, real part"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "filtered signal, imaginary part"
        }
      ]
    },
    "arguments": [
      {
        "type": "list",
        "description": "real and imaginary part of coefficient",
        "default": "0 0"
      }
    ],
    "methods": [
      {
        "type": "set <float, float>",
        "description": "set internal state (real and imaginary part)"
      },
      {
        "type": "clear",
        "description": "clear internal state to zero (same as \"set 0 0\")"
      }
    ],
    "draft": false,
    "content": "Czero_rev~ filters a complex audio signal (first two inlets",
    "filename": "czero_rev~.md"
  },
  {
    "title": "czero~",
    "description": "complex one-zero filter",
    "categories": [
      "object"
    ],
    "see_also": [
      "lop~",
      "hip~",
      "bp~",
      "vcf~",
      "bob~",
      "biquad~",
      "fexpr~",
      "slop~"
    ],
    "pdcategory": "vanilla, Filters",
    "last_update": "0.38",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "signal to filter (real part)"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "signal to filter (imaginary part)"
        }
      ],
      "3rd": [
        {
          "type": "signal",
          "description": "filter coefficient (real part)"
        }
      ],
      "4th": [
        {
          "type": "signal",
          "description": "filter coefficient (imaginary part)"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "filtered signal, real part"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "filtered signal, imaginary part"
        }
      ]
    },
    "arguments": [
      {
        "type": "list",
        "description": "real and imaginary part of coefficient",
        "default": "0 0"
      }
    ],
    "methods": [
      {
        "type": "set <float, float>",
        "description": "set internal state (real and imaginary part)"
      },
      {
        "type": "clear",
        "description": "clear internal state to zero (same as \"set 0 0\")"
      }
    ],
    "draft": false,
    "content": "czero~ filters a complex audio signal (first two inlets",
    "filename": "czero~.md"
  },
  {
    "title": "dbtopow",
    "description": "dB to power units",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Converters",
    "last_update": "0.40",
    "see_also": [
      "mtof~",
      "expr"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "incoming value to be converted"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "converted value"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/acoustic-conversions.md\" >}}",
    "filename": "dbtopow.md"
  },
  {
    "title": "dbtopow~",
    "description": "dB to power units",
    "categories": [
      "object"
    ],
    "see_also": [
      "mtof",
      "expr~"
    ],
    "pdcategory": "vanilla, Converters",
    "last_update": "0.33",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "incoming value to be converted"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "converted value"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/acoustic-conversions-for-audio-signals.md\" >}}",
    "filename": "dbtopow~.md"
  },
  {
    "title": "dbtorms",
    "description": "dB to linear RMS amplitude",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Converters",
    "last_update": "0.40",
    "see_also": [
      "mtof~",
      "expr"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "incoming value to be converted"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "converted value"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/acoustic-conversions.md\" >}}",
    "filename": "dbtorms.md"
  },
  {
    "title": "dbtorms~",
    "description": "dB to linear RMS amplitude",
    "categories": [
      "object"
    ],
    "see_also": [
      "mtof",
      "expr~"
    ],
    "pdcategory": "vanilla, Converters",
    "last_update": "0.33",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "incoming value to be converted"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "converted value"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/acoustic-conversions-for-audio-signals.md\" >}}",
    "filename": "dbtorms~.md"
  },
  {
    "title": "declare",
    "description": "set environment for loading patch",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, UI, File Management",
    "last_update": "0.52",
    "flags": [
      {
        "name": "-path <symbol>",
        "description": "add to search path, relative to the patch or user paths"
      },
      {
        "name": "-stdpath <symbol>",
        "description": "add to search path, relative to Pd (the 'extra' folder)"
      },
      {
        "name": "-lib <symbol>",
        "description": "load a library, relative to the patch or user paths"
      },
      {
        "name": "-stdlib <symbol>",
        "description": "load a library, relative to Pd (the 'extra' folder)"
      }
    ],
    "draft": false,
    "content": "Compiled external libraries come either as a single binary pack (the \"classic\" library format) or as a set of separate binaries and/or abstractions. A single binary pack is what we refer to as a 'library' and needs to be pre loaded - whereas external libraries that have separate binaries/abstractions can be loaded by simply adding its directory to the search path. Adding a directory to the path is also needed if you want to load things like audio and text files that are in it.\n\nA declare object adds one or more directories to the search path and/or pre-loads one or more libraries (\"externals\") to Pd in preparation for opening the patch from a file. The usage is \"declare [-flag value] [-flag value] ...\" (For any of these you may use a full pathname such as \"/tmp/dir\" or, in Windows, \"C:/garbage\" instead of a relative path).\n\nFor instance, if you put abstractions and/or other supporting files in a subdirectory \"more\", you can put an object \"declare -path more\" to make sure Pd sees them when the patch is loaded. Or, if you have files installed in the directory extra/stillmore (in the Pd installation) you can get it using \"declare -stdpath stillmore\".\n\nPaths declared with '-path' will have top search priority. Next priority is the relative path, then user added search paths (set in \"Preferences => Path\") and finally the standard path (a.k.a the 'extra' folder). As of version 0.49, \"declare -path\" and \"declare -lib\" will fall back the other search paths if the relative path to the patch does not exist. To avoid checking further, use an explicit relative path by prepending \"./\" or \"../\" to the path or lib name.\n\nSince the 'extra' folder is the last in the search priority, other paths are searched before. You can use [declare -stdpath ./] to ensure that 'extra' has search priority. Note that the order you specify '-path' flags also specify the search priority.\n\nIt is a current best practice to just use [declare] instead of permanently adding paths to the user search paths or libs to startup. With [declare] you can better manage and avoid conflicts with externals from different libraries that have the same name by using it to call the right library you want.\n\nHowever, note that when you load a library (with 'declare -lib' or via startup), all of its objects get pre loaded and prevail, so using 'declare -path' cannot enforce loading priority. Hence, you may need to adopt slash declarations as in [library/objectname]. Also Note that while '-path' will only add search paths for the patch that owns the [declare] object, once a library is loaded, it stays with Pd and will be able to be loaded in other patches without [declare]. For more details on this and how external loading works in Pd, please refer to the chapter 4 of Pd's manual.\n\nWARNING: as of version 0.47, \"declare -path\" and \"declare -stdpath\" inside abstractions take effect only within those abstractions. If Pd's compatibility version is set to 0.46 or earlier the old (buggy) behavior takes effect.\n\nBUG: The name \"-stdpath\" is confusing, as it has a quite different effect from \"-stdpath\" on the pd command line.",
    "filename": "declare.md"
  },
  {
    "title": "delay, del",
    "description": "send a message after a time delay",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Triggers and Clocks, Data Management, Effects",
    "last_update": "0.45",
    "see_also": [
      "metro",
      "pipe",
      "text sequence",
      "timer"
    ],
    "arguments": [
      {
        "description": "initial delay time",
        "default": 0,
        "type": "float"
      },
      {
        "description": "tempo value",
        "default": 1,
        "type": "float"
      },
      {
        "description": "time unit",
        "default": "msec",
        "type": "symbol"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "start the delay"
        },
        {
          "type": "float",
          "description": "set delay time and start the delay"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set delay time for the next tempo"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "bang",
          "description": "bang at a delayed time"
        }
      ]
    },
    "methods": [
      {
        "type": "stop",
        "description": "stop the delay"
      },
      {
        "type": "tempo <float, symbol>",
        "description": "set tempo value (float) and time unit symbol"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "delay.md"
  },
  {
    "title": "delread4~, vd~",
    "description": "read from a delay line with 4-point interpolation (for variable delay times)",
    "categories": [
      "object"
    ],
    "see_also": [
      "fexpr~",
      "delwrite~",
      "delread~"
    ],
    "pdcategory": "vanilla, Effects, Buffers",
    "last_update": "0.52",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "delay time in ms"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "delayed signal"
        }
      ]
    },
    "arguments": [
      {
        "type": "symbol",
        "description": "delay line name"
      }
    ],
    "draft": false,
    "aliases": [
      "vd~"
    ],
    "content": "Delread4~ implements a 4-point interpolating delay tap. The delay in milliseconds of the tap is specified by an incoming signal for variable delay times.\n\nDelread~ and delread4~ objects read from a delay line allocated in a delwrite~ object with the same name. Note that in this help file we're using delay names with \"$0\" (the patch ID number used to force locality in Pd). You can use more than one delread~ and/or delread4~ objects for the same delwrite~ object. If the specified delay time in delread~/delread4~ is longer than the size of the delay line or less than zero it is clipped to the length of the delay line.\n\nIn case the delwrite~ runs later in the DSP loop than the delread~ or delread4~ objects, the delay is constrained below by one vector length (usually 64 samples).",
    "filename": "delread4~.md"
  },
  {
    "title": "delwrite~",
    "description": "write in a delay line",
    "categories": [
      "object"
    ],
    "see_also": [
      "fexpr~",
      "delread~",
      "delread4~"
    ],
    "pdcategory": "vanilla, Effects, Buffers",
    "last_update": "0.52",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "signal input into the delay time"
        },
        {
          "type": "clear",
          "description": "clear the delay time"
        }
      ]
    },
    "arguments": [
      {
        "type": "symbol",
        "description": "delay line name"
      },
      {
        "type": "float",
        "description": "length of delay line in msec (the maximum delay time in read objects)"
      }
    ],
    "draft": false,
    "content": "delread~ and delread4~ objects read from a delay line allocated in a delwrite~ object with the same name. Note that in this help file we're using delay names with \"$0\" (the patch ID number used to force locality in Pd). You can use more than one delread~ and/or delread4~ objects for the same delwrite~ object. If the specified delay time in delread~/delread4~ is longer than the size of the delay line or less than zero it is clipped to the length of the delay line.\n\nIn case the delwrite~ runs later in the DSP loop than the delread~ or delread4~ objects, the delay is constrained below by one vector length (usually 64 samples).",
    "filename": "delwrite~.md"
  },
  {
    "title": "div",
    "description": "divide numbers",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "see_also": [
      "+~",
      "+",
      "div",
      "expr"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "div and mod do integer division, where div outputs the integer quotient and mod outputs the remainder (modulus",
    "filename": "div.md"
  },
  {
    "title": "drawcurve",
    "description": "draw shapes for data structures",
    "categories": [
      "object"
    ],
    "see_also": [
      "struct",
      "drawtext",
      "plot",
      "set",
      "text"
    ],
    "pdcategory": "vanilla, Data Structures",
    "last_update": "0.51",
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "sets visibility (1 = visible, 0 = invisible)"
        }
      ]
    },
    "flags": [
      {
        "name": "-n",
        "description": "makes it invisible initially"
      },
      {
        "name": "-v <symbol>",
        "description": "assigns a field to make it visible/invisible"
      },
      {
        "name": "-xr",
        "description": "disable mouse actions when in \"run\" mode"
      },
      {
        "name": "-xe",
        "description": "disable mouse actions when in \"edit\" mode"
      },
      {
        "name": "-x",
        "description": "set both \"-xr\" and \"-xe\", disabling all mouse actions"
      },
      {
        "name": "-xv",
        "description": "disable dragging vertices when in \"run\" mode (keeps reporting mouse clicks)"
      }
    ],
    "arguments": [
      {
        "type": "float",
        "description": "line color, filled shapes have an extra first interior color",
        "default": "0, 0"
      },
      {
        "type": "float",
        "description": "line width",
        "default": 1
      },
      {
        "type": "list",
        "description": "(x, y) pairs giving coordinates of each vertex"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "drawcurve.md"
  },
  {
    "title": "drawnumber",
    "description": "draw numbers, symbols or texts for data structures",
    "categories": [
      "object"
    ],
    "see_also": [
      "struct",
      "drawpolygon",
      "plot",
      "set"
    ],
    "pdcategory": "vanilla, Data Structures",
    "last_update": "0.50",
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "sets visibility (1 = visible, 0 = invisible)"
        }
      ]
    },
    "flags": [
      {
        "name": "-n",
        "description": "makes it invisible initially"
      },
      {
        "name": "-v <symbol>",
        "description": "assigns a field to make it visible/invisible"
      }
    ],
    "arguments": [
      {
        "type": "symbol",
        "description": "field name to draw"
      },
      {
        "type": "list",
        "description": "(x, y) coordinates pair",
        "default": "0 0"
      },
      {
        "type": "float",
        "description": "color",
        "default": 0
      },
      {
        "type": "symbol",
        "description": "optional label"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "drawnumber.md"
  },
  {
    "title": "drawpolygon",
    "description": "draw shapes for data structures",
    "categories": [
      "object"
    ],
    "see_also": [
      "struct",
      "drawtext",
      "plot",
      "set",
      "text"
    ],
    "pdcategory": "vanilla, Data Structures",
    "last_update": "0.51",
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "sets visibility (1 = visible, 0 = invisible)"
        }
      ]
    },
    "flags": [
      {
        "name": "-n",
        "description": "makes it invisible initially"
      },
      {
        "name": "-v <symbol>",
        "description": "assigns a field to make it visible/invisible"
      },
      {
        "name": "-xr",
        "description": "disable mouse actions when in \"run\" mode"
      },
      {
        "name": "-xe",
        "description": "disable mouse actions when in \"edit\" mode"
      },
      {
        "name": "-x",
        "description": "set both \"-xr\" and \"-xe\", disabling all mouse actions"
      },
      {
        "name": "-xv",
        "description": "disable dragging vertices when in \"run\" mode (keeps reporting mouse clicks)"
      }
    ],
    "arguments": [
      {
        "type": "float",
        "description": "line color, filled shapes have an extra first interior color",
        "default": "0, 0"
      },
      {
        "type": "float",
        "description": "line width",
        "default": 1
      },
      {
        "type": "list",
        "description": "(x, y) pairs giving coordinates of each vertex"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "drawpolygon.md"
  },
  {
    "title": "drawsymbol",
    "description": "draw numbers, symbols or texts for data structures",
    "categories": [
      "object"
    ],
    "see_also": [
      "struct",
      "drawpolygon",
      "plot",
      "set"
    ],
    "pdcategory": "vanilla, Data Structures",
    "last_update": "0.50",
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "sets visibility (1 = visible, 0 = invisible)"
        }
      ]
    },
    "flags": [
      {
        "name": "-n",
        "description": "makes it invisible initially"
      },
      {
        "name": "-v <symbol>",
        "description": "assigns a field to make it visible/invisible"
      }
    ],
    "arguments": [
      {
        "type": "symbol",
        "description": "field name to draw"
      },
      {
        "type": "list",
        "description": "(x, y) coordinates pair",
        "default": "0 0"
      },
      {
        "type": "float",
        "description": "color",
        "default": 0
      },
      {
        "type": "symbol",
        "description": "optional label"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "drawsymbol.md"
  },
  {
    "title": "drawtext",
    "description": "draw numbers, symbols or texts for data structures",
    "categories": [
      "object"
    ],
    "see_also": [
      "struct",
      "drawpolygon",
      "plot",
      "set"
    ],
    "pdcategory": "vanilla, Data Structures",
    "last_update": "0.50",
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "sets visibility (1 = visible, 0 = invisible)"
        }
      ]
    },
    "flags": [
      {
        "name": "-n",
        "description": "makes it invisible initially"
      },
      {
        "name": "-v <symbol>",
        "description": "assigns a field to make it visible/invisible"
      }
    ],
    "arguments": [
      {
        "type": "symbol",
        "description": "field name to draw"
      },
      {
        "type": "list",
        "description": "(x, y) coordinates pair",
        "default": "0 0"
      },
      {
        "type": "float",
        "description": "color",
        "default": 0
      },
      {
        "type": "symbol",
        "description": "optional label"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "drawtext.md"
  },
  {
    "title": "element",
    "description": "get pointer to an element of an array",
    "categories": [
      "object"
    ],
    "see_also": [
      "struct",
      "pointer",
      "getsize",
      "setsize",
      "plot"
    ],
    "pdcategory": "vanilla, Arrays and Tables",
    "last_update": "0.47",
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "set element index and output pointer"
        }
      ],
      "2nd": [
        {
          "type": "pointer",
          "description": "pointer to an array"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "pointer",
          "description": "pointer to element in an array"
        }
      ]
    },
    "arguments": [
      {
        "type": "symbol",
        "description": "template name"
      },
      {
        "type": "symbol",
        "description": "field name"
      }
    ],
    "methods": [
      {
        "type": "set <symbol, symbol>",
        "description": "set template and field name"
      }
    ],
    "draft": false,
    "content": "\"element\" takes a pointer at right and an index number at left. It looks up a field from the pointer, which should be an array, and outputs the element of the array specified by the index number. There are no pointers to arrays themselves, just to individual elements. The template and field name are specified as creation arguments.\n\nIndices range from 0 to the number of elements minus one;\nindices out of range are quietly replaced by the nearest endpoint.\n\nIf you don't know the template name you may specify \"-\", in which case the object will figure out the template name itself, at some possible cost in efficiency and clarity.",
    "filename": "element.md"
  },
  {
    "title": "==",
    "description": "equal-to Boolean",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Logic",
    "see_also": [
      "+~",
      "expr",
      "sin",
      "log"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/relational-operators.md\" >}}",
    "filename": "eq.md"
  },
  {
    "title": "exp",
    "description": "exponential function",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "see_also": [
      "+~",
      "+",
      "div",
      "expr"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "input value"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "exp.md"
  },
  {
    "title": "expr",
    "description": "evaluation of control data expressions",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math, Logic",
    "last_update": "0.51-3",
    "see_also": [
      "+",
      ">",
      "sin",
      "+~",
      "block~",
      "value",
      "random",
      "array",
      "cos~",
      "wrap~",
      "abs~",
      "log~",
      "sqrt~",
      "pow~"
    ],
    "arguments": [
      {
        "description": "expression including operators, functions, inlet types, float and symbols",
        "type": "list"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "evaluate expression"
        },
        {
          "type": "float",
          "description": "if inlet type is '$f1' or '$i1'"
        },
        {
          "type": "symbol",
          "description": "if inlet type is '$s1' or '$i1'"
        }
      ],
      "nth": [
        {
          "type": "float",
          "description": "if inlet type is '$f#' or '$i#'"
        },
        {
          "type": "symbol",
          "description": "if inlet type is '$s#' or '$i#'"
        }
      ]
    },
    "outlets": {
      "nth": [
        {
          "type": "float",
          "description": "expression result"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/expr-family.md\" >}}",
    "filename": "expr.md"
  },
  {
    "title": "expr~",
    "description": "evaluation of audio signal expressions on a vector by vector basis",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math, Logic",
    "last_update": "0.51-3",
    "see_also": [
      "+",
      ">",
      "sin",
      "+~",
      "block~",
      "value",
      "random",
      "array",
      "cos~",
      "wrap~",
      "abs~",
      "log~",
      "sqrt~",
      "pow~"
    ],
    "arguments": [
      {
        "description": "expression including operators, functions, inlet types, float and symbols",
        "type": "list"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "input to '$v1'"
        }
      ],
      "nth": [
        {
          "type": "float",
          "description": "if inlet type is '$f#' or '$i#'"
        },
        {
          "type": "symbol",
          "description": "if inlet type is '$s#' or '$i#'"
        },
        {
          "type": "signal",
          "description": "if inlet type is '$v#'"
        }
      ]
    },
    "outlets": {
      "nth": [
        {
          "type": "signal",
          "description": "expression result"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/expr-family.md\" >}}",
    "filename": "expr~.md"
  },
  {
    "title": "exp~",
    "description": "exponential function",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math",
    "last_update": "0.47",
    "see_also": [
      "exp",
      "sqrt~",
      "pow~",
      "log~",
      "expr~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "input value to exp function"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "output of exp function"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "initial base value"
      }
    ],
    "draft": false,
    "content": "Exp~ raises the Euler number 'e' (about 2.718), to the power of the input signal.",
    "filename": "exp~.md"
  },
  {
    "title": "fexpr~",
    "description": "evaluation of audio signal expressions on a sample by sample basis",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math, Logic",
    "last_update": "0.51-3",
    "see_also": [
      "+",
      ">",
      "sin",
      "+~",
      "block~",
      "value",
      "random",
      "array",
      "cos~",
      "wrap~",
      "abs~",
      "log~",
      "sqrt~",
      "pow~"
    ],
    "arguments": [
      {
        "description": "expression including operators, functions, inlet types, float and symbols",
        "type": "list"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "input to '$x1'"
        }
      ],
      "nth": [
        {
          "type": "float",
          "description": "if inlet type is '$f#' or '$i#'"
        },
        {
          "type": "symbol",
          "description": "if inlet type is '$s#' or '$i#'"
        },
        {
          "type": "signal",
          "description": "if inlet type is '$x#'"
        }
      ]
    },
    "outlets": {
      "nth": [
        {
          "type": "signal",
          "description": "expression result"
        }
      ]
    },
    "methods": [
      {
        "type": "set <list>",
        "description": "set values for previous input/output values"
      },
      {
        "type": "stop/start",
        "description": "stop/start computation"
      },
      {
        "type": "clear <symbol>",
        "description": "clear input/output memory, optional symbol specifies a specific input (such as x1) or output (y1)"
      }
    ],
    "draft": false,
    "content": "{{< md_include \"objects/expr-family.md\" >}}",
    "filename": "fexpr~.md"
  },
  {
    "title": "fft~",
    "description": "forward complex FFT",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math, Analysis",
    "last_update": "0.33",
    "see_also": [
      "block~",
      "ifft~",
      "rfft~",
      "rifft~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "real part of signal to transform"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "imaginary part of signal to transform"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "real part of transformed signal"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "imaginary part of transformed signal"
        }
      ]
    },
    "draft": false,
    "content": "The FFT objects do Fourier analyses and resyntheses of incoming real or complex signals. Complex signals are handled as pairs of signals (real and imaginary part.) The analysis size is one block. You can use the block~ or switch~ objects to control block size.\n\nThe real FFT outputs N/2+1 real parts and N/2-1 imaginary parts. The other outputs are zero. At DC and at the Nyquist there is no imaginary part, but the second through Nth output is as a real and imaginary pair, which can be thought of as the cosine and sin component strengths.\n\nThere is no normalization, so that an FFT followed by an IFFT has a gain of N.\n\nSee the FFT examples (section \"I\" of audio examples) to see how to use these in practice.",
    "filename": "fft~.md"
  },
  {
    "title": "file copy",
    "description": "copy a file around",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.52",
    "see_also": [
      "text",
      "array",
      "list",
      "file",
      "file define",
      "file handle",
      "file mkdir",
      "file which",
      "file glob",
      "file stat",
      "file isfile",
      "file isdirectory",
      "file size",
      "file move",
      "file delete",
      "file split",
      "file join",
      "file splitext",
      "file splitname"
    ],
    "flags": [
      {
        "name": "-q",
        "description": "set quiet verbosity"
      },
      {
        "name": "-v",
        "description": "set loud verbosity"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "list",
          "description": "source and destination"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "source and destination on success"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "if an error occurs"
        }
      ]
    },
    "methods": [
      {
        "type": "verbose <float>",
        "description": "set verbosity on or off"
      }
    ],
    "draft": false,
    "content": "[file copy] duplicates the content of a file to a destination.",
    "filename": "file-copy.md"
  },
  {
    "title": "file define",
    "description": "share file handles",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.52",
    "see_also": [
      "text",
      "array",
      "list",
      "file",
      "file handle",
      "file mkdir",
      "file which",
      "file glob",
      "file stat",
      "file isfile",
      "file isdirectory",
      "file size",
      "file copy",
      "file move",
      "file delete",
      "file split",
      "file join",
      "file splitext",
      "file splitname"
    ],
    "arguments": [
      {
        "description": "declared file-handle name",
        "type": "symbol"
      }
    ],
    "draft": false,
    "content": "Sometimes it is easier to access the same file-handle from different parts of the patch (e.g. when reading and parsing a file), rather than going backwards and forwards with a single 'file handle' object.\n\nIn this case, you can use the 'file define' object to provide a file handle that can then be accessed by multiple 'file handle' objects.",
    "filename": "file-define.md"
  },
  {
    "title": "file delete",
    "description": "remove files and directories",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.52",
    "see_also": [
      "text",
      "array",
      "list",
      "file",
      "file define",
      "file handle",
      "file mkdir",
      "file which",
      "file glob",
      "file stat",
      "file isfile",
      "file isdirectory",
      "file size",
      "file copy",
      "file move",
      "file split",
      "file join",
      "file splitext",
      "file splitname"
    ],
    "flags": [
      {
        "name": "-q",
        "description": "set quiet verbosity"
      },
      {
        "name": "-v",
        "description": "set loud verbosity"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "file or directory to be deleted"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "the deleted path on success"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "if an error occurs"
        }
      ]
    },
    "methods": [
      {
        "type": "verbose <float>",
        "description": "set verbosity on or off"
      }
    ],
    "draft": false,
    "content": "NOTE: deleting destroys data. there is no confirmation dialog or anything of that kind.",
    "filename": "file-delete.md"
  },
  {
    "title": "file glob",
    "description": "find pathnames matching a pattern",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.52",
    "see_also": [
      "text",
      "array",
      "list",
      "file",
      "file define",
      "file handle",
      "file mkdir",
      "file which",
      "file stat",
      "file isfile",
      "file isdirectory",
      "file size",
      "file copy",
      "file move",
      "file delete",
      "file split",
      "file join",
      "file splitext",
      "file splitname"
    ],
    "flags": [
      {
        "name": "-q",
        "description": "set quiet verbosity"
      },
      {
        "name": "-v",
        "description": "set loud verbosity"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "pattern to be found"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "found files/directories as a path symbol and type (file <0>, directory <1>)"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "if nothing is found or an error occurs"
        }
      ]
    },
    "methods": [
      {
        "type": "verbose <float>",
        "description": "set verbosity on or off"
      }
    ],
    "draft": false,
    "content": "cross-platform notes on globbing:\n\n[file glob] attempts to unify the behaviour of wildcard matching on different platforms. as such, it does not support all features of a given pattern matching implementation (or only accidentally).\n\nthe following rules should help you to write patches that use platform independent globbing.\n\n- the pattern may contain the wildcards '*' (for any number of characters) and '?' (for a single character) in the last path component. no other wildcards are supported.\n\n- the behaviour of patterns that contain wildcards in a path component other than the last one is *undefined* (and platform dependent). DO NOT USE THIS.\n\n- patterns ending with '/' will ONLY match directories\n\n- patterns ending with anything else will match files AND directories\n\n- files/dirs starting with a \".\" only match if the matching pattern explicitly contains the leading dot.\n\n- the special files/dirs \".\" and \"..\" only match if requested explicitly, never with a wildcard pattern.",
    "filename": "file-glob.md"
  },
  {
    "title": "file handle",
    "description": "operate on file handles",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.52",
    "see_also": [
      "text",
      "array",
      "list",
      "file",
      "file define",
      "file mkdir",
      "file which",
      "file glob",
      "file stat",
      "file isfile",
      "file isdirectory",
      "file size",
      "file copy",
      "file move",
      "file delete",
      "file split",
      "file join",
      "file splitext",
      "file splitname"
    ],
    "flags": [
      {
        "name": "-q",
        "description": "set quiet verbosity"
      },
      {
        "name": "-v",
        "description": "set loud verbosity"
      },
      {
        "name": "-m",
        "description": "file creation mode (user/group/other permissions) in octal"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "read number of bytes"
        }
      ],
      "2nd": [
        {
          "type": "symbol",
          "description": "change the associated file-handle"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "data bytes"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "if file can't be opened, end of file is reached, or a read error occurred"
        },
        {
          "type": "seek <float>",
          "description": "seek output"
        }
      ]
    },
    "methods": [
      {
        "type": "open <symbol>",
        "description": "open a file"
      },
      {
        "type": "seek <list>",
        "description": "seek file"
      },
      {
        "type": "close",
        "description": "close file"
      },
      {
        "type": "verbose <float>",
        "description": "set verbosity on or off"
      },
      {
        "type": "creationmode <octal>",
        "description": "restrict permissions of the to-be-created file"
      }
    ],
    "draft": false,
    "content": "The data you read from or write to a file are lists of bytes, which appear in Pd as lists of numbers from 0 to 255 (using out-of-range numbers of symbols leads to undefined behaviour.) The 2nd inlet of the 'file handle' object is documented in the 'file define' subpatch.",
    "filename": "file-handle.md"
  },
  {
    "title": "file isdirectory",
    "description": "check if path is an existing directory",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.52",
    "see_also": [
      "text",
      "array",
      "list",
      "file",
      "file define",
      "file handle",
      "file mkdir",
      "file which",
      "file glob",
      "file stat",
      "file isfile",
      "file size",
      "file copy",
      "file move",
      "file delete",
      "file split",
      "file join",
      "file splitext",
      "file splitname"
    ],
    "flags": [
      {
        "name": "-q",
        "description": "set quiet verbosity"
      },
      {
        "name": "-v",
        "description": "set loud verbosity"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "file or directory name"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "true <1> of false <0>"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "if an error occurs"
        }
      ]
    },
    "methods": [
      {
        "type": "verbose <float>",
        "description": "set verbosity on or off"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "file-isdirectory.md"
  },
  {
    "title": "file isfile",
    "description": "check if path is an existing regular file",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.52",
    "see_also": [
      "text",
      "array",
      "list",
      "file",
      "file define",
      "file handle",
      "file mkdir",
      "file which",
      "file glob",
      "file stat",
      "file isdirectory",
      "file size",
      "file copy",
      "file move",
      "file delete",
      "file split",
      "file join",
      "file splitext",
      "file splitname"
    ],
    "flags": [
      {
        "name": "-q",
        "description": "set quiet verbosity"
      },
      {
        "name": "-v",
        "description": "set loud verbosity"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "file or directory name"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "true <1> of false <0>"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "if an error occurs"
        }
      ]
    },
    "methods": [
      {
        "type": "verbose <float>",
        "description": "set verbosity on or off"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "file-isfile.md"
  },
  {
    "title": "file join",
    "description": "'join' a list of components using '/' as the separator",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.52",
    "see_also": [
      "text",
      "array",
      "list",
      "file",
      "file define",
      "file handle",
      "file mkdir",
      "file which",
      "file glob",
      "file stat",
      "file isfile",
      "file isdirectory",
      "file size",
      "file copy",
      "file move",
      "file delete",
      "file split",
      "file splitext",
      "file splitname"
    ],
    "inlets": {
      "1st": [
        {
          "type": "list",
          "description": "list of components to join"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "joined path or file"
        }
      ],
      "2nd": [
        {
          "type": null,
          "description": "inactive outlet!"
        }
      ]
    },
    "draft": false,
    "content": "This objects perform common string operations on filenames. no checks are performed verifying the validity/existence of any path-component.\n\n'file join' object accepts both symbols and numbers.",
    "filename": "file-join.md"
  },
  {
    "title": "file mkdir",
    "description": "create directories",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.52",
    "see_also": [
      "text",
      "array",
      "list",
      "file",
      "file define",
      "file handle",
      "file which",
      "file glob",
      "file stat",
      "file isfile",
      "file isdirectory",
      "file size",
      "file copy",
      "file move",
      "file delete",
      "file split",
      "file join",
      "file splitext",
      "file splitname"
    ],
    "flags": [
      {
        "name": "-q",
        "description": "set quiet verbosity"
      },
      {
        "name": "-v",
        "description": "set loud verbosity"
      },
      {
        "name": "-m",
        "description": "file creation mode (user/group/other permissions) in octal"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "directory to be created"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "created directory on success"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "when there's an error creating the directory"
        }
      ]
    },
    "methods": [
      {
        "type": "verbose <float>",
        "description": "set verbosity on or off"
      },
      {
        "type": "creationmode <octal>",
        "description": "restrict permissions of file to be created"
      }
    ],
    "draft": false,
    "content": "This ensures that a given directory exists by creating it\n\nparent directories are created as needed.\n\nit is not an error, if the requested directory already exists (and is a directory).",
    "filename": "file-mkdir.md"
  },
  {
    "title": "file move",
    "description": "move a file to a new destination",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.52",
    "see_also": [
      "text",
      "array",
      "list",
      "file",
      "file define",
      "file handle",
      "file mkdir",
      "file which",
      "file glob",
      "file stat",
      "file isfile",
      "file isdirectory",
      "file size",
      "file copy",
      "file delete",
      "file split",
      "file join",
      "file splitext",
      "file splitname"
    ],
    "flags": [
      {
        "name": "-q",
        "description": "set quiet verbosity"
      },
      {
        "name": "-v",
        "description": "set loud verbosity"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "list",
          "description": "source and destination"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "source and destination on success"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "if an error occurs"
        }
      ]
    },
    "methods": [
      {
        "type": "verbose <float>",
        "description": "set verbosity on or off"
      }
    ],
    "draft": false,
    "content": "[file move] moves (renames) files",
    "filename": "file-move.md"
  },
  {
    "title": "file size",
    "description": "get size of a file",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.52",
    "see_also": [
      "text",
      "array",
      "list",
      "file",
      "file define",
      "file handle",
      "file mkdir",
      "file which",
      "file glob",
      "file stat",
      "file isfile",
      "file isdirectory",
      "file copy",
      "file move",
      "file delete",
      "file split",
      "file join",
      "file splitext",
      "file splitname"
    ],
    "flags": [
      {
        "name": "-q",
        "description": "set quiet verbosity"
      },
      {
        "name": "-v",
        "description": "set loud verbosity"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "file or directory name"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "file size in bytes (0 for directories)"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "if an error occurs"
        }
      ]
    },
    "methods": [
      {
        "type": "verbose <float>",
        "description": "set verbosity on or off"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "file-size.md"
  },
  {
    "title": "file split",
    "description": "'split' path into components",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.52",
    "see_also": [
      "text",
      "array",
      "list",
      "file",
      "file define",
      "file handle",
      "file mkdir",
      "file which",
      "file glob",
      "file stat",
      "file isfile",
      "file isdirectory",
      "file size",
      "file copy",
      "file move",
      "file delete",
      "file join",
      "file splitext",
      "file splitname"
    ],
    "inlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "file or directory name to split"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "list of split components"
        }
      ],
      "2nd": [
        {
          "type": "symbol/bang",
          "description": "'/' if inputs ends with '/' or bang otherwise"
        }
      ]
    },
    "draft": false,
    "content": "This objects perform common string operations on filenames. no checks are performed verifying the validity/existence of any path-component.\n\nNOTE: 'file split' will always output (lists of) symbols, even if the component looks like a number. on one hand this makes it harder to [route], but on the other hand this will keep zero-padded numbers intact (think \"2020/01/01/0042.wav\").",
    "filename": "file-split.md"
  },
  {
    "title": "file splitext",
    "description": "separates directory+file and extension",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.52",
    "see_also": [
      "text",
      "array",
      "list",
      "file",
      "file define",
      "file handle",
      "file mkdir",
      "file which",
      "file glob",
      "file stat",
      "file isfile",
      "file isdirectory",
      "file size",
      "file copy",
      "file move",
      "file delete",
      "file split",
      "file join",
      "file splitname"
    ],
    "inlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "file name"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "the separated directory and file components"
        }
      ],
      "2nd": [
        {
          "type": "symbol",
          "description": "path if no extension is found"
        }
      ]
    },
    "draft": false,
    "content": "'splitext' separates the directory+file component from the extension of the given path, and outputs a list with both on the 1st outlet.\n\nIf no extension is found, the path is sent to the 2nd outlet.\n\nAn extension is a non-empty string after the last '.' in the filename-component of the path.\n\nNOTE: the 'file split*' objects will always output (lists of) symbols, even if the component looks like a number. on one hand this makes it harder to [route], but on the other hand this will keep zero-padded numbers intact (think \"2020/01/01/0042.wav\").",
    "filename": "file-splitext.md"
  },
  {
    "title": "file splitname",
    "description": "separates directory an file components",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.52",
    "see_also": [
      "text",
      "array",
      "list",
      "file",
      "file define",
      "file handle",
      "file mkdir",
      "file which",
      "file glob",
      "file stat",
      "file isfile",
      "file isdirectory",
      "file size",
      "file copy",
      "file move",
      "file delete",
      "file split",
      "file join",
      "file splitext"
    ],
    "inlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "file name"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "the separated directory and file components"
        }
      ],
      "2nd": [
        {
          "type": "symbol",
          "description": "file component if no directory component is found"
        }
      ]
    },
    "draft": false,
    "content": "This object perform common string operations on filenames. no checks are performed verifying the validity/existence of any path-component.\n\nThis object perform common string operations on filenames. no checks are performed verifying the validity/existence of any path-component.\n\n'splitname' separates the directory component from the file component of the path, and outputs a list with both on the 1st outlet.\n\nIf no directory component can be found, the path is sent to the 2nd outlet.\n\nA trailing slash is removed.\n\nThe filename is the non-empty string after the last path-separator\n\nNOTE: the 'file split*' objects will always output (lists of) symbols, even if the component looks like a number. on one hand this makes it harder to [route], but on the other hand this will keep zero-padded numbers intact (think \"2020/01/01/0042.wav\").",
    "filename": "file-splitname.md"
  },
  {
    "title": "file stat",
    "description": "get metainformation about a file/directory",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.52",
    "see_also": [
      "text",
      "array",
      "list",
      "file",
      "file define",
      "file handle",
      "file mkdir",
      "file which",
      "file glob",
      "file isfile",
      "file isdirectory",
      "file size",
      "file copy",
      "file move",
      "file delete",
      "file split",
      "file join",
      "file splitext",
      "file splitname"
    ],
    "flags": [
      {
        "name": "-q",
        "description": "set quiet verbosity"
      },
      {
        "name": "-v",
        "description": "set loud verbosity"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "file or directory name"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "anything",
          "description": "several messages for metainformation"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "if an error occurs"
        }
      ]
    },
    "methods": [
      {
        "type": "verbose <float>",
        "description": "set verbosity on or off"
      }
    ],
    "draft": false,
    "content": "[file stat] queries the filesystem about the given path, and outputs the collected data as a number of routable messages.",
    "filename": "file-stat.md"
  },
  {
    "title": "file which",
    "description": "locate a file",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.52",
    "see_also": [
      "text",
      "array",
      "list",
      "file",
      "file define",
      "file handle",
      "file mkdir",
      "file glob",
      "file stat",
      "file isfile",
      "file isdirectory",
      "file size",
      "file copy",
      "file move",
      "file delete",
      "file split",
      "file join",
      "file splitext",
      "file splitname"
    ],
    "flags": [
      {
        "name": "-q",
        "description": "set quiet verbosity"
      },
      {
        "name": "-v",
        "description": "set loud verbosity"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "file to locate using Pd's search-paths"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "symbol path of located file and directory flag"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "when there's an error creating the directory"
        }
      ]
    },
    "methods": [
      {
        "type": "verbose <float>",
        "description": "set verbosity on or off"
      }
    ],
    "draft": false,
    "content": "[file which] tries to locate the file in using Pd's search-paths and returns the resolved path.\n\nnotes:\n\n- currently this only works for files, not for directories!\n\n- currently only the first match is returned",
    "filename": "file-which.md"
  },
  {
    "title": "file",
    "description": "low-level file operations",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.52",
    "see_also": [
      "text",
      "array",
      "list",
      "file handle",
      "file define",
      "file mkdir",
      "file which",
      "file glob",
      "file stat",
      "file isfile",
      "file isdirectory",
      "file size",
      "file copy",
      "file move",
      "file delete",
      "file split",
      "file join",
      "file splitext",
      "file splitname"
    ],
    "arguments": [
      {
        "description": "sets the function of [file], possible values: handle, define, mkdir, which, glob, stat, isfile, isdirectory, size, copy, move, delete, split, join, splitext and splitname. The default value is 'handle'",
        "type": "symbol"
      }
    ],
    "draft": false,
    "content": "Short for \"file handle\"",
    "filename": "file.md"
  },
  {
    "title": "filledcurve",
    "description": "draw shapes for data structures",
    "categories": [
      "object"
    ],
    "see_also": [
      "struct",
      "drawtext",
      "plot",
      "set",
      "text"
    ],
    "pdcategory": "vanilla, Data Structures",
    "last_update": "0.51",
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "sets visibility (1 = visible, 0 = invisible)"
        }
      ]
    },
    "flags": [
      {
        "name": "-n",
        "description": "makes it invisible initially"
      },
      {
        "name": "-v <symbol>",
        "description": "assigns a field to make it visible/invisible"
      },
      {
        "name": "-xr",
        "description": "disable mouse actions when in \"run\" mode"
      },
      {
        "name": "-xe",
        "description": "disable mouse actions when in \"edit\" mode"
      },
      {
        "name": "-x",
        "description": "set both \"-xr\" and \"-xe\", disabling all mouse actions"
      },
      {
        "name": "-xv",
        "description": "disable dragging vertices when in \"run\" mode (keeps reporting mouse clicks)"
      }
    ],
    "arguments": [
      {
        "type": "float",
        "description": "line color, filled shapes have an extra first interior color",
        "default": "0, 0"
      },
      {
        "type": "float",
        "description": "line width",
        "default": 1
      },
      {
        "type": "list",
        "description": "(x, y) pairs giving coordinates of each vertex"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "filledcurve.md"
  },
  {
    "title": "filledpolygon",
    "description": "draw shapes for data structures",
    "categories": [
      "object"
    ],
    "see_also": [
      "struct",
      "drawtext",
      "plot",
      "set",
      "text"
    ],
    "pdcategory": "vanilla, Data Structures",
    "last_update": "0.51",
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "sets visibility (1 = visible, 0 = invisible)"
        }
      ]
    },
    "flags": [
      {
        "name": "-n",
        "description": "makes it invisible initially"
      },
      {
        "name": "-v <symbol>",
        "description": "assigns a field to make it visible/invisible"
      },
      {
        "name": "-xr",
        "description": "disable mouse actions when in \"run\" mode"
      },
      {
        "name": "-xe",
        "description": "disable mouse actions when in \"edit\" mode"
      },
      {
        "name": "-x",
        "description": "set both \"-xr\" and \"-xe\", disabling all mouse actions"
      },
      {
        "name": "-xv",
        "description": "disable dragging vertices when in \"run\" mode (keeps reporting mouse clicks)"
      }
    ],
    "arguments": [
      {
        "type": "float",
        "description": "line color, filled shapes have an extra first interior color",
        "default": "0, 0"
      },
      {
        "type": "float",
        "description": "line width",
        "default": 1
      },
      {
        "type": "list",
        "description": "(x, y) pairs giving coordinates of each vertex"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "filledpolygon.md"
  },
  {
    "title": "float, f",
    "description": "store and recall a number",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "last_update": "0.48",
    "see_also": [
      "int",
      "value",
      "send",
      "symbol"
    ],
    "arguments": [
      {
        "description": "initially stored value",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "output the stored value"
        },
        {
          "type": "float",
          "description": "store and output the value"
        },
        {
          "type": "list",
          "description": "if first element is a float, stores and outputs it"
        },
        {
          "type": "symbol",
          "description": "symbols that look like a float are converted, stored and output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "store the value (no output)"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the stored value"
        }
      ]
    },
    "methods": [
      {
        "type": "send <symbol>",
        "description": "send the stored value to a [receive] or [value] object that has the same name as the symbol (no output)"
      }
    ],
    "draft": false,
    "content": "store a (floating point) number.",
    "filename": "float.md"
  },
  {
    "title": "framp~",
    "description": "estimate frequency and amplitude of FFT",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math, Analysis",
    "last_update": "0.47",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "real part of FFT"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "imaginary part of FFT"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "estimated frequency of bin"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "estimated amplitude of bin"
        }
      ]
    },
    "draft": false,
    "content": "Framp~ takes as input a rectangular-windowed FFT and outputs, for each FFT channel, the estimated amplitude and frequency of any component feeding that channel. A sinusoidal component should appear in four components (or three in the special case of a sinusoid exactly tuned to a bin.) Frequency output is in bins, i.e., units of SR/N.\n\nThe estimation is done according to the hop-1 trick described in Puckette&Brown, Accuracy of Frequency Estimates Using the Phase Vocoder, using a Hann window. A more sophisticated version of this technique is used in the sigmund~ object.",
    "filename": "framp~.md"
  },
  {
    "title": "ftom",
    "description": "frequency to MIDI conversion",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Converters, Tuning, MIDI",
    "last_update": "0.40",
    "see_also": [
      "mtof~",
      "expr"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "incoming value to be converted"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "converted value"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/acoustic-conversions.md\" >}}",
    "filename": "ftom.md"
  },
  {
    "title": "ftom~",
    "description": "frequency to MIDI conversion for signals",
    "categories": [
      "object"
    ],
    "see_also": [
      "mtof",
      "expr~"
    ],
    "pdcategory": "vanilla, Converters, MIDI, Tuning",
    "last_update": "0.33",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "incoming value to be converted"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "converted value"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/acoustic-conversions-for-audio-signals.md\" >}}",
    "filename": "ftom~.md"
  },
  {
    "title": "fudiformat",
    "description": "FUDI messages to and from Pd lists",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Networking",
    "last_update": "0.48",
    "see_also": [
      "fudiparse",
      "oscformat"
    ],
    "flags": [
      {
        "name": "-u",
        "description": "switches to \"UDP\" mode"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "anything",
          "description": "any message to convert to a FUDI packet"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "converted FUDI packet"
        }
      ]
    },
    "bref": "FUDI messages to and from Pd lists",
    "draft": false,
    "content": "FUDI stands for \"Fast Universal Digital Interface\" and is a networking protocol used by Pd. The fudiformat object makes FUDI messages suitable for sending over the network via netsend (in UDP mode). Incoming messages are output as FUDI messages, byte by byte. The '-u' creation argument switches to \"UDP\" mode, omitting the packet separator. This saves some two bytes, but only works when sending single FUDI messages over UDP. It doesn't work with TCP/IP (however, you can use the default format even with UDP transport).",
    "filename": "fudiformat.md"
  },
  {
    "title": "fudiparse",
    "description": "FUDI messages to and from Pd lists",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Networking",
    "last_update": "0.48",
    "see_also": [
      "fudiformat",
      "oscformat"
    ],
    "inlets": {
      "1st": [
        {
          "type": "list",
          "description": "FUDI packet to convert to Pd messages"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "anything",
          "description": "Pd messages"
        }
      ]
    },
    "draft": false,
    "content": "The fudiparse object takes incoming lists of numbers, interpreting them as the bytes in a FUDI message (as received when sending Pd-messages via [netreceive -b]).",
    "filename": "fudiparse.md"
  },
  {
    "title": "garray",
    "description": "graphical array (messages received via array name)",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Arrays and Tables",
    "last_update": "0.52",
    "see_also": [
      "inlet",
      "namecanvas",
      "array"
    ],
    "methods": [
      {
        "description": "sets values into array, first element is starting index (from 0)",
        "method": "list"
      },
      {
        "description": "optional float sets a constant value to all indexes",
        "default": 0,
        "method": "const <float>"
      },
      {
        "description": "resizes the array",
        "method": "resize <float>"
      },
      {
        "description": "first element sets array size, remaining elements set amplitude of sine components",
        "method": "sinesum <list>"
      },
      {
        "description": "first element sets array size, remaining elements set amplitude of cosine components",
        "method": "cosinesum <list>"
      },
      {
        "description": "prints array information (name, type, size"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "garray.md"
  },
  {
    "title": ">=",
    "description": "greater-than-or-equal Boolean",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Logic",
    "see_also": [
      "+~",
      "expr",
      "sin",
      "log"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/relational-operators.md\" >}}",
    "filename": "ge.md"
  },
  {
    "title": "get",
    "description": "get values from a scalar",
    "categories": [
      "object"
    ],
    "see_also": [
      "pointer",
      "set",
      "append",
      "getsize",
      "setsize",
      "element",
      "struct"
    ],
    "pdcategory": "vanilla, Data Structures",
    "last_update": "0.47",
    "inlets": {
      "1st": [
        {
          "type": "pointer",
          "description": "pointer to a data structure scalar"
        }
      ]
    },
    "outlets": {
      "nth": [
        {
          "type": "float/symbol",
          "description": "field value"
        }
      ]
    },
    "arguments": [
      {
        "type": "symbol",
        "description": "template name"
      },
      {
        "type": "list",
        "description": "one or more field names (defines number of outlets)"
      }
    ],
    "methods": [
      {
        "type": "set <symbol, symbol>",
        "description": "set template and field name (if none or just one argument is given)"
      }
    ],
    "draft": false,
    "content": "\"Get\", when sent a pointer to a scalar, retrieves fields from it by name. The fields can be floats or symbols.\n\nIf you have data whose template is variable (from a heterogeneous list, for example) you can use the template \"-\" as a wild card. In Pd 0.47 and earlier, there is no penalty for this, but future versions may run faster with pre-specified templates than with \"-\" (by looking up the variable names in advance).",
    "filename": "get.md"
  },
  {
    "title": "getsize",
    "description": "get size of a data structures array",
    "categories": [
      "object"
    ],
    "see_also": [
      "struct",
      "pointer",
      "element",
      "setsize",
      "array get"
    ],
    "pdcategory": "vanilla, Data Structures",
    "last_update": "0.47",
    "inlets": {
      "1st": [
        {
          "type": "pointer",
          "description": "pointer to a scalar with an array field"
        },
        {
          "type": "set <symbol, symbol>",
          "description": "set template and field name"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "array's size"
        }
      ]
    },
    "arguments": [
      {
        "type": "symbol",
        "description": "template name"
      },
      {
        "type": "symbol",
        "description": "field name"
      }
    ],
    "draft": false,
    "content": "When sent a pointer of a scalar, \"getsize\" looks up a field, which should be an array, and outputs the number of elements of the array. The template and field name are specified as creation arguments. The smallest possible size is one.\n\nIf you don't know the template name you may specify \"-\", in which case the object will figure out the template name itself, at some possible cost in efficiency and clarity.",
    "filename": "getsize.md"
  },
  {
    "title": "graph",
    "description": "subpatch that you can see inside of",
    "categories": [
      "object"
    ],
    "pdcategory": "UI",
    "draft": false,
    "content": "",
    "filename": "graph.md"
  },
  {
    "title": ">",
    "description": "greater-than Boolean",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Logic",
    "see_also": [
      "+~",
      "expr",
      "sin",
      "log"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/relational-operators.md\" >}}",
    "filename": "gt.md"
  },
  {
    "title": "hilbert~",
    "description": "Hilbert transform",
    "categories": [
      "object"
    ],
    "see_also": [
      "complex-mod~"
    ],
    "pdcategory": "vanilla, Analysis, Effects",
    "last_update": "0.52",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "signal input"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "clear filter's state"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "real part of transformed signal"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "imaginary part of transformed signal"
        }
      ]
    },
    "draft": false,
    "content": "The Hilbert transform (the name is abused here according to computer music tradition) puts out a phase quadrature version of the input signal suitable for signal sideband modulation via complex-mod~.",
    "filename": "hilbert~.md"
  },
  {
    "title": "ifft~",
    "description": "inverse complex FFT",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math, Analysis",
    "last_update": "0.33",
    "see_also": [
      "block~",
      "fft~",
      "rfft~",
      "rifft~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "real part of signal to transform"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "imaginary part of signal to transform"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "real part of transformed signal"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "imaginary part of transformed signal"
        }
      ]
    },
    "draft": false,
    "content": "The FFT objects do Fourier analyses and resyntheses of incoming real or complex signals. Complex signals are handled as pairs of signals (real and imaginary part.) The analysis size is one block. You can use the block~ or switch~ objects to control block size.\n\nThe real FFT outputs N/2+1 real parts and N/2-1 imaginary parts. The other outputs are zero. At DC and at the Nyquist there is no imaginary part, but the second through Nth output is as a real and imaginary pair, which can be thought of as the cosine and sin component strengths.\n\nThere is no normalization, so that an FFT followed by an IFFT has a gain of N.\n\nSee the FFT examples (section \"I\" of audio examples) to see how to use these in practice.",
    "filename": "ifft~.md"
  },
  {
    "title": "inlet",
    "description": "control inlet",
    "categories": [
      "object"
    ],
    "see_also": [
      "inlet~",
      "outlet",
      "outlet~",
      "block~",
      "pd"
    ],
    "pdcategory": "vanilla, UI, Mixing and Routing",
    "last_update": "0.51",
    "outlets": {
      "1st": [
        {
          "type": "anything",
          "description": "any message from parent patch"
        }
      ]
    },
    "draft": false,
    "content": "Inlets/outlets are used to receive and get information on a patch window. This can be an abstraction or a subpatch.",
    "filename": "inlet.md"
  },
  {
    "title": "inlet~",
    "description": "audio inlet",
    "categories": [
      "object"
    ],
    "see_also": [
      "outlet",
      "inlet",
      "outlet~",
      "block~",
      "pd"
    ],
    "pdcategory": "vanilla, UI, Mixing and Routing, Audio I/O",
    "last_update": "0.51",
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "set default value for no signal connected"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "signal from parent patch"
        }
      ],
      "2nd": [
        {
          "type": "anything",
          "description": "any message from parent patch or inlet"
        }
      ]
    },
    "arguments": [
      {
        "type": "symbol",
        "description": "set upsampling method. 'hold' for sample/hold, 'pad' for zero-padded, and 'lin' for linear interpolation",
        "default": "hold"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "inlet~.md"
  },
  {
    "title": "int, i",
    "description": "truncate floats and store an integer",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "last_update": "0.48",
    "see_also": [
      "float",
      "value",
      "send"
    ],
    "arguments": [
      {
        "description": "initially stored value",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "output the stored value"
        },
        {
          "type": "float",
          "description": "store and output truncated value"
        },
        {
          "type": "list",
          "description": "if first element is float, stores and outputs it"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "store the value, non-integers are truncated (no output)"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the stored integer value"
        }
      ]
    },
    "methods": [
      {
        "type": "send <symbol>",
        "description": "send the stored value to a [receive] or [value] object that has the same name as the symbol (no output)"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "int.md"
  },
  {
    "title": "key",
    "description": "grab keyboard input",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, UI",
    "last_update": "0.32",
    "see_also": [
      "keyup",
      "keyname"
    ],
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "key number when pressed"
        }
      ]
    },
    "draft": false,
    "content": "Key and keyup report the (system dependent) numbers of \"printing\" keys of the keyboard. Key outputs when the keyboard key is pressed while keyup outputs it when you release the key. Check your system's preferences for 'autorepeat' as it affects the output of these objects.\n\nCaveat -- this only works if Pd actually gets the key events which can depend on the stacking order of windows and/or the pointer location, depending on the system.",
    "filename": "key.md"
  },
  {
    "title": "keyname",
    "description": "grab keyboard input",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, UI",
    "last_update": "0.32",
    "see_also": [
      "key",
      "keyname"
    ],
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "1 when key is pressed and 0 when released"
        }
      ],
      "2nd": [
        {
          "type": "symbol",
          "description": "key name"
        }
      ]
    },
    "draft": false,
    "content": "keyname gives the symbolic name of the key on the right outlet, with a 1 or 0 in the left outlet if it's up or down, and works with non-printing keys like shift or \"F1\".\n\nCaveat -- this only works if Pd actually gets the key events which can depend on the stacking order of windows and/or the pointer location, depending on the system.",
    "filename": "keyname.md"
  },
  {
    "title": "keyup",
    "description": "grab keyboard input",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, UI",
    "last_update": "0.32",
    "see_also": [
      "key",
      "keyname"
    ],
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "key number when released"
        }
      ]
    },
    "draft": false,
    "content": "Key and keyup report the (system dependent) numbers of \"printing\" keys of the keyboard. Key outputs when the keyboard key is pressed while keyup outputs it when you release the key. Check your system's preferences for 'autorepeat' as it affects the output of these objects.\n\nCaveat -- this only works if Pd actually gets the key events which can depend on the stacking order of windows and/or the pointer location, depending on the system.",
    "filename": "keyup.md"
  },
  {
    "title": "<=",
    "description": "less-than-or-equal Boolean",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Logic",
    "see_also": [
      "+~",
      "expr",
      "sin",
      "log"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/relational-operators.md\" >}}",
    "filename": "le.md"
  },
  {
    "title": "line",
    "description": "send a series of linearly stepped numbers",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Triggers and Clocks",
    "last_update": "0.48",
    "see_also": [
      "line~",
      "vline~"
    ],
    "arguments": [
      {
        "description": "initial ramp value",
        "default": 0,
        "type": "float"
      },
      {
        "description": "time grain in ms",
        "default": "20 ms",
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "set target value and start ramp"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set next ramp time (cleared when ramp starts)"
        }
      ],
      "3rd": [
        {
          "type": "float",
          "description": "sets time grain in ms"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "ramp values"
        }
      ]
    },
    "methods": [
      {
        "type": "set <float>",
        "description": "set initial ramp value"
      },
      {
        "type": "stop",
        "description": "stop the ramp"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "line.md"
  },
  {
    "title": "line~",
    "description": "audio ramp generator",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Generators, Envelopes and LFOs",
    "last_update": "0.33",
    "see_also": [
      "line",
      "vline~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "set target value and start ramp"
        },
        {
          "type": "stop",
          "description": "stop the ramp"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set next ramp time (cleared when ramp starts)"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "ramp values"
        }
      ]
    },
    "draft": false,
    "content": "The line~ object generates linear ramps whose levels and timing are determined by messages you send it. A list of two floats distributes the value over the inlets, as usual in Pd. Note that the right inlet (that sets the ramp time in milliseconds) does not remember old values (unlike every other inlet in Pd). Thus, if you don't priorly specify a time in the right inlet and sent line~ a float, it jumps immediately to the target value.",
    "filename": "line~.md"
  },
  {
    "title": "list append",
    "description": "manipulate lists",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "see_also": [
      "list",
      "list prepend",
      "list store",
      "list split",
      "list trim",
      "list length",
      "list fromsymbol",
      "list tosymbol"
    ],
    "arguments": [
      {
        "description": "initialize the list to append",
        "default": "empty",
        "type": "list"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "anything",
          "description": "set messages to concatenate to a second list and output (a bang is a zero element list)"
        }
      ],
      "2nd": [
        {
          "type": "anything",
          "description": "set messages to append to the first list (a bang is a zero element list and clears it)"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "the concatenated list"
        }
      ]
    },
    "draft": false,
    "content": "append a second list to the first",
    "filename": "list-append.md"
  },
  {
    "title": "list fromsymbol",
    "description": "manipulate lists",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "see_also": [
      "list",
      "list append",
      "list prepend",
      "list store",
      "list split",
      "list trim",
      "list length",
      "list tosymbol"
    ],
    "inlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "symbol to be converted to a list of character codes"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "list of converted character codes"
        }
      ]
    },
    "draft": false,
    "content": "Convert from symbols to lists of numeric character codes\n\n`[list fromsymbol]` and `[list tosymbol]` allow you to do string manipulations (such as scanning a filename for '/' characters). They convert a list of numbers (which might be ASCII or might be unicode if, for example, they represent a filename on a non-ASCII machine) to or from a symbol.",
    "filename": "list-fromsymbol.md"
  },
  {
    "title": "list length",
    "description": "manipulate lists",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "see_also": [
      "list",
      "list append",
      "list prepend",
      "list store",
      "list split",
      "list trim",
      "list fromsymbol",
      "list tosymbol"
    ],
    "inlets": {
      "1st": [
        {
          "type": "anything",
          "description": "messages to have its elements counted"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "list length"
        }
      ]
    },
    "draft": false,
    "content": "Number of items in list.\n\nThe \"list length\" object outputs the number of arguments in a list or other message.",
    "filename": "list-length.md"
  },
  {
    "title": "list prepend",
    "description": "manipulate lists",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "see_also": [
      "list",
      "list append",
      "list store",
      "list split",
      "list trim",
      "list length",
      "list fromsymbol",
      "list tosymbol"
    ],
    "arguments": [
      {
        "description": "initialize the list to prepend",
        "default": "empty",
        "type": "list"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "anything",
          "description": "set messages to be prepended by a second list and output (a bang is a zero element list)"
        }
      ],
      "2nd": [
        {
          "type": "anything",
          "description": "set messages to prepend to the first list (a bang is a zero element list and clears it)"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "the prepended list"
        }
      ]
    },
    "draft": false,
    "content": "prepend a second list to the first",
    "filename": "list-prepend.md"
  },
  {
    "title": "list split",
    "description": "manipulate lists",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "see_also": [
      "list",
      "list append",
      "list prepend",
      "list store",
      "list trim",
      "list length",
      "list fromsymbol",
      "list tosymbol"
    ],
    "arguments": [
      {
        "description": "initialize split point",
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "anything",
          "description": "messages to be split into smaller lists"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "sets new 'n' split point"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "the first 'n' elements of the list"
        }
      ],
      "2nd": [
        {
          "type": "list",
          "description": "the remaining portion of the list"
        }
      ],
      "3rd": [
        {
          "type": "list",
          "description": "if incoming list is shorter than n"
        }
      ]
    },
    "draft": false,
    "content": "Cut a list into smaller ones.\n\nThe \"list split\" object takes lists and outputs the first \"n\" items (left outlet) and the remaining ones (middle outlet). If the incoming list also has 'n' items, the middle outlet spits a list with zero elements (which becomes a bang). The two outputs appear in the usual right-to-left order. In case there are fewer than \"n\" items in the list, it is output (in its entirety) from the third outlet instead. The creation argument or the inlet sets the split point.",
    "filename": "list-split.md"
  },
  {
    "title": "list store",
    "description": "manipulate lists",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "see_also": [
      "list",
      "list append",
      "list prepend",
      "list split",
      "list trim",
      "list length",
      "list fromsymbol",
      "list tosymbol"
    ],
    "arguments": [
      {
        "description": "initialize the stored list",
        "default": "empty",
        "type": "list"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "list",
          "description": "concatenate incoming list with stored list and output (a bang is a zero element list and outputs stored list)"
        }
      ],
      "2nd": [
        {
          "type": "anything",
          "description": "set stored list (a bang is a zero element list and clears it)"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "the stored list at bangs, the concatenated list at list input or sublists via 'get' message"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "when get message fails"
        }
      ]
    },
    "methods": [
      {
        "type": "prepend <list>",
        "description": "prepend a list to the stored list"
      },
      {
        "type": "append <list>",
        "description": "append a list to the stored list"
      },
      {
        "type": "get <list>",
        "description": "output an item (if only one float is given) or sublist, where first element sets staring index and the second sets ending index (-1 is end of the list)"
      },
      {
        "type": "set <list>",
        "description": "set values starting at index from the first element"
      },
      {
        "type": "insert <list>",
        "description": "insert values before index from the first element"
      },
      {
        "type": "delete <list>",
        "description": "delete a given item for just one float or a number of items specified in the second element starting at index from the first element (-1 means delete all items from given index)"
      },
      {
        "type": "send <symbol>",
        "description": "send stored list to a named receiver"
      }
    ],
    "draft": false,
    "content": "put together or break apart a list to/from sublists",
    "filename": "list-store.md"
  },
  {
    "title": "list tosymbol",
    "description": "manipulate lists",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "see_also": [
      "list",
      "list append",
      "list prepend",
      "list store",
      "list split",
      "list trim",
      "list length",
      "list fromsymbol"
    ],
    "inlets": {
      "1st": [
        {
          "type": "list",
          "description": "list of character codes to convert to a symbol"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "converted symbol from list of character codes"
        }
      ]
    },
    "draft": false,
    "content": "Convert from list of numeric character codes to symbols.\n\n`[list fromsymbol]` and `[list tosymbol]` allow you to do string manipulations (such as scanning a filename for '/' characters). They convert a list of numbers (which might be ASCII or might be unicode if, for example, they represent a filename on a non-ASCII machine) to or from a symbol.",
    "filename": "list-tosymbol.md"
  },
  {
    "title": "list trim",
    "description": "manipulate lists",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "see_also": [
      "list",
      "list append",
      "list prepend",
      "list store",
      "list split",
      "list length",
      "list fromsymbol",
      "list tosymbol"
    ],
    "inlets": {
      "1st": [
        {
          "type": "list",
          "description": "list messages to be trimmed"
        },
        {
          "type": "symbol",
          "description": "the symbol selector is also trimmed"
        },
        {
          "type": "anything",
          "description": "any other messages are output intact"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "anything",
          "description": "trimmed list"
        }
      ]
    },
    "draft": false,
    "content": "Remove list selector.\n\nThe \"list trim\" object inputs lists (or makes lists out of incoming non-list messages) and outputs a message whose selector is the first item of the list, and whose arguments, if any, are the remainder of the list. If the list has no items, or if its first item is numeric, the selector is \"list\" (which might print out as list, float, or bang.)",
    "filename": "list-trim.md"
  },
  {
    "title": "list",
    "description": "manipulate lists",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "see_also": [
      "list append",
      "list prepend",
      "list store",
      "list split",
      "list trim",
      "list length",
      "list fromsymbol",
      "list tosymbol"
    ],
    "arguments": [
      {
        "description": "sets the function of [list], possible values: append, prepend, store, split, trim, length, fromsymbol and tosymbol. The default value is 'append'",
        "type": "symbol"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "anything",
          "description": "set messages to concatenate to a second list and output (a bang is a zero element list)"
        }
      ],
      "2nd": [
        {
          "type": "anything",
          "description": "set messages to append to the first list (a bang is a zero element list and clears it)"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "the concatenated list"
        }
      ]
    },
    "draft": false,
    "content": "Short for \"list append\"",
    "filename": "list.md"
  },
  {
    "title": "loadbang",
    "description": "bang on load",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Triggers and Clocks",
    "last_update": "0.47",
    "see_also": [
      "bang"
    ],
    "outlets": {
      "1st": [
        {
          "type": "bang",
          "description": "when loading the patch"
        }
      ]
    },
    "draft": false,
    "content": "The loadbang object outputs a 'bang' message when the containing patch is opened as a document or included in another patch as an abstraction.\n\nLoadbangs within abstractions send their \"bang\" messages before those of loadbangs in the calling patch. Otherwise, the order in which the \"bangs\" are sent from two loadbang objects is undefined.\n\nYou can force loadbangs to fire if you send a 'loadbang' message to the patch (see 'pd-messages').",
    "filename": "loadbang.md"
  },
  {
    "title": "log",
    "description": "logarithmic function",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "see_also": [
      "+~",
      "+",
      "div",
      "expr"
    ],
    "arguments": [
      {
        "description": "initial base value",
        "default": "e",
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set input value and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set base value"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "As in the signal version log~, log takes a base value via an argument or the right inlet, but it defaults to [e](https://en.wikipedia.org/wiki/E_(mathematical_constant",
    "filename": "log.md"
  },
  {
    "title": "log~",
    "description": "logarithmic function for signals",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math",
    "last_update": "0.42",
    "see_also": [
      "pow",
      "sqrt~",
      "exp~",
      "log",
      "expr~",
      "+~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "input value to log function"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "set base value of the log function"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "output of log function"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "initial base value",
        "default": "e"
      }
    ],
    "draft": false,
    "content": "computes the logarithm of the left inlet, to the base 'e' (about 2.718), or to another base specified by the inlet or a creation argument.",
    "filename": "log~.md"
  },
  {
    "title": "loop~",
    "description": "phase generator for looping samplers",
    "categories": [
      "object"
    ],
    "see_also": [
      "tabread4~"
    ],
    "pdcategory": "vanilla, Signal Generators, Envelopes and LFOs",
    "last_update": "0.52",
    "inlets": {
      "1st": [
        {
          "type": "float/signal",
          "description": "transposition value"
        }
      ],
      "2nd": [
        {
          "type": "float/signal",
          "description": "window size in samples"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "phase output from 0 to 1"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "sampled window size"
        }
      ]
    },
    "draft": false,
    "content": "loop~ takes input signals to set transposition and window size, and outputs a phase and a sampled window size. The window size only changes at phase zero crossings and the phase output is adjusted so that changing window size doesn't change the transposition.\n\nYou can send \"bang\" or \"set\" message to force the phase to zero--you should mute the output before doing so. This may be desirable if you've set a large window size but then want to decrease it without waiting for the next phase crossing.",
    "filename": "loop~.md"
  },
  {
    "title": "lop~",
    "description": "one-pole lowpass filter",
    "categories": [
      "object"
    ],
    "see_also": [
      "hip~",
      "bp~",
      "vcf~",
      "bob~",
      "biquad~",
      "slop~",
      "cpole~",
      "fexpr~"
    ],
    "pdcategory": "vanilla, Filters",
    "last_update": "0.38",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "audio signal to be filtered"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "rolloff frequency"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "filtered signal"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "rolloff frequency in Hz",
        "default": 0
      }
    ],
    "methods": [
      {
        "type": "clear",
        "description": "clear filter's memory"
      }
    ],
    "draft": false,
    "content": "lop~ is a one-pole lowpass filter with a specified rolloff frequency. The left inlet is the incoming audio signal. The right inlet is the cutoff frequency in Hz.",
    "filename": "lop~.md"
  },
  {
    "title": "lrshift~",
    "description": "shift signal vector elements left or right",
    "categories": [
      "object"
    ],
    "see_also": [
      "tabread4~"
    ],
    "pdcategory": "vanilla, Signal Math, Effects",
    "last_update": "0.31",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "input signal vector to shift"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "shifted signal vector"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "shift amount, positive or negative",
        "default": 0
      }
    ],
    "draft": false,
    "content": "Acting at whatever vector size the window is running at, lrshift~ shifts samples to the left (toward the beginning sample",
    "filename": "lrshift~.md"
  },
  {
    "title": "<<",
    "description": "left signed bit shift",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Logic",
    "see_also": [
      "+~",
      "expr",
      "sin",
      "log"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "lshift.md"
  },
  {
    "title": "<",
    "description": "less-than Boolean",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Logic",
    "see_also": [
      "+~",
      "expr",
      "sin",
      "log"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/relational-operators.md\" >}}",
    "filename": "lt.md"
  },
  {
    "title": "makefilename",
    "description": "format a symbol with a variable field",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management, File Management",
    "arguments": [
      {
        "description": "format string with specifiers (%c,  %d, %i, %e, %E, %f, %g, %G, %o, %s, %u, %x, %X, and %p)",
        "type": "symbol"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float/symbol",
          "description": "to replace format specifiers"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "formatted symbol"
        }
      ]
    },
    "methods": [
      {
        "type": "set <string>",
        "description": "message replaces format"
      }
    ],
    "draft": false,
    "content": "The Makefilename object generates name symbols according to a format string,  for use as a series of filenames,  table names,  or whatnot. You can plug in a variable number or symbol by using different types in the string (\"such as %s\",  \"%c\",  \"%d\",  \"%X and others). Each object can have only one variable pattern,  but you can cascade objects for multiple substitutions.\n\n----------------------\n\n### Possible printf pattern types.\n\n- `%c` - character\n\n  - This pattern allows you to convert from a float to a character (symbols are converted to 0) and insert it into a symbol.\n\n- `%d` or `%i` - signed decimal integer\n\n  - Both '%d' and '%i' are the same. This pattern allows you to insert a signed (negative or positive) decimal integer into a symbol (symbols are converted to 0). Floats are truncated.\n\n- `%e` or `%E` - decimal floating point in scientific notation\n\n  - This pattern allows you to insert a number with scientific notation into a symbol (symbols are converted to 0). The '%e' or '%E' pattern specify respectively whether the exponential character is lower (e) or upper (E) case.\n\n- `%f` - decimal floating point\n\n  - This pattern allows you to format a float into a symbol (symbols are converted to 0).\n\n- `%g` or `%G` - numbers with or without scientific notation\n\n  - This pattern allows you to insert a number with or without scientific notation into a symbol (symbols are converted to 0). The '%g' or '%G' pattern specify respectively whether the exponential character is lower (e) or upper (E) case. The scientific notation is only used if there's not enough digit resolution. The default precision is 6 digits and we'll see how to change that later.\n\n  - Also, the decimal point is not included on whole numbers. This means that, unlike '%e' or '%E', not at all numbers are converted to scientific notation.\n\n- `%o` - unsigned octal\n\n  - This pattern allows you to insert an unsigned (only positive) octal integer into a symbol (symbols are converted to 0). Floats are truncated. Note that since this is an unsigned format, sending negative numbers doesn't work.\n\n- `%s` - string\n\n  - This pattern allows you to insert a symbol, but note it also works for float messages.\n\n- `%u` - signed decimal integer\n\n  - This pattern allows you to insert a symbol, but note it also works for float messages.\n\n- `%x` or `%X` - unsigned hexadecimal\n\n  - This pattern allows you to insert a signed (only positive) hexadecimal integer into a symbol (symbols are converted to 0). Floats are trunctaed. The '%x' or '%X' pattern specify respectively whether the the characters are lower or upper case. Note that since this is an unsigned format, sending negative numbers doesn't work.\n\n- `%p` - pointer representation\n\n  - This pattern formats to a platform specific pointer representation of an incoming symbol (floats are cast to int and also converted).\n\n--------------------\n\n### Flags.\n\nThe `+` flag prepends a plus sign for positive signed numeric types (%d/%i/%e/%E/%f/%g/%G):\n\n````\n\n[127 \\\n|\n[makefilename %+d]\n|\n[+127 \\\n\n````\n\nThe `#` flag presents an alternate form of some numeric types. For \"%o\", the number is preceded by a \"0\". For \"%x\" and \"%X\", the number is preceded by \"0x\" (if %x) or \"0X\" (if %X). For %g and %G, the decimal point and zeroes are not removed for integers when not in scientific notation.\n\n````\n\n[1 \\\n|\n[makefilename %#o]\n|\n[01 \\\n\n````\n\n\n----------------\n\n### Precision.\n\nThe precision field behaves differently according to the type (strings, integers of floats). The syntax of this field is specified by a `.` and is followed by the precision number.\n\n````\n\n[-18 \\\n|\n[makefilename %.2f]\n|\n[-18.00 \\\n\n````\n\nFor symbol strings (%s), the precision sets a maximum character limit. Below, we have a maximum of 4 characters, hence, the symbol \"abcde\" gets truncated.\n\nFor integer types ('%d'/'%i'/'%o'/'%u'/'%x'/'%X'/'%p'), the precision field does not set a maximum number of characters. Instead, it sets a fixed number of digits and adds zeros to the left as a fill. This is slightly different than setting a width field with a '0' flag. The difference is only observed for numbers of different sign as below. Note how the width field will suppress a zero to include a \"-\" character.\n\nFor floats, the precision field sets the maximum number of digits to the right of the decimal point. Note that there's a default of 6 digits. Also note that this affects the resolution and can cause the number to be rounded.\n\n----------------",
    "filename": "makefilename.md"
  },
  {
    "title": "makenote",
    "description": "send note-on and schedule note-off messages",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.33",
    "see_also": [
      "stripnote"
    ],
    "arguments": [
      {
        "description": "initial velocity value",
        "default": 0,
        "type": "float"
      },
      {
        "description": "initial duration value",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI pitch"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI velocity"
        }
      ],
      "3rd": [
        {
          "type": "float",
          "description": "MIDI note duration in ms"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI pitch"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI velocity"
        }
      ]
    },
    "methods": [
      {
        "type": "clear",
        "description": "clear memory"
      },
      {
        "type": "stop",
        "description": "flush hanging note on messages"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "makenote.md"
  },
  {
    "title": "max",
    "description": "maximum of 2 numbers",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "last_update": "0.47",
    "see_also": [
      "+~",
      "div",
      ">",
      "&&",
      "sin",
      "log",
      "expr"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "max.md"
  },
  {
    "title": "max~",
    "description": "binary operators on audio signals",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math",
    "last_update": "0.27",
    "see_also": [
      "+",
      "cos~",
      "wrap~",
      "abs~",
      "log~",
      "sqrt~",
      "pow~",
      "expr~"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet and makes it only take floats",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float/signal",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "This object combine two signals as above, or, if you give a numeric argument, the right inlet only takes floats (no signals",
    "filename": "max~.md"
  },
  {
    "title": "metro",
    "description": "send a message periodically",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Triggers and Clocks",
    "see_also": [
      "delay",
      "text sequence",
      "timer"
    ],
    "arguments": [
      {
        "description": "initial metronome time",
        "default": 1,
        "type": "float"
      },
      {
        "description": "tempo value",
        "default": 1,
        "type": "float"
      },
      {
        "description": "time unit",
        "default": "msec",
        "type": "symbol"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "start the metronome"
        },
        {
          "type": "float",
          "description": "non-0 starts and zero stops the metronome"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set metronome time for the next tempo"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "bang",
          "description": "bang at periodic time"
        }
      ]
    },
    "methods": [
      {
        "type": "stop",
        "description": "stop the metronome"
      },
      {
        "type": "tempo <float, symbol>",
        "description": "set tempo value and time unit"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "metro.md"
  },
  {
    "title": "midiin",
    "description": "MIDI input",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.48-2",
    "see_also": [
      "notein",
      "noteout"
    ],
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "raw MIDI byte by byte (except real-time messages)"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI channel/port"
        }
      ]
    },
    "bref": "MIDI input",
    "draft": false,
    "content": "",
    "filename": "midiin.md"
  },
  {
    "title": "midiout",
    "description": "MIDI output",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.48-2",
    "see_also": [
      "notein",
      "noteout"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "raw MIDI byte by byte"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI channel/port"
        }
      ]
    },
    "bref": "MIDI output",
    "draft": false,
    "content": "",
    "filename": "midiout.md"
  },
  {
    "title": "midirealtimein",
    "description": "MIDI input",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.48-2",
    "see_also": [
      "notein",
      "noteout"
    ],
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI real-time messages"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI channel/port"
        }
      ]
    },
    "bref": "MIDI input",
    "draft": false,
    "content": "",
    "filename": "midirealtimein.md"
  },
  {
    "title": "min",
    "description": "minimum of two numbers",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "last_update": "0.47",
    "see_also": [
      "+~",
      "div",
      ">",
      "&&",
      "sin",
      "log",
      "expr"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "min.md"
  },
  {
    "title": "-",
    "description": "subtract two numbers",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "last_update": "0.47",
    "see_also": [
      "+~",
      "div",
      ">",
      "&&",
      "sin",
      "log",
      "expr"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "minus.md"
  },
  {
    "title": "-~",
    "description": "subtract two signals",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math",
    "last_update": "0.27",
    "see_also": [
      "+",
      "cos~",
      "wrap~",
      "abs~",
      "log~",
      "sqrt~",
      "pow~",
      "expr~"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet and makes it only take floats",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float/signal",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "This object combine two signals as above, or, if you give a numeric argument, the right inlet only takes floats (no signals",
    "filename": "minus~.md"
  },
  {
    "title": "min~",
    "description": "binary operators on audio signals",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math",
    "last_update": "0.27",
    "see_also": [
      "+",
      "cos~",
      "wrap~",
      "abs~",
      "log~",
      "sqrt~",
      "pow~",
      "expr~"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet and makes it only take floats",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float/signal",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "This object combine two signals as above, or, if you give a numeric argument, the right inlet only takes floats (no signals",
    "filename": "min~.md"
  },
  {
    "title": "mod",
    "description": "divide two numbers, output remainder",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "see_also": [
      "+~",
      "+",
      "div",
      "expr"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "div and mod do integer division, where div outputs the integer quotient and mod outputs the remainder (modulus",
    "filename": "mod.md"
  },
  {
    "title": "moses",
    "description": "part a numeric stream",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "last_update": "0.33",
    "see_also": [
      "change",
      "select"
    ],
    "arguments": [
      {
        "description": "set initial control value",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "number to be parted"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set control value"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "input number if less than control value"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "input number if equal or higher than control value"
        }
      ]
    },
    "draft": false,
    "content": "Moses takes numbers and outputs them at left if they're less than a control value,  and at right if they're greater or equal to it.",
    "filename": "moses.md"
  },
  {
    "title": "mtof",
    "description": "MIDI to frequency conversion",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Converters, Tuning, MIDI",
    "last_update": "0.40",
    "see_also": [
      "mtof~",
      "expr"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "incoming value to be converted"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "converted value"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/acoustic-conversions.md\" >}}",
    "filename": "mtof.md"
  },
  {
    "title": "mtof~",
    "description": "MIDI to frequency conversion for signals",
    "categories": [
      "object"
    ],
    "see_also": [
      "mtof",
      "expr~"
    ],
    "pdcategory": "vanilla, Converters, Tuning, MIDI",
    "last_update": "0.33",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "incoming value to be converted"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "converted value"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/acoustic-conversions-for-audio-signals.md\" >}}",
    "filename": "mtof~.md"
  },
  {
    "title": "*",
    "description": "multiply two numbers",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "last_update": "0.47",
    "see_also": [
      "+~",
      "div",
      ">",
      "&&",
      "sin",
      "log",
      "expr"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "mul.md"
  },
  {
    "title": "*~",
    "description": "multiply two signals",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math",
    "last_update": "0.27",
    "see_also": [
      "+",
      "cos~",
      "wrap~",
      "abs~",
      "log~",
      "sqrt~",
      "pow~",
      "expr~"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet and makes it only take floats",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float/signal",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "This object combine two signals as above, or, if you give a numeric argument, the right inlet only takes floats (no signals",
    "filename": "mul~.md"
  },
  {
    "title": "namecanvas",
    "description": "attach the canvas window to a name",
    "categories": [
      "object"
    ],
    "see_also": {},
    "pdcategory": "vanilla, UI",
    "last_update": "0.52",
    "arguments": [
      {
        "type": "symbol",
        "description": "sets the canvas name"
      }
    ],
    "draft": false,
    "content": "You can use namecanvas to attach a receive name to a canvas (patch window) so you can send it messages (useful for 'dynamic patching').",
    "filename": "namecanvas.md"
  },
  {
    "title": "!=",
    "description": "not-equal-to Boolean",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Logic",
    "see_also": [
      "+~",
      "expr",
      "sin",
      "log"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/relational-operators.md\" >}}",
    "filename": "neq.md"
  },
  {
    "title": "netsend",
    "description": "send Pd messages over a network",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Networking",
    "last_update": "0.51",
    "see_also": [
      "netreceive"
    ],
    "flags": [
      {
        "name": "-u",
        "description": "sets UDP connection (default TCP)"
      },
      {
        "name": "-b",
        "description": "sets to binary mode (default FUDI)"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "list",
          "description": "works like 'send'"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "non-0 if connection is open, zero otherwise"
        }
      ],
      "2nd": [
        {
          "type": "anything",
          "description": "messages sent back from netreceive objects"
        }
      ]
    },
    "methods": [
      {
        "type": "connect <list>",
        "description": "sets host and port number, an additional port argument can be set for messages sent back from the receiver"
      },
      {
        "type": "disconnect",
        "description": "close the connection"
      },
      {
        "type": "timeout <float>",
        "description": "TCP connect timeout in ms (default 10000)"
      },
      {
        "type": "send <anything>",
        "description": "sends messages over the network"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "netsend.md"
  },
  {
    "title": "noise~",
    "description": "uniformly distributed white noise",
    "categories": [
      "object"
    ],
    "see_also": {},
    "pdcategory": "vanilla, Random and Noise, Signal Generators",
    "last_update": "0.48-2",
    "inlets": {
      "1st": [
        {
          "type": "seed <float>",
          "description": "set seed for random number generator"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "white noise signal (in the range from -1 to 1)"
        }
      ]
    },
    "draft": false,
    "content": "Noise~ is a random number generator that outputs white noise from a pseudo-random number generator at the audio rate (with output from -1 to 1).",
    "filename": "noise~.md"
  },
  {
    "title": "notein",
    "description": "MIDI input",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.48-2",
    "see_also": [
      "ctlin",
      "noteout"
    ],
    "arguments": [
      {
        "description": "MIDI channel/port",
        "type": "float"
      }
    ],
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI note number"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI velocity"
        }
      ],
      "3rd": [
        {
          "type": "float",
          "description": "MIDI channel/port"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "notein.md"
  },
  {
    "title": "noteout",
    "description": "MIDI output",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.48-2",
    "see_also": [
      "notein",
      "ctlout"
    ],
    "arguments": [
      {
        "description": "MIDI channel/port",
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI note number"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI velocity"
        }
      ],
      "3rd": [
        {
          "type": "float",
          "description": "MIDI channel/port"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "noteout.md"
  },
  {
    "title": "openpanel",
    "description": "query for files or directories",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.51",
    "see_also": [
      "savepanel",
      "pdcontrol"
    ],
    "arguments": [
      {
        "description": "mode: 0 (file, default), 1 (directory), 2 (multiple files)",
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "open dialog window to choose file(s) or directory"
        },
        {
          "type": "symbol",
          "description": "set starting directory and open dialog window"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "directory or file(s)' names"
        }
      ]
    },
    "draft": false,
    "content": "When openpanel gets a \"bang\", a file browser appears on the screen. By default, if you select a file, its name appears on the outlet\n\nA mode argument allow you to select a directory or multiple files.",
    "filename": "openpanel.md"
  },
  {
    "title": "|",
    "description": "bitwise OR",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Logic",
    "see_also": [
      "+~",
      "expr",
      "sin",
      "log"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/bitwise-operators.md\" >}}",
    "filename": "or.md"
  },
  {
    "title": "||",
    "description": "logical OR",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Logic",
    "see_also": [
      "+~",
      "expr",
      "sin",
      "log"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "oror.md"
  },
  {
    "title": "oscparse",
    "description": "OSC messages to and from Pd lists",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Networking",
    "last_update": "0.51.",
    "see_also": [
      "oscformat",
      "fudiformat",
      "netsend",
      "list"
    ],
    "inlets": {
      "1st": [
        {
          "type": "list",
          "description": "OSC packet to convert to Pd list messages"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "Pd list messages from OSC packets"
        }
      ]
    },
    "draft": false,
    "content": "Oscformat makes OSC (Open Sound Control) packets (byte by byte) suitable for sending over the network via netsend (in UDP binary mode). The OSC address (the strings between the slashes) are given by the creation arguments or by \"set\" messages. Oscparse takes lists of numbers interpreting them as the bytes in an OSC message and outputs a list containing, first, the symbols making up the address of the OSC packet, and following that, numbers and symbols as present in the OSC message.\n\nIf a format is given (via the '-f' flag or 'format' message) oscformat interprets incoming data as integer, float, string, or 'blob'. Blobs are given as an atom count followed by that number of elements. (If an elements is a symbol, its first byte is sent). If the count is negative, the entire remaining message is included in the blob (but the OSC parser will report the actual number of elements). If the elements aren't exhausted at the end of the format string, the default (float and symbol) conversions are made for the rest.\n\nNote: there's no way using oscparse to distinguish between floats and integers, nor to see blobs unambiguously. OSC messages may be combined in \"bundles\". If oscparse receives a bundle it simply parses all the messages in the bundle in the order they appear, and ignores the bundle's time tag.",
    "filename": "oscparse.md"
  },
  {
    "title": "outlet",
    "description": "control outlet",
    "categories": [
      "object"
    ],
    "see_also": [
      "inlet~",
      "inlet",
      "outlet~",
      "block~",
      "pd"
    ],
    "pdcategory": "vanilla, UI, Mixing and Routing",
    "last_update": "0.51",
    "inlets": {
      "1st": [
        {
          "type": "anything",
          "description": "any message to send to parent patch"
        }
      ]
    },
    "draft": false,
    "content": "Inlets/outlets are used to receive and get information on a patch window. This can be an abstraction or a subpatch.",
    "filename": "outlet.md"
  },
  {
    "title": "outlet~",
    "description": "audio outlet",
    "categories": [
      "object"
    ],
    "see_also": [
      "outlet",
      "inlet",
      "inlet~",
      "block~",
      "pd"
    ],
    "pdcategory": "vanilla, UI, Mixing and Routing, Audio I/O",
    "last_update": "0.51",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "signal to send to parent patch"
        }
      ]
    },
    "arguments": [
      {
        "type": "symbol",
        "description": "downsampling method. 'hold' for sample/hold, 'pad' for zero-padded and 'lin' for linear interpolation",
        "default": "hold"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "outlet~.md"
  },
  {
    "title": "output~",
    "description": "simple stereo output GUI abstraction",
    "categories": [
      "object"
    ],
    "see_also": [
      "dac~"
    ],
    "pdcategory": "vanilla, Audio I/O",
    "last_update": "0.52",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "left signal input"
        },
        {
          "type": "bang",
          "description": "mute/unmute"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "right signal input"
        }
      ]
    },
    "methods": [
      {
        "type": "level <float>",
        "description": "sets output level"
      }
    ],
    "draft": false,
    "content": "This is a very simple abstraction that is widely used in Pd's documentation (help files and examples). It is included here just for convenience.\n\nOutput~ takes a stereo signal and has GUI controls to set the volume gain and mute it. The number box sets the output gain in dB (from 0 to 100) and whenever you click on it to drag it, the DSP engine is turned on. The mute bang turns the volume off (sets to 0) but restores to the last setting when you click back on it to unmute.\n\nThe left inlet also takes a bang message to mute/unmute and a 'level' message to control the level output in dB.",
    "filename": "output~.md"
  },
  {
    "title": "page",
    "description": "alias for subpatch object",
    "categories": [
      "object"
    ],
    "pdcategory": "UI",
    "draft": false,
    "content": "",
    "filename": "page.md"
  },
  {
    "title": "pd",
    "description": "define a subpatch",
    "categories": [
      "object"
    ],
    "aliases": [
      "page"
    ],
    "see_also": [
      "inlet",
      "inlet~",
      "outlet",
      "outlet~",
      "namecanvas"
    ],
    "pdcategory": "vanilla, UI",
    "last_update": "0.52",
    "inlets": "n: depends on inlet/outlet objects",
    "outlets": "n: depends on inlet/outlet objects",
    "arguments": [
      {
        "type": "symbol",
        "description": "sets the subpatch name"
      }
    ],
    "draft": false,
    "content": "By typing \"pd\" into an object box, you create a subpatch. An optional argument sets the subpatch name.",
    "filename": "pd.md"
  },
  {
    "title": "pdcontrol",
    "description": "communicate with pd and/or this patch",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, UI, Networking",
    "last_update": "0.49",
    "inlets": {
      "1st": [
        {
          "type": "browse <symbol>",
          "description": "open a URL given by the symbol"
        },
        {
          "type": "dir <float, symbol>",
          "description": "output patch's directory. optional float and symbol set depth and file name"
        },
        {
          "type": "isvisible",
          "description": "outputs float to specify if patch is visible (1) or not (0)"
        },
        {
          "type": "args <float>",
          "description": "outputs patch's argument. optional float sets depth"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "list of args, dir symbol, or visibility float"
        }
      ]
    },
    "draft": false,
    "content": "pdcontrol lets you open a URL in a web browser or communicate with the patch to get its owning directory, arguments or its visible/invisible state.\n\nOptional argument to specify this patch (0), owning patch (1), its own owner (2), and so on, and optionally also a filename relative to the patch's directory. (Ownership number is silently reduced if owners don't exist, so here anything greater than zero is ignored.)",
    "filename": "pdcontrol.md"
  },
  {
    "title": "pd~",
    "description": "run a pd sub-process",
    "categories": [
      "object"
    ],
    "see_also": [
      "stdout"
    ],
    "pdcategory": "vanilla, UI",
    "last_update": "0.42",
    "inlets": {
      "1st": [
        {
          "type": "anything",
          "description": "first element names an object, rest is sent to that object in the sub-process"
        },
        {
          "type": "signal",
          "description": "signal input if there's a corresponding adc~ input"
        }
      ],
      "nth": [
        {
          "type": "signal",
          "description": "signal input if there's a corresponding adc~ input"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "anything",
          "description": "messages from sub-process sent via \"stdout\" objects"
        }
      ],
      "nth": [
        {
          "type": "signal",
          "description": "signal output if there's a corresponding dac~ output"
        }
      ]
    },
    "flags": [
      {
        "name": "-ninsig <float>",
        "description": "sets number of input audio channels",
        "default": 2
      },
      {
        "name": "-noutsig <float>",
        "description": "sets number of output audio channels",
        "default": 2
      },
      {
        "name": "-sr <float>",
        "description": "sets sample rate of subprocess",
        "default": "pd's current"
      },
      {
        "name": "-fifo <float>",
        "description": "sets number of blocks for round-trip",
        "default": 5
      },
      {
        "name": "-pddir <symbol>",
        "description": "sets Pd's directory (needed if different than default)"
      },
      {
        "name": "-scheddir <symbol>",
        "description": "sets scheduler's directory (also needed if different)"
      }
    ],
    "methods": [
      {
        "type": "pd~ start <anything>",
        "description": "start a new sub-process. This message takes startup flags and needs a pd file to open"
      },
      {
        "type": "pd~ stop",
        "description": "stops the pd sub-process"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "pd~.md"
  },
  {
    "title": "%",
    "description": "divide two numbers, output remainder - deprecated",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "see_also": [
      "+~",
      "expr",
      "sin",
      "log"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "div and mod do integer division, where div outputs the integer quotient and mod outputs the remainder (modulus",
    "filename": "percent.md"
  },
  {
    "title": "pgmin",
    "description": "MIDI input",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.48-2",
    "see_also": [
      "notein",
      "noteout"
    ],
    "arguments": [
      {
        "description": "MIDI channel/port",
        "type": "float"
      }
    ],
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI program value"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI channel/port"
        }
      ]
    },
    "draft": false,
    "content": "**Known bug:** Program change values in [pgmin] and [pgmout] are indexed from 1, which means that the possible values are from 1 to 128 (not 0 to 127)!",
    "filename": "pgmin.md"
  },
  {
    "title": "pgmout",
    "description": "MIDI output",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.48-2",
    "see_also": [
      "notein",
      "noteout"
    ],
    "arguments": [
      {
        "description": "MIDI channel/port",
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI program value"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI channel/port"
        }
      ]
    },
    "bref": "MIDI output",
    "draft": false,
    "content": "**Known bug:** Program change values in [pgmin] and [pgmout] are indexed from 1, which means that the possible values are from 1 to 128 (not 0 to 127)!",
    "filename": "pgmout.md"
  },
  {
    "title": "pipe",
    "description": "dynamically growable delay line for numbers",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Triggers and Clocks",
    "last_update": "0.33",
    "see_also": [
      "delay",
      "timer"
    ],
    "arguments": [
      {
        "description": "(optional) symbols sets number of inlets and type (f, s, p) and floats set float type and initial value",
        "type": "list",
        "default": "f"
      },
      {
        "description": "sets delay time in ms",
        "default": 0,
        "order": "last",
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "sends the last received data after the delay time"
        },
        {
          "type": "float/symbol/pointer",
          "description": "the type depends on the creation argument"
        }
      ],
      "nth": [
        {
          "type": "float/symbol/pointer",
          "description": "the type depends on the creation argument"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set the delay time in ms"
        }
      ]
    },
    "outlets": {
      "nth": [
        {
          "type": "float/symbol/pointer",
          "description": "the type depends on the creation argument"
        }
      ]
    },
    "methods": [
      {
        "type": "clear",
        "description": "forget all scheduled messages"
      },
      {
        "type": "flush",
        "description": "sends the scheduled messages immediately"
      }
    ],
    "draft": true,
    "content": "Message \"delay line\"\n\nThe [pipe] object stores a sequence of messages and outputs them after a specified delay time in milliseconds. The output is scheduled when storing the incoming message. Thus changing the delay time doesn't affect the messages that are already scheduled.\n\nYou can specify the data type with a first argument (which is a float by default",
    "filename": "pipe.md"
  },
  {
    "title": "pique",
    "description": "find peaks in an FFT spectrum",
    "categories": [
      "object"
    ],
    "see_also": [
      "sigmund~"
    ],
    "pdcategory": "vanilla, Analysis",
    "last_update": "0.31",
    "inlets": {
      "1st": [
        {
          "type": "list",
          "description": "number of FFT points, table name for real part, table name forimaginary part and maximum number of peaks to report"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "partial index, frequency in Hz, amplitude, cosine and sine components"
        }
      ]
    },
    "draft": false,
    "content": "NOTE: pique is obsolete! consider using [sigmund~]\n\npique takes unwindowed FFT analyses as input (they should be stored in arrays) and outputs a list of peaks, giving their peak number, frequency, amplitude, and phase (as a cosine/sine pair.)",
    "filename": "pique.md"
  },
  {
    "title": "plot",
    "description": "draw array elements of scalars",
    "categories": [
      "object"
    ],
    "see_also": [
      "drawnumber",
      "drawpolygon",
      "struct",
      "array",
      "element"
    ],
    "pdcategory": "vanilla, Data Structures",
    "last_update": "0.52",
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "sets visibility (1 = visible, 0 = invisible)"
        }
      ]
    },
    "flags": [
      {
        "name": "-c",
        "description": "sets to Bezier curve plot"
      },
      {
        "name": "-n",
        "description": "makes it invisible initially"
      },
      {
        "name": "-v <float/symbol>",
        "description": "constant of field name to make it visible/invisible"
      },
      {
        "name": "-vs <float/symbol>",
        "description": "constant of field name to scalars visible/invisible"
      },
      {
        "name": "-e <float/symbol",
        "description": "constant of field name to enable/disable mouse actions"
      },
      {
        "name": "-x <symbol>",
        "description": "sets a different field name for x"
      },
      {
        "name": "-y <symbol>",
        "description": "sets a different field name for y"
      },
      {
        "name": "-w <symbol>",
        "description": "sets a different field name for w"
      }
    ],
    "arguments": [
      {
        "type": "symbol",
        "description": "(optional) 'curve' sets to Bezier curve",
        "default": "polygon"
      },
      {
        "type": "symbol",
        "description": "array field name to plot"
      },
      {
        "type": "float",
        "description": "color",
        "default": 0
      },
      {
        "type": "float",
        "description": "line width",
        "default": 1
      },
      {
        "type": "list",
        "description": "relative x and y location",
        "default": "0 0"
      },
      {
        "type": "float",
        "description": "x spacing"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "plot.md"
  },
  {
    "title": "+",
    "description": "add two numbers",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "last_update": "0.47",
    "see_also": [
      "+~",
      "div",
      ">",
      "&&",
      "sin",
      "log",
      "expr"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "plus.md"
  },
  {
    "title": "+~",
    "description": "add two signals",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math",
    "last_update": "0.27",
    "see_also": [
      "+",
      "cos~",
      "wrap~",
      "abs~",
      "log~",
      "sqrt~",
      "pow~",
      "expr~"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet and makes it only take floats",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float/signal",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "This object combine two signals as above, or, if you give a numeric argument, the right inlet only takes floats (no signals",
    "filename": "plus~.md"
  },
  {
    "title": "pointer",
    "description": "point to an object belonging to a template",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Structures",
    "arguments": [
      {
        "type": "list",
        "description": "template names. templates create corresponding outlets plus an extra outlet for non matching templates. If no args are given, 2 outlets are created"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "output the current value"
        }
      ],
      "2nd": [
        {
          "type": "pointer",
          "description": "store the pointer value (no output)"
        }
      ]
    },
    "outlets": {
      "nth": [
        {
          "type": "pointer",
          "description": "pointers of matching templates"
        }
      ],
      "2nd": [
        {
          "type": "pointer",
          "description": "pointers for non matching templates"
        }
      ],
      "3rd": [
        {
          "type": "bang",
          "description": "when reaching the end of a list"
        }
      ]
    },
    "methods": [
      {
        "type": "traverse <symbol>",
        "description": "sets to the canvas' \"head\" of the list, the symbol needs to be in the format 'pd-canvasname'"
      },
      {
        "type": "next",
        "description": "move and output next pointer or \"bang\" to right outlet if we reach the end of the list"
      },
      {
        "type": "rewind",
        "description": "goes back to the head of the list and output its pointer (unless the end of list was reached)"
      },
      {
        "type": "vnext <float>",
        "description": "outputs the next object (if 0) or the next selected object (if 1) or \"bang\" to right outlet if we reach the end of the list"
      },
      {
        "type": "delete",
        "description": "delete the current object and output the next (or send a \"bang\" to the right outlet if it was the last one)"
      },
      {
        "type": "send <symbol>",
        "description": "send pointer to a receive name given by the symbol"
      },
      {
        "type": "send-window <any>",
        "description": "send any message to the canvas containing the scalar"
      },
      {
        "type": "equal <pointer>",
        "description": "compare an incoming pointer with the stored pointer"
      }
    ],
    "draft": true,
    "content": "",
    "filename": "pointer.md"
  },
  {
    "title": "poly",
    "description": "MIDI-style polyphonic voice allocator",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI, Triggers and Clocks",
    "last_update": "0.25",
    "see_also": [
      "makenote",
      "route"
    ],
    "arguments": [
      {
        "description": "number of voices",
        "default": 1,
        "type": "float"
      },
      {
        "description": "non-0 sets to voice stealing",
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI pitch value"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set velocity value"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the voice number"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "note pitch"
        }
      ],
      "3rd": [
        {
          "type": "float",
          "description": "note velocity"
        }
      ]
    },
    "methods": [
      {
        "type": "clear",
        "description": "clear memory"
      },
      {
        "type": "stop",
        "description": "flush hanging note on messages"
      }
    ],
    "draft": false,
    "content": "The poly object takes a stream of pitch/velocity pairs and outputs triples containing voice number, pitch and velocity. You can pack the output and use the route object to route messages among a bank of voices depending on the first outlet. Another option is to connect it [clone] so you can route to different copies. Poly can be configured to do voice stealing or not (the default.",
    "filename": "poly.md"
  },
  {
    "title": "polytouchin",
    "description": "MIDI input",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.48-2",
    "see_also": [
      "notein",
      "noteout"
    ],
    "arguments": [
      {
        "description": "channel/port",
        "type": "float"
      }
    ],
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI aftertouch value"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI note number"
        }
      ],
      "3rd": [
        {
          "type": "float",
          "description": "channel/port"
        }
      ]
    },
    "bref": "MIDI input",
    "draft": false,
    "content": "",
    "filename": "polytouchin.md"
  },
  {
    "title": "polytouchout",
    "description": "MIDI output",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.48-2",
    "see_also": [
      "notein",
      "noteout"
    ],
    "arguments": [
      {
        "description": "channel/port",
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI aftertouch value"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI note number"
        }
      ],
      "3rd": [
        {
          "type": "float",
          "description": "channel/port"
        }
      ]
    },
    "bref": "MIDI output",
    "draft": false,
    "content": "",
    "filename": "polytouchout.md"
  },
  {
    "title": "pow",
    "description": "math functions",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "see_also": [
      "+~",
      "+",
      "div",
      "expr"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "Pow raises a number on the left inlet to a numeric power (given by the right inlet or argument",
    "filename": "pow.md"
  },
  {
    "title": "powtodb",
    "description": "power units to dB",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Converters",
    "last_update": "0.40",
    "see_also": [
      "mtof~",
      "expr"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "incoming value to be converted"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "converted value"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/acoustic-conversions.md\" >}}",
    "filename": "powtodb.md"
  },
  {
    "title": "powtodb~",
    "description": "power units to dB",
    "categories": [
      "object"
    ],
    "see_also": [
      "mtof",
      "expr~"
    ],
    "pdcategory": "vanilla, Converters",
    "last_update": "0.33",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "incoming value to be converted"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "converted value"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/acoustic-conversions-for-audio-signals.md\" >}}",
    "filename": "powtodb~.md"
  },
  {
    "title": "pow~",
    "description": "power function for signals",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math",
    "last_update": "0.42",
    "see_also": [
      "pow",
      "sqrt~",
      "exp~",
      "log~",
      "expr~",
      "+~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "input value to power function"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "set numeric power to raise to"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "output of power function"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "initial numeric power"
      }
    ],
    "draft": false,
    "content": "pow~ raises a signal to a numeric power (given by another signal or argument/float). The inputs may be positive, zero, or negative.\n\nWARNING: it's easy to generate \"infinity\" by accident, and if you do, the DSP chain may dramatically slow down if you're using an i386 or ia64 processor. Out-of-range floating point values are thousands of times slower to compute with than in-range ones. There' a protection against NaNs (they become 0).",
    "filename": "pow~.md"
  },
  {
    "title": "print",
    "description": "print messages to terminal window",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Analysis, UI",
    "see_also": [
      "print~"
    ],
    "arguments": [
      {
        "description": "message to distinct one [print] from another",
        "type": "list"
      }
    ],
    "flags": [
      {
        "name": "-n",
        "description": "the default \"print:\" prefix is suppressed"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "anything",
          "description": "any message to print into the terminal window"
        }
      ]
    },
    "draft": false,
    "content": "Print prints out the messages it receives on the \"terminal window\" that Pd is run from. If no argument is given,  the message has a \"print:\" prefix. Any message as an argument is used as the prefix instead (so you can differentiate between different printouts).\n\nYou can also do command/control + click on the terminal window and the corresponding [print] object will be selected in your patch.",
    "filename": "print.md"
  },
  {
    "title": "print~",
    "description": "print out raw values of a signal",
    "categories": [
      "object"
    ],
    "see_also": [
      "print",
      "block~"
    ],
    "pdcategory": "vanilla, Analysis",
    "last_update": "0.33",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "signal block to print on terminal window"
        },
        {
          "type": "bang",
          "description": "print one block on terminal window"
        },
        {
          "type": "float",
          "description": "sets and prints number of blocks on terminal window"
        }
      ]
    },
    "arguments": [
      {
        "type": "symbol",
        "description": "symbol to distinct one [print~] from another"
      }
    ],
    "draft": false,
    "content": "The print~ object takes a signal input and prints one or more blocks (or 'vectors') out when you send it a bang or a number. By default a block is 64 samples.",
    "filename": "print~.md"
  },
  {
    "title": "q8_rsqrt~",
    "description": "signal reciprocal square root",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math",
    "last_update": "0.47",
    "see_also": [
      "rsqrt~",
      "sqrt",
      "expr~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "input to reciprocal square root function"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "output of reciprocal square root function"
        }
      ]
    },
    "draft": false,
    "content": "q8_rsqrt~, is included in Pd for back compatibility but should probably not be used. It only gives about 8 bit accuracy.\n\nUse [rsqrt~].",
    "filename": "q8_rsqrt~.md"
  },
  {
    "title": "q8_sqrt~",
    "description": "signal square root",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math",
    "last_update": "0.47",
    "see_also": [
      "sqrt~",
      "rsqrt~",
      "sqrt",
      "exp~",
      "expr~",
      "log~",
      "pow~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "input to square root function"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "output of square root function"
        }
      ]
    },
    "draft": false,
    "content": "q8_sqrt~ is included in Pd for back compatibility but should probably not be used. It only gives about 8 bit accuracy.\n\nUse [sqrt~].",
    "filename": "q8_sqrt~.md"
  },
  {
    "title": "qlist",
    "description": "text-based sequencer",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Triggers and Clocks",
    "last_update": "0.35",
    "see_also": [
      "textfile",
      "text sequence"
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "start sequence automatically"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "list of leading numbers for the next message"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "when reaching the end of sequence"
        }
      ]
    },
    "methods": [
      {
        "type": "tempo <float>",
        "description": "set relative tempo"
      },
      {
        "type": "rewind",
        "description": "go to beginning (and stop)"
      },
      {
        "type": "next <float>",
        "description": "single-step forward, optional float suppresses message sending"
      },
      {
        "type": "print",
        "description": "print contents to Pd window"
      },
      {
        "type": "clear",
        "description": "empty the qlist"
      },
      {
        "type": "add <anything>",
        "description": "add a message to a qlist"
      },
      {
        "type": "add2 <anything>",
        "description": "add a message to a qlist but don't terminate it"
      },
      {
        "type": "read <symbol>",
        "description": "read a file into qlist"
      },
      {
        "type": "write <symbol>",
        "description": "write contents to a file"
      }
    ],
    "draft": false,
    "content": "The qlist object reads text files containing time-tagged Pd messages. You can have them sequenced automatically (by sending a \"bang\" message, possibly changing speed via \"tempo\" messages) or manually via the \"rewind\" and \"next\" messages.\n\nTo run the qlist automatically, send it a \"read\" message (the filename is relative to the directory the patch is in) and later a \"bang.\" Messages in the file are separated by semicolons. Optional leading numbers are delay times in milliseconds. If the tempo is different from 1 the messages are sent faster or slower accordingly. Messages should start with a symbol giving the destination object. In the file \"qlist.q\" used here, the messages go to objects \"this\" and \"that\" which are receives below.\n\nTo run it manually, send \"rewind\" followed by \"next\". All messages not preceded by numbers are sent. As soon as a message starting with one or more numbers is encountered, the numbers are output as a list. There are many ways you could design a sequencer around this.\n\nYou can also record textual messages and save them to a file. Send \"clear\" to empty the qlist and \"add\" to add messages (terminated with semicolons.) The message, \"add2\" adds a list of atoms without finishing with a semicolon in case you want to make variable-length messages.",
    "filename": "qlist.md"
  },
  {
    "title": "random",
    "description": "pseudo random integers",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Random and Noise",
    "last_update": "0.33",
    "see_also": [
      "expr"
    ],
    "arguments": [
      {
        "description": "initial range value",
        "default": 1,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "generate a random integer number"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set the range"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the generated random number"
        }
      ]
    },
    "methods": [
      {
        "type": "seed <float>",
        "description": "set a seed value for repeatable random numbers"
      }
    ],
    "draft": false,
    "content": "Random outputs pseudo random integers from 0 to N-1 where N is the creation argument. You can specify a seed if you wish. Seeds are kept locally so that if two Randoms are seeded the same they will have the same output (or indeed you can seed the same one twice to repeat the output.",
    "filename": "random.md"
  },
  {
    "title": "readsf~",
    "description": "read a soundfile",
    "categories": [
      "object"
    ],
    "see_also": [
      "soundfiler",
      "writesf~"
    ],
    "pdcategory": "vanilla, File Management, Buffers",
    "last_update": "0.51",
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "non-0 starts playback, zero stops"
        },
        {
          "type": "print",
          "description": "prints information on Pd's terminal window"
        }
      ]
    },
    "outlets": {
      "nth": [
        {
          "type": "signal",
          "description": "channel output of a given file"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "when finishing playing file"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "sets number of output channels",
        "default": 1
      },
      {
        "type": "float",
        "description": "per channel buffer size in bytes"
      }
    ],
    "methods": [
      {
        "type": "open <list>",
        "description": "sets a filename, an onset in samples, header size to skip, number of channels, bytes per sample, and endianness"
      }
    ],
    "draft": false,
    "content": "The readsf~ object reads a soundfile into its signal outputs. You must open the soundfile in advance (a couple of seconds before you'll need it",
    "filename": "readsf~.md"
  },
  {
    "title": "realtime",
    "description": "measure real time",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Triggers and Clocks, Analysis",
    "last_update": "0.33",
    "see_also": [
      "timer",
      "cputime"
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "reset (set elapsed time to zero)"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "time to measure"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "bang",
          "description": "output elapsed time"
        }
      ]
    },
    "draft": false,
    "content": "Ask OS for elapsed real time.\n\nThe realtime object measures elapsed real time,  as measured by your operating system.",
    "filename": "realtime.md"
  },
  {
    "title": "receive, r",
    "description": "receive messages without patch cords",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, UI, Mixing and Routing",
    "last_update": "0.48",
    "see_also": [
      "send~",
      "send",
      "receive~",
      "samplerate~"
    ],
    "arguments": [
      {
        "description": "receive name symbol",
        "default": "empty symbol",
        "type": "symbol"
      }
    ],
    "outlets": {
      "1st": [
        {
          "type": "anything",
          "description": "outputs received messages"
        }
      ]
    },
    "draft": false,
    "content": "The [receive] object gets messages directly from [send] or other objects like [list store], [float], [int] and [value] via a `send` method.",
    "filename": "receive.md"
  },
  {
    "title": "receive~, r~",
    "description": "receive signal from a send~ object",
    "categories": [
      "object"
    ],
    "aliases": [
      "r~"
    ],
    "see_also": [
      "throw~",
      "send",
      "send~",
      "tabsend~"
    ],
    "pdcategory": "vanilla, UI, Mixing and Routing, Audio I/O",
    "last_update": "0.33",
    "inlets": {
      "1st": [
        {
          "type": "set <name>",
          "description": "set receive name"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "outputs signal from a matching send~ object"
        }
      ]
    },
    "arguments": [
      {
        "type": "symbol",
        "description": "receive name symbol",
        "default": "empty symbol"
      }
    ],
    "draft": false,
    "content": "A send~ object copies its input to a local buffer which all receive~ objects of the same name read from. They may be in different windows or even different patches. Any number of receives may be associated with one send~ but it is an error to have two send~s of the same name. Receive~ takes \"set\" messages to switch between send~s.\nMulti channel connections is supported.\nSend~/Receive~ only work for the default block size (64",
    "filename": "receive~.md"
  },
  {
    "title": "rev1~",
    "description": "simple 1-in, 1-out reverberator",
    "categories": [
      "object"
    ],
    "see_also": [
      "rev2~",
      "rev3~"
    ],
    "pdcategory": "vanilla, Effects",
    "last_update": "0.30",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "reverb input"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "dB after 1 second"
        }
      ],
      "3rd": [
        {
          "type": "bang",
          "description": "clear the reverb"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "reverb output"
        }
      ]
    },
    "draft": false,
    "content": "This is an experimental reverberator design composed of a series of allpass filters with exponentially growing delay times. Each allpass filter has a gain of 0.7. The reverb time is adjusted by adjusting the input gains of the allpass filters. The last unit is modified so that its first two \"echos\" mimic those of an allpass but its loop gain depends on reverb time.\n\nReverb time is controlled by specifying the dB gain (100 normal) after one second, so that 100 corresponds to infinite reverb time, 70 to two seconds, 40 to one second, and 0 to 0\n\nThe \"clear\" button impolitely clears out all the delay lines, You may immediately resume pumping the reverberator, but the input signal should be cleanly enveloped. The output, too, must be enveloped and may not be opened until 5 msec after the \"clear\" message is sent.\n\nThe rev1~ module eats about 18% of my 300mHz P2 machine.",
    "filename": "rev1~.md"
  },
  {
    "title": "rev2~",
    "description": "simple 1-in, 4-out reverberator",
    "categories": [
      "object"
    ],
    "see_also": [
      "rev1~",
      "rev3~"
    ],
    "pdcategory": "vanilla, Effects",
    "last_update": "0.37",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "reverb input"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "level in dB"
        }
      ],
      "3rd": [
        {
          "type": "float",
          "description": "liveness (internal feedback %)"
        }
      ],
      "4th": [
        {
          "type": "float",
          "description": "crossover frequency in Hz"
        }
      ],
      "5th": [
        {
          "type": "float",
          "description": "high frequency damping in %"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "first reverb output"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "second reverb output"
        }
      ],
      "3rd": [
        {
          "type": "signal",
          "description": "third reverb output"
        }
      ],
      "4th": [
        {
          "type": "signal",
          "description": "fourth reverb output"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "level in dB",
        "default": 0
      },
      {
        "type": "float",
        "description": "liveness / internal feedback %",
        "default": 0
      },
      {
        "type": "float",
        "description": "crossover frequency in Hz",
        "default": 3000
      },
      {
        "type": "float",
        "description": "high frequency damping in %",
        "default": 0
      }
    ],
    "draft": false,
    "content": "",
    "filename": "rev2~.md"
  },
  {
    "title": "rev3~",
    "description": "hard-core, 2-in, 4-out reverberator",
    "categories": [
      "object"
    ],
    "see_also": [
      "rev1~",
      "rev2~"
    ],
    "pdcategory": "vanilla, Effects",
    "last_update": "0.37.1",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "left channel reverb input"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "right channel reverb input"
        }
      ],
      "3rd": [
        {
          "type": "float",
          "description": "level in dB"
        }
      ],
      "4th": [
        {
          "type": "float",
          "description": "liveness (internal feedback %)"
        }
      ],
      "5th": [
        {
          "type": "float",
          "description": "crossover frequency in Hz"
        }
      ],
      "6th": [
        {
          "type": "float",
          "description": "high frequency damping in %"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "first reverb output"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "second reverb output"
        }
      ],
      "3rd": [
        {
          "type": "signal",
          "description": "third reverb output"
        }
      ],
      "4th": [
        {
          "type": "signal",
          "description": "fourth reverb output"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "level in dB",
        "default": 0
      },
      {
        "type": "float",
        "description": "liveness / internal feedback %",
        "default": 0
      },
      {
        "type": "float",
        "description": "crossover frequency in Hz",
        "default": 3000
      },
      {
        "type": "float",
        "description": "high frequency damping in %",
        "default": 0
      }
    ],
    "draft": false,
    "content": "",
    "filename": "rev3~.md"
  },
  {
    "title": "rfft~",
    "description": "forward real FFT",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math, Analysis",
    "last_update": "0.33",
    "see_also": [
      "block~",
      "fft~",
      "ifft~",
      "rifft~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "time domain real signal to transform"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "real part of frequency domain signal"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "imaginary part of frequency domain signal"
        }
      ]
    },
    "draft": false,
    "content": "The FFT objects do Fourier analyses and resyntheses of incoming real or complex signals. Complex signals are handled as pairs of signals (real and imaginary part.) The analysis size is one block. You can use the block~ or switch~ objects to control block size.\n\nThe real FFT outputs N/2+1 real parts and N/2-1 imaginary parts. The other outputs are zero. At DC and at the Nyquist there is no imaginary part, but the second through Nth output is as a real and imaginary pair, which can be thought of as the cosine and sin component strengths.\n\nThere is no normalization, so that an FFT followed by an IFFT has a gain of N.\n\nSee the FFT examples (section \"I\" of audio examples) to see how to use these in practice.",
    "filename": "rfft~.md"
  },
  {
    "title": "rifft~",
    "description": "inverse real FFT",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math, Analysis",
    "last_update": "0.33",
    "see_also": [
      "block~",
      "fft~",
      "ifft~",
      "rfft~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "real part of frequency domain signal"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "imaginary part of frequency domain signal"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "real part of frequency domain signal"
        }
      ]
    },
    "draft": false,
    "content": "The FFT objects do Fourier analyses and resyntheses of incoming real or complex signals. Complex signals are handled as pairs of signals (real and imaginary part.) The analysis size is one block. You can use the block~ or switch~ objects to control block size.\n\nThe real FFT outputs N/2+1 real parts and N/2-1 imaginary parts. The other outputs are zero. At DC and at the Nyquist there is no imaginary part, but the second through Nth output is as a real and imaginary pair, which can be thought of as the cosine and sin component strengths.\n\nThere is no normalization, so that an FFT followed by an IFFT has a gain of N.\n\nSee the FFT examples (section \"I\" of audio examples) to see how to use these in practice.",
    "filename": "rifft~.md"
  },
  {
    "title": "rmstodb",
    "description": "linear RMS amplitude to dB",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Converters",
    "last_update": "0.40",
    "see_also": [
      "mtof~",
      "expr"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "incoming value to be converted"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "converted value"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/acoustic-conversions.md\" >}}",
    "filename": "rmstodb.md"
  },
  {
    "title": "rmstodb~",
    "description": "linear RMS amplitude to dB",
    "categories": [
      "object"
    ],
    "see_also": [
      "mtof",
      "expr~"
    ],
    "pdcategory": "vanilla, Converters",
    "last_update": "0.33",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "incoming value to be converted"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "converted value"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/acoustic-conversions-for-audio-signals.md\" >}}",
    "filename": "rmstodb~.md"
  },
  {
    "title": "route",
    "description": "route messages according to first element",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Mixing and Routing",
    "last_update": "0.43",
    "see_also": [
      "select"
    ],
    "arguments": [
      {
        "description": "of floats or symbols to route to to",
        "default": 0,
        "type": "list"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "anything",
          "description": "message to route according to first element"
        }
      ],
      "2nd": [
        {
          "type": "float/symbol",
          "description": "updates argument"
        }
      ]
    },
    "outlets": {
      "nth": [
        {
          "type": "anything",
          "description": "routed message with $arg trimmed off"
        }
      ],
      "2nd": [
        {
          "type": "anything",
          "description": "when input doesn't match the arguments it's passed here"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "route.md"
  },
  {
    "title": ">>",
    "description": "right signed bit shift",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Logic",
    "see_also": [
      "+~",
      "expr",
      "sin",
      "log"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "{{< md_include \"objects/bitwise-operators.md\" >}}",
    "filename": "rshift.md"
  },
  {
    "title": "rsqrt~",
    "description": "signal reciprocal square root",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math",
    "last_update": "0.47",
    "aliases": [
      "q8_rsqrt~"
    ],
    "see_also": [
      "sqrt",
      "expr~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "input to reciprocal square root function"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "output of reciprocal square root function"
        }
      ]
    },
    "draft": false,
    "content": "rsqrt~ takes the approximate reciprocal square root of the incoming signal (the same as '1/sqrt(input) using a fast approximate algorithm which is probably accurate to about 120 dB (20 bits)\n\nAn older object, q8_rsqrt~, is included in Pd for back compatibility but should probably not be used. It only gives about 8 bit accuracy.",
    "filename": "rsqrt~.md"
  },
  {
    "title": "rzero_rev~",
    "description": "real one-zero \"reverse\" filter",
    "categories": [
      "object"
    ],
    "see_also": [
      "lop~",
      "hip~",
      "bp~",
      "vcf~",
      "bob~",
      "biquad~",
      "fexpr~",
      "slop~"
    ],
    "pdcategory": "vanilla, Filters",
    "last_update": "0.38",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "real signal to filter"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "filter coefficient"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "filtered signal"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "filter coefficient",
        "default": 0
      }
    ],
    "methods": [
      {
        "type": "set <float>",
        "description": "set internal state"
      },
      {
        "type": "clear",
        "description": "clear internal state to zero (same as \"set 0\")"
      }
    ],
    "draft": false,
    "content": "Rzero_rev~ filters an audio signal (left inlet",
    "filename": "rzero_rev~.md"
  },
  {
    "title": "rzero~",
    "description": "real one-zero filter",
    "categories": [
      "object"
    ],
    "see_also": [
      "lop~",
      "hip~",
      "bp~",
      "vcf~",
      "bob~",
      "biquad~",
      "fexpr~",
      "slop~"
    ],
    "pdcategory": "vanilla, Filters",
    "last_update": "0.38",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "real signal to filter"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "filter coefficient"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "filtered signal"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "filter coefficient",
        "default": 0
      }
    ],
    "methods": [
      {
        "type": "set <float>",
        "description": "set internal state"
      },
      {
        "type": "clear",
        "description": "clear internal state to zero (same as \"set 0\")"
      }
    ],
    "draft": false,
    "content": "Rzero~ filters an audio signal (left inlet",
    "filename": "rzero~.md"
  },
  {
    "title": "samplerate~",
    "description": "get sample rate",
    "categories": [
      "object"
    ],
    "see_also": [
      "block~",
      "receive"
    ],
    "pdcategory": "vanilla, Analysis, Audio I/O",
    "last_update": "0.47",
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "output current sample rate"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "sample rate value in Hz"
        }
      ]
    },
    "draft": false,
    "content": "When sent a 'bang' message, samplerate~ outputs the current audio sample rate. If called within a subwindow that is up- or down-sampled, the sample rate of signals within that subwindow are reported.",
    "filename": "samplerate~.md"
  },
  {
    "title": "savepanel",
    "description": "query you for the name of a file to create",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, File Management",
    "last_update": "0.48",
    "see_also": [
      "openpanel",
      "pdcontrol"
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "open dialog window to choose a file name to save to"
        },
        {
          "type": "symbol",
          "description": "set starting directory and open dialog window"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "file name"
        }
      ]
    },
    "draft": false,
    "content": "When savepanel gets a \"bang\" a \"Save As\" file browser appears on the screen, If you choose a filename, it appears on the outlet",
    "filename": "savepanel.md"
  },
  {
    "title": "savestate",
    "description": "save and restore run-time state from within an abstraction",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, UI, File Management",
    "last_update": "0.49",
    "inlets": {
      "1st": [
        {
          "type": "list",
          "description": "one or more list when the parent patch gets saved"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "one or more list when the parent patch is opened"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "when the parent patch is saved"
        }
      ]
    },
    "draft": false,
    "content": "The savestate object is used inside abstractions to save their state as they are used in a calling (parent) patch. When the parent patch (such as this one, which calls the \"savestate-example\" abstraction) is saved, the included savestate object sends a 'bang' message out its right outlet, with which the abstraction may respond by presenting one or more 'list' messages back to the 'savestate' object. These lists are saved as part of the calling patch. If the calling patch is reopened later, the lists are sent out the left outlet of the savestate object. The abstraction can then use them to restore its state.\n\nNote that abstractions within 'clone' objects are not handled!\n\nThe abstraction may itself be modified at will without disturbing the saved states of its copies in any calling patches, as long as the usage of the saved and restored lists is kept compatible.\n\nThe saved messages are output when the object is recreated, before any outside connections are made and possibly before other parts of a saved patch have been restored. You can use a \"loadbang\" object to send messages to objects elsewhere in the owning patch at load time once the entire patch is loaded.\n\nMultiple savestate objects aren't differentiated, so they all receive all lists sent to any one of them and output them.\n\nHint: 'text' objects can be saved/restored using 'text tolist' and 'text fromlist'.",
    "filename": "savestate.md"
  },
  {
    "title": "scalar define",
    "description": "defines and maintains a scalar",
    "categories": [
      "object"
    ],
    "see_also": [
      "array",
      "text",
      "list"
    ],
    "pdcategory": "vanilla, Data Structures",
    "last_update": "0.49",
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "output a pointer to the scalar"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "pointer",
          "description": "a pointer to the scalar"
        }
      ]
    },
    "flags": [
      {
        "name": "-k",
        "description": "saves/keeps the contents with the patch"
      }
    ],
    "arguments": [
      {
        "type": "symbol",
        "description": "template name"
      }
    ],
    "methods": [
      {
        "type": "send <symbol>",
        "description": "send pointer to a named receive object"
      }
    ],
    "draft": false,
    "content": "create, store, and/or edit one\n\n`[read scalar-object-help.txt(` read/write a file (TBW)\n\n`[send scalar-help-send(` send a pointer to a named receive object",
    "filename": "scalar-define.md"
  },
  {
    "title": "select, sel",
    "description": "test for matching numbers or symbols",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Mixing and Routing, Triggers and Clocks",
    "last_update": "0.33",
    "see_also": [
      "route"
    ],
    "arguments": [
      {
        "description": "of floats or symbols to match to",
        "default": 0,
        "type": "list"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float/symbol",
          "description": "input to compare to arguments"
        }
      ],
      "2nd": [
        {
          "type": "float/symbol",
          "description": "update argument"
        }
      ]
    },
    "outlets": {
      "nth": [
        {
          "type": "bang",
          "description": "if input matches $arg"
        }
      ],
      "2nd": [
        {
          "type": "float/symbol",
          "description": "value if input didn't match"
        }
      ]
    },
    "draft": false,
    "content": "compare numbers or symbols",
    "filename": "select.md"
  },
  {
    "title": "send~, s~",
    "description": "send signal to one or more receive~ objects",
    "categories": [
      "object"
    ],
    "aliases": [
      "s~"
    ],
    "see_also": [
      "throw~",
      "send",
      "receive~",
      "tabsend~"
    ],
    "pdcategory": "vanilla, UI, Mixing and Routing, Audio I/O",
    "last_update": "0.54",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "signal to send to matching receive~ object(s)"
        }
      ]
    },
    "arguments": [
      {
        "type": "symbol",
        "description": "send symbol name",
        "default": "empty symbol"
      },
      {
        "type": "float",
        "description": "number of channels"
      }
    ],
    "methods": [
      {
        "type": "channels <float>",
        "description": "sets number of channels to send"
      }
    ],
    "draft": false,
    "content": "A send~ object copies its input to a local buffer which all receive~ objects of the same name read from. They may be in different windows or even different patches. Any number of receives may be associated with one send~ but it is an error to have two send~s of the same name. Receive~ takes \"set\" messages to switch between send~s.\nMulti channel connections is supported.\nSend~/Receive~ only work for the default block size (64",
    "filename": "send~.md"
  },
  {
    "title": "setsize",
    "description": "resize a data structure array",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Structures",
    "arguments": [
      {
        "type": "symbol",
        "description": "template name"
      },
      {
        "type": "symbol",
        "description": "field name"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "set the array size"
        }
      ],
      "2nd": [
        {
          "type": "pointer",
          "description": "pointer to a scalar with an array field"
        }
      ]
    },
    "outlets": null,
    "methods": [
      {
        "type": "set <symbol, symbol>",
        "description": "set template and field name"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "setsize.md"
  },
  {
    "title": "sig~",
    "description": "convert numbers to signals",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math, Data Math, Signal Generators",
    "last_update": "0.33",
    "see_also": [
      "snapshot~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "number to convert to signal"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "converted signal"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "initially converted value"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "sig~.md"
  },
  {
    "title": "sin",
    "description": "sine function",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "see_also": [
      "+~",
      "+",
      "div",
      "expr"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "input value"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "Unlike the signal version cos~, control-rate trigonometric functions take inputs in radians.",
    "filename": "sin.md"
  },
  {
    "title": "/",
    "description": "divide two numbers",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "last_update": "0.47",
    "see_also": [
      "+~",
      "div",
      ">",
      "&&",
      "sin",
      "log",
      "expr"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "trigger calculation and output value"
        },
        {
          "type": "float",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "slash.md"
  },
  {
    "title": "/~",
    "description": "divide two signals",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math",
    "last_update": "0.27",
    "see_also": [
      "+",
      "cos~",
      "wrap~",
      "abs~",
      "log~",
      "sqrt~",
      "pow~",
      "expr~"
    ],
    "arguments": [
      {
        "description": "initialize value of right inlet and makes it only take floats",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "set value on left-hand side and trigger output"
        }
      ],
      "2nd": [
        {
          "type": "float/signal",
          "description": "set value on right-hand side"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "This object combine two signals as above, or, if you give a numeric argument, the right inlet only takes floats (no signals",
    "filename": "slash~.md"
  },
  {
    "title": "slop~",
    "description": "slew-limiting lowpass filter",
    "categories": [
      "object"
    ],
    "see_also": [
      "lop~",
      "fexpr~"
    ],
    "pdcategory": "vanilla, Filters, Effects",
    "last_update": "0.50",
    "arguments": [
      {
        "type": "float",
        "description": "cutoff frequency in linear region",
        "default": 0
      },
      {
        "type": "float",
        "description": "maximum downward slew of linear region",
        "default": 0
      },
      {
        "type": "float",
        "description": "asymptotic downward cutoff frequency",
        "default": 0
      },
      {
        "type": "float",
        "description": "maximum upward slew of linear region",
        "default": 0
      },
      {
        "type": "float",
        "description": "asymptotic upward cutoff frequency",
        "default": 0
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "input signal to be filtered"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "cutoff frequency in linear region"
        }
      ],
      "3rd": [
        {
          "type": "signal",
          "description": "maximum downward slew of linear region"
        }
      ],
      "4th": [
        {
          "type": "signal",
          "description": "asymptotic downward cutoff frequency"
        }
      ],
      "5th": [
        {
          "type": "signal",
          "description": "maximum upward slew of linear region"
        }
      ],
      "6th": [
        {
          "type": "signal",
          "description": "asymptotic upward cutoff frequency"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "filtered signal"
        }
      ]
    },
    "methods": [
      {
        "type": "set <float>",
        "description": "set state (previously stored output)"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "slop~.md"
  },
  {
    "title": "snake~, snake_in~",
    "description": "combine mono signals into multichannel signals",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Mixing and Routing, Audio I/O",
    "last_update": "0.54",
    "see_also": [
      "snake~ out",
      "inlet~",
      "clone",
      "throw~",
      "send~"
    ],
    "arguments": [
      {
        "description": "number of channels",
        "default": 2,
        "type": "float"
      }
    ],
    "inlets": {
      "nth": [
        {
          "type": "float/signal",
          "description": "mono input to merge into a multichannel signal"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signals",
          "description": "multichannel signal"
        }
      ]
    },
    "draft": false,
    "content": "ssssssssss",
    "filename": "snake~-in.md"
  },
  {
    "title": "snake_out~",
    "description": "split multichannel signals into mono signals",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Mixing and Routing, Audio I/O",
    "last_update": "0.54",
    "see_also": [
      "snake~ out",
      "inlet~",
      "clone",
      "throw~",
      "send~"
    ],
    "arguments": [
      {
        "description": "number of channels",
        "default": 2,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "signals",
          "description": "a multichannel signal to break into mono tracks"
        }
      ]
    },
    "outlets": {
      "nth": [
        {
          "type": "signal",
          "description": "mono outputs"
        }
      ]
    },
    "draft": false,
    "content": "ssssssssss",
    "filename": "snake~-out.md"
  },
  {
    "title": "snapshot~",
    "description": "convert a signal to a number on demand",
    "categories": [
      "object"
    ],
    "see_also": [
      "sig~"
    ],
    "pdcategory": "vanilla, Signal Math, Data Math, Analysis",
    "last_update": "0.37",
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "convert a signal to a float"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the converted signal at every bang"
        }
      ]
    },
    "methods": [
      {
        "type": "set <float>",
        "description": "set a float value for the next DSP block"
      }
    ],
    "draft": false,
    "content": "The snapshot~ object takes a signal and converts it to a control value whenever it receives a bang in its left outlet. This object is particularly useful for monitoring outputs.\n\nA 'set' message is provided for the (rare) situations where you might make a known change to the signal input, and then read snapshot's value before any ensuing signal computation.",
    "filename": "snapshot~.md"
  },
  {
    "title": "soundfiler",
    "description": "read and write tables to soundfiles",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Buffers, File Management, Arrays and Tables",
    "last_update": "0.51",
    "see_also": [
      "array",
      "readsf~",
      "tabplay~",
      "tabread4~",
      "tabwrite~",
      "writesf~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "read <list>",
          "description": "sets a filename to open and optionally one or more arrays to load channels"
        },
        {
          "type": "write <list>",
          "description": "sets a filename to write and one or more arrays to specify channels"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "number of samples (when reading a file)"
        }
      ],
      "2nd": [
        {
          "type": "list",
          "description": "sample rate, header size, number of channels, bytes per sample & endianness (when reading a file)"
        }
      ]
    },
    "methods": [
      {
        "type": "read <list>",
        "description": "sets a filename to open and optionally one or more arrays to load channels. optional flags: -wave, -aiff, -caf, -next, -skip <float>, -maxsize <float>, -ascii, -raw <list>"
      },
      {
        "type": "write <list>",
        "description": "sets a filename to write and one or more arrays to specify channels. optional flags: -wave, -aiff, -caf, -next, -big, -little, -skip <float>, -nframes <float>, -ascii, -normalize, -rate <float>"
      }
    ],
    "draft": false,
    "content": "The soundfiler object reads and writes floating point arrays to binary soundfiles which may contain uncompressed 2- or 3-byte integer (\"pcm\") or 4-byte floating point samples in wave, aiff, caf, next, or ascii text formats. The number of channels of the soundfile need not match the number of arrays given (extras are dropped and unsupplied channels are zeroed out).\n\nThe number of channels is limited to 64.\n\n### Flags for 'read' messages:\n\n- -wave, -aiff, -caf, -next\n\n- -skip &lt;sample frames to skip in file&gt;\n\n- -resize (resizes arrays to the size of the sound file)\n\n- -maxsize &lt;maximum number of samples we can resize to&gt;\n\n- -raw &lt;headersize&gt; &lt;channels&gt; &lt;bytespersample&gt; &lt;endianness&gt;\n\n  - you can leave soundfiler to figure out which of the known soundfile formats the file belongs to or override all header and type information using the \"-raw\" flag, which causes all header and type information to be ignored. Endianness is \"l\" (\"little\") for Intel machines or \"b\" (\"big\") for older PPC Macintoshes. You can give \"n\" (natural) to take the byte order your machine prefers.\n\n- -ascii - read a file containing ascii numbers\n\n  - May be combined with -resize. Newlines in the file are ignored, non-numeric fields are replaced by zero. If multiple arrays are specified, the first elements of each array should come first in the file, followed by all the second elements and so on (interleaved).\n\n### Flags for 'write' messages:\n\n- -wave, -aiff, -caf, -next, -ascii\n\n- -big, -little (sample endianness)\n\n- -skip &lt;number of sample frames to skip in array&gt;\n\n- -nframes &lt;maximum number to write&gt;\n\n- -bytes &lt;2, 3, or 4&gt;\n\n- -normalize\n\n- -rate &lt;sample rate&gt;",
    "filename": "soundfiler.md"
  },
  {
    "title": "spigot",
    "description": "pass or block messages",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Mixing and Routing",
    "last_update": "0.38",
    "arguments": [
      {
        "description": "initialize right inlet",
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "anything",
          "description": "any message to pass or not"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "non-0 to pass messages, zero to stop them"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "anything",
          "description": "any input message if spigot is opened"
        }
      ]
    },
    "draft": false,
    "content": "Spigot passes messages from its left inlet to its outlet,  as long as a non-0 number is sent to its right inlet. When its right inlet gets zero,  incoming messages are \"blocked\" i.e.,  ignored.",
    "filename": "spigot.md"
  },
  {
    "title": "sqrt",
    "description": "math functions",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "see_also": [
      "+~",
      "+",
      "div",
      "expr"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "input value"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "sqrt.md"
  },
  {
    "title": "sqrt~",
    "description": "signal square root",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math",
    "last_update": "0.47",
    "aliases": [
      "q8_sqrt~"
    ],
    "see_also": [
      "rsqrt~",
      "sqrt",
      "exp~",
      "expr~",
      "log~",
      "pow~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "input to square root function"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "output of square root function"
        }
      ]
    },
    "draft": false,
    "content": "sqrt~ takes the approximate square root of the incoming signal, using a fast, approximate algorithm which is probably accurate to about 120 dB (20 bits).\n\nAn older object, q8_sqrt~, is included in Pd for back compatibility but should probably not be used. It only gives about 8 bit accuracy.",
    "filename": "sqrt~.md"
  },
  {
    "title": "stdout",
    "description": "write messages to standard output",
    "categories": [
      "object"
    ],
    "see_also": [
      "pd~"
    ],
    "pdcategory": "vanilla, UI, Analysis",
    "last_update": "0.48",
    "inlets": {
      "1st": [
        {
          "type": "anything",
          "description": "any message to be written/sent to standard output"
        }
      ]
    },
    "flags": [
      {
        "name": "-cr",
        "description": "omit trailing semicolon in output (like [print])"
      },
      {
        "name": "-b",
        "description": "sets to binary mode"
      },
      {
        "name": "-binary",
        "description": "sets to binary mode"
      },
      {
        "name": "-f",
        "description": "same as -flush"
      },
      {
        "name": "-flush",
        "description": "flush the output after each message",
        "default": "on W32"
      },
      {
        "name": "-nf",
        "description": "same as -noflush"
      },
      {
        "name": "-noflush",
        "description": "do not flush the output after each message"
      }
    ],
    "draft": false,
    "content": "The 'stdout' object is useful in conjunction with the pd~ object, which starts a Pd sub-process. Messages sent to the sub-process standard output appear on the left output of the pd~ object in the owning process. This might also be useful in other situations. Note that there's no corresponding \"stdin\" object - there seems to be no one canonical way such a thing should act.",
    "filename": "stdout.md"
  },
  {
    "title": "stripnote",
    "description": "strip 'note off' messages",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.28",
    "see_also": [
      "makenote"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI pitch"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI velocity (no output if equal to zero)"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI pitch"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI velocity"
        }
      ]
    },
    "draft": false,
    "content": "Stripnote ignores note-off (zero-velocity) messages from a stream of MIDI-style note message and passes the others through unchanged. It can deal with any kind of number (negative,  floats,  whatever) even though MIDI values need to be integers from 0 to 127!\n\nThe left inlet takes the note number and the right inlet takes velocity values. Alternatively,  you can send it a list that spreads the values through the inlets.\n\nThis is very useful if you want a Note-On message to trigger something in Pd but you don't want a Note-Off to trigger anything when you release the note.",
    "filename": "stripnote.md"
  },
  {
    "title": "struct",
    "description": "declare the fields in a data structure",
    "categories": [
      "object"
    ],
    "see_also": [
      "drawpolygon",
      "drawtext",
      "plot"
    ],
    "pdcategory": "vanilla, Data Structures",
    "last_update": "0.35",
    "outlets": {
      "1st": [
        {
          "type": "anything",
          "description": "messages notifying when there are interactions with objects of the structure ('select', 'deselect', 'click', 'displace' and 'change')"
        }
      ]
    },
    "arguments": [
      {
        "type": "list",
        "description": "template name plus types and names of given fields (array fields also need the array's template name)"
      }
    ],
    "draft": false,
    "content": "There should be one \"struct\" object in each Pd window you are using as a data structure template. The arguments specify the types and names of the fields. For array fields, a third argument specifies the template that the array elements should belong to",
    "filename": "struct.md"
  },
  {
    "title": "swap, fswap",
    "description": "swap two numbers",
    "categories": [
      "object"
    ],
    "aliases": [
      "fswap"
    ],
    "pdcategory": "vanilla, Mixing and Routing",
    "last_update": "0.41",
    "arguments": [
      {
        "description": "initial right inlet value",
        "default": 0,
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "outputs the stored values swapped"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set left value, swap and output"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "value from right/2nd inlet"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "value from left/1st inlet"
        }
      ]
    },
    "draft": false,
    "content": "The swap object swaps the positions of two incoming numbers. The number coming in through the right inlet will be sent to the left outlet and the number coming in left will come out right. Only the left inlet is hot and triggers output on both outlets. Output order is right to left as in [trigger].",
    "filename": "swap.md"
  },
  {
    "title": "switch~",
    "description": "set block size and on/off control for DSP",
    "categories": [
      "object"
    ],
    "see_also": [
      "fft~",
      "bang~",
      "block~"
    ],
    "pdcategory": "vanilla, Audio I/O, Analysis",
    "last_update": "0.43",
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "non-0 turns DSP on, zero turns DSP off"
        },
        {
          "type": "bang",
          "description": "when turned off, computes just one DSP cycle"
        }
      ]
    },
    "methods": [
      {
        "type": "set <list>",
        "description": "set argument values (size, overlap, up/downsampling)"
      }
    ],
    "arguments": [
      {
        "type": "float",
        "description": "set block size",
        "default": 64
      },
      {
        "type": "float",
        "description": "set overlap for FFT",
        "default": 1
      },
      {
        "type": "float",
        "description": "up/down-sampling factor",
        "default": 1
      }
    ],
    "draft": false,
    "content": "",
    "filename": "switch~.md"
  },
  {
    "title": "symbol",
    "description": "store and recall a symbol",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "last_update": "0.45",
    "see_also": [
      "print",
      "int",
      "float"
    ],
    "arguments": [
      {
        "description": "initially stored symbol",
        "default": "empty symbol",
        "type": "symbol"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "anything",
          "description": "gets converted to symbol, stored, and output"
        },
        {
          "type": "bang",
          "description": "output the stored symbol"
        },
        {
          "type": "symbol",
          "description": "stores the received symbol and outputs it"
        }
      ],
      "2nd": [
        {
          "type": "symbol",
          "description": "stores the symbol (no output)"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "symbol",
          "description": "the stored symbol"
        }
      ]
    },
    "draft": false,
    "content": "store a symbol (i.e., string)",
    "filename": "symbol.md"
  },
  {
    "title": "sysexin",
    "description": "MIDI input",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.48-2",
    "see_also": [
      "notein",
      "noteout"
    ],
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI system exclusive messages only, byte by byte"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI channel/port"
        }
      ]
    },
    "bref": "MIDI input",
    "draft": false,
    "content": "",
    "filename": "sysexin.md"
  },
  {
    "title": "table",
    "description": "subpatch with array",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Arrays and Tables",
    "last_update": "0.52",
    "see_also": [
      "inlet",
      "namecanvas",
      "array"
    ],
    "arguments": [
      {
        "description": "sets array name",
        "default": "internal",
        "type": "symbol"
      },
      {
        "description": "sets array size",
        "default": 100,
        "type": "float"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "table.md"
  },
  {
    "title": "tabosc4~",
    "description": "4-point interpolating oscillator",
    "categories": [
      "object"
    ],
    "see_also": [
      "osc~",
      "phasor~",
      "tabwrite~",
      "tabread4~",
      "array"
    ],
    "pdcategory": "vanilla, Signal Generators, Arrays and Tables",
    "last_update": "0.33",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "frequency value in Hz"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "phase cycle reset (from 0 to 1)"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "wavetable oscillator output"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "initial frequency value in Hz",
        "default": 0
      }
    ],
    "methods": [
      {
        "type": "set <symbol>",
        "description": "set table name with the waveform"
      }
    ],
    "draft": false,
    "content": "tabosc4~ is a traditional computer music style wavetable lookup oscillator using 4-point polynomial interpolation. The table should have a power of two points plus three \"guard points\", one at the beginning and two at the end, which should be wraparound copies of the last point and the first two points, respectively. The \"sinesum\" and \"cosinesum\" methods for arrays do this automatically for you if you just want to specify partial strengths.\n\nFor good results use 512 points for up to about 15 partials, or 32*npartials (rounded up to a power of 2",
    "filename": "tabosc4~.md"
  },
  {
    "title": "tabplay~",
    "description": "play a table as a sample (non-transposing)",
    "categories": [
      "object"
    ],
    "see_also": [
      "tabwrite~",
      "tabread4~",
      "tabread",
      "tabwrite",
      "soundfiler",
      "array"
    ],
    "pdcategory": "vanilla, Signal Generators, Arrays and Tables, Buffers",
    "last_update": "0.43",
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "sets starting sample and plays the sample"
        },
        {
          "type": "bang",
          "description": "plays the whole sample (same as '0')"
        },
        {
          "type": "list",
          "description": "1st element sets starting sample and 2nd element sets duration in samples"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "sample output"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "bang when finished playing the table"
        }
      ]
    },
    "arguments": [
      {
        "type": "symbol",
        "description": "sets table name with the sample"
      }
    ],
    "methods": [
      {
        "type": "stop",
        "description": "stop playing (outputs zeros when stopped)"
      },
      {
        "type": "set <symbol>",
        "description": "set the table with the sample"
      }
    ],
    "draft": false,
    "content": "The tabplay~ object plays a sample, or part of one, with no transposition or interpolation. It is cheaper than tabread4~ and there are none of tabread4~'s interpolation artifacts.",
    "filename": "tabplay~.md"
  },
  {
    "title": "tabread",
    "description": "read a number from a table",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Arrays and Tables",
    "last_update": "0.43",
    "see_also": [
      "tabplay~",
      "tabread4",
      "tabreceive~",
      "tabsend~",
      "tabwrite",
      "tabwrite~"
    ],
    "arguments": [
      {
        "description": "sets table name with the sample",
        "type": "symbol"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "sets table index and output its value"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "value of index input"
        }
      ]
    },
    "methods": [
      {
        "type": "set <symbol>",
        "description": "set the table name"
      }
    ],
    "draft": false,
    "content": "The tabread object reads values from an array (\"table\") according to an index. The index is rounded down to the next lower integer. Values in the table correspond to indices starting at 0 Indices outside of the range are replaced by the nearest index in range.\n\nCheck also the \"array\" examples from the Pd tutorial by clicking and opening `doc/2.control.examples/16.more.arrays`",
    "filename": "tabread.md"
  },
  {
    "title": "tabread4",
    "description": "4-point-interpolating table lookup",
    "pdcategory": "vanilla, Arrays and Tables",
    "arguments": [
      {
        "type": "symbol",
        "description": "sets table name with the sample"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "sets table index and output its value with interpolation"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "value of index input"
        }
      ]
    },
    "methods": [
      {
        "type": "set <symbol>",
        "description": "set the table name"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "tabread4.md"
  },
  {
    "title": "tabread4~",
    "description": "four-point interpolating table read",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Generators, Arrays and Tables",
    "arguments": [
      {
        "type": "symbol",
        "description": "sets table name with the sample"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "sets table index and output its value with interpolation"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "sets table onset"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "value of index input"
        }
      ]
    },
    "methods": [
      {
        "type": "set <symbol>",
        "description": "set the table name"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "tabread4~.md"
  },
  {
    "title": "tabread~",
    "description": "non-interpolating table lookup for signals",
    "categories": [
      "object"
    ],
    "see_also": [
      "tabwrite~",
      "tabread4~",
      "tabread",
      "tabread4",
      "tabsend~",
      "tabwrite",
      "tabreceive~",
      "tabplay~"
    ],
    "pdcategory": "vanilla, Signal Generators, Arrays and Tables",
    "last_update": "0.43",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "sets table index and output its value"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "value of index input"
        }
      ]
    },
    "arguments": [
      {
        "type": "symbol",
        "description": "sets table name with the sample"
      }
    ],
    "methods": [
      {
        "type": "set <symbol>",
        "description": "set the table name"
      }
    ],
    "draft": false,
    "content": "Tabread~ looks up values out of the named array. Incoming values are truncated to the next lower integer, and values out of bounds get the nearest (first or last) point.",
    "filename": "tabread~.md"
  },
  {
    "title": "tabreceive~",
    "description": "read a block of a signal from arrays continuously",
    "categories": [
      "object"
    ],
    "see_also": [
      "send~",
      "block~",
      "array",
      "tabwrite~",
      "tabsend~"
    ],
    "pdcategory": "vanilla, Mixing and Routing, Arrays and Tables",
    "last_update": "0.43",
    "inlets": {
      "1st": [
        {
          "type": "set <list>",
          "description": "set table names"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "outputs 1 or more channels from matching arrays"
        }
      ]
    },
    "arguments": [
      {
        "type": "list",
        "description": "table names",
        "default": "empty symbol"
      }
    ],
    "draft": false,
    "content": "By default a block is 64 samples but this can be changed with the block~ object.",
    "filename": "tabreceive~.md"
  },
  {
    "title": "tabsend~",
    "description": "write a block of a signal to arrays continuously",
    "categories": [
      "object"
    ],
    "see_also": [
      "send~",
      "block~",
      "array",
      "tabwrite~",
      "tabreceive~"
    ],
    "pdcategory": "vanilla, Arrays and Tables, Mixing and Routing",
    "last_update": "0.43",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "1 or more channels to write to corresponding arrays"
        }
      ]
    },
    "arguments": [
      {
        "type": "list",
        "description": "set table names",
        "default": "empty symbol"
      }
    ],
    "methods": [
      {
        "type": "set <list>",
        "description": "set table names"
      }
    ],
    "draft": false,
    "content": "By default a block is 64 samples but this can be changed with the block~ object.",
    "filename": "tabsend~.md"
  },
  {
    "title": "tabwrite",
    "description": "write a number to a table",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Arrays and Tables",
    "last_update": "0.33",
    "see_also": [
      "array",
      "tabread",
      "tabread4",
      "tabwrite~"
    ],
    "arguments": [
      {
        "description": "sets table name with the sample",
        "type": "symbol"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "sets y value"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "sets index to write to"
        }
      ]
    },
    "methods": [
      {
        "type": "set <symbol>",
        "description": "set the table name"
      }
    ],
    "draft": false,
    "content": "Tabwrite writes floats into an array,  input values are set in the left inlet,  while the index is set on the right inlet.",
    "filename": "tabwrite.md"
  },
  {
    "title": "tabwrite~",
    "description": "write a signal in an array",
    "categories": [
      "object"
    ],
    "see_also": [
      "tabread4~",
      "tabread",
      "tabwrite",
      "tabsend~",
      "tabreceive~",
      "soundfiler"
    ],
    "pdcategory": "vanilla, Arrays and Tables",
    "last_update": "0.40",
    "arguments": [
      {
        "type": "symbol",
        "description": "sets table name with the sample"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "signal to write to an array"
        },
        {
          "type": "bang",
          "description": "starts recording into the array"
        }
      ]
    },
    "methods": [
      {
        "type": "start <float>",
        "description": "starts recording at given sample"
      },
      {
        "type": "stop",
        "description": "stops recording into the array"
      },
      {
        "type": "set <symbol>",
        "description": "set the table name"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "tabwrite~.md"
  },
  {
    "title": "tan",
    "description": "Tangens function",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "see_also": [
      "+~",
      "+",
      "div",
      "expr"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "input value"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "Unlike the signal version cos~, control-rate trigonometric functions take inputs in radians.",
    "filename": "tan.md"
  },
  {
    "title": "template",
    "description": "(use struct now)",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Structures",
    "inlets": {
      "1st": null
    },
    "outlets": {
      "1st": null
    },
    "draft": true,
    "content": "",
    "filename": "template.md"
  },
  {
    "title": "text define",
    "description": "create, store, and/or edit texts",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "last_update": "0.49",
    "see_also": [
      "list",
      "array",
      "scalar",
      "text",
      "text get",
      "text set",
      "text insert",
      "text delete",
      "text size",
      "text tolist",
      "text fromlist",
      "text search",
      "text sequence"
    ],
    "arguments": [
      {
        "description": "set text name",
        "type": "symbol"
      }
    ],
    "flags": [
      {
        "name": "-k",
        "description": "saves/keeps the contents of the text with the patch"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "output a pointer to the scalar containing the text"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "pointer",
          "description": "a pointer to the scalar containing the array"
        }
      ],
      "2nd": [
        {
          "type": "anything",
          "description": "outputs \"updated\" when text changes"
        }
      ]
    },
    "methods": [
      {
        "type": "clear",
        "description": "clear contents of the text"
      },
      {
        "type": "send <symbol>",
        "description": "send pointer to a named receive object"
      },
      {
        "type": "read <symbol>",
        "description": "read from a file (with optional -c flag)"
      },
      {
        "type": "write <symbol>",
        "description": "write to a file (with optional -c flag)"
      },
      {
        "type": "sort",
        "description": "sort the text contents"
      },
      {
        "type": "click",
        "description": "open text window"
      },
      {
        "type": "close",
        "description": "closes the text window"
      }
    ],
    "draft": false,
    "content": "\"text define\" maintains a text object and can name it so that other objects can find it (and later should have some alternative, anonymous way to be found).\n\nan optional `-c` flag allows you to read or write to/from a file interpreting carriage returns as separators.",
    "filename": "text-define.md"
  },
  {
    "title": "text delete",
    "description": "delete a line or clear",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "last_update": "0.49",
    "see_also": [
      "list",
      "array",
      "scalar",
      "text define",
      "text get",
      "text set",
      "text insert",
      "text",
      "text size",
      "text tolist",
      "text fromlist",
      "text search",
      "text sequence"
    ],
    "arguments": [
      {
        "description": "array name if no flags are given",
        "default": "none",
        "type": "symbol"
      }
    ],
    "flags": [
      {
        "name": "-s <symbol, symbol>",
        "description": "struct name and field name of main structure"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "line number to delete (negative deletes all text)"
        }
      ],
      "2nd": [
        {
          "type": "symbol",
          "description": "set text name"
        },
        {
          "type": "pointer",
          "description": "pointer to the text if -s flag is used"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "text-delete.md"
  },
  {
    "title": "text fromlist",
    "description": "convert from list",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "last_update": "0.49",
    "see_also": [
      "list",
      "array",
      "scalar",
      "text define",
      "text get",
      "text set",
      "text insert",
      "text delete",
      "text size",
      "text tolist",
      "text",
      "text search",
      "text sequence"
    ],
    "arguments": [
      {
        "description": "text name if no flags are given",
        "default": "none",
        "type": "symbol"
      }
    ],
    "flags": [
      {
        "name": "-s <symbol, symbol>",
        "description": "struct name and field name of main structure"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "list",
          "description": "sets contents of text from given list"
        }
      ],
      "2nd": [
        {
          "type": "symbol",
          "description": "set text name"
        },
        {
          "type": "pointer",
          "description": "pointer to the text if -s flag is used"
        }
      ]
    },
    "draft": false,
    "content": "\"text fromlist\" converts a list such as \"text tolist\" would output and fills the text with it. Whatever the text had previously contained is discarded.",
    "filename": "text-fromlist.md"
  },
  {
    "title": "text get",
    "description": "read and output a line",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "last_update": "0.49",
    "see_also": [
      "list",
      "array",
      "scalar",
      "text define",
      "text",
      "text set",
      "text insert",
      "text delete",
      "text size",
      "text tolist",
      "text fromlist",
      "text search",
      "text sequence"
    ],
    "arguments": [
      {
        "type": "symbol",
        "description": "text name if no flags are given",
        "default": "none"
      },
      {
        "type": "float",
        "description": "starting element number",
        "default": -1
      },
      {
        "type": "float",
        "description": "initial number of elements",
        "default": 1
      }
    ],
    "flags": [
      {
        "name": "-s <symbol, symbol>",
        "description": "struct name and field name of main structure"
      }
    ],
    "inlets": null,
    "1st": [
      {
        "type": "list",
        "description": "a message from text or elements from it"
      }
    ],
    "2nd": [
      {
        "type": "float",
        "description": "0 if terminated by semicolon, 1 if by comma, or 2 if message number out of range"
      }
    ],
    "3rd": [
      {
        "type": "float",
        "description": "specify number of elements"
      }
    ],
    "4th": [
      {
        "type": "symbol",
        "description": "set text name"
      },
      {
        "type": "pointer",
        "description": "pointer to the text if -s flag is used"
      }
    ],
    "outlets": null,
    "draft": false,
    "content": "",
    "filename": "text-get.md"
  },
  {
    "title": "text insert",
    "description": "insert a line",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "last_update": "0.49",
    "see_also": [
      "list",
      "array",
      "scalar",
      "text define",
      "text get",
      "text set",
      "text",
      "text delete",
      "text size",
      "text tolist",
      "text fromlist",
      "text search",
      "text sequence"
    ],
    "arguments": [
      {
        "description": "array name if no flags are given",
        "default": "none",
        "type": "symbol"
      },
      {
        "description": "set message number",
        "default": 0,
        "type": "float"
      }
    ],
    "flags": [
      {
        "name": "-s <symbol, symbol>",
        "description": "struct name and field name of main structure"
      }
    ],
    "inlets": null,
    "1st": [
      {
        "type": "list",
        "description": "a line to insert"
      }
    ],
    "2nd": [
      {
        "type": "float",
        "description": "message number to insert"
      }
    ],
    "3rd": [
      {
        "type": "symbol",
        "description": "set text name"
      },
      {
        "type": "pointer",
        "description": "pointer to the text if -s flag is used"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "text-insert.md"
  },
  {
    "title": "text search",
    "description": "search for a line",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "last_update": "0.49",
    "see_also": [
      "list",
      "array",
      "scalar",
      "text define",
      "text get",
      "text set",
      "text insert",
      "text delete",
      "text size",
      "text tolist",
      "text fromlist",
      "text",
      "text sequence"
    ],
    "arguments": [
      {
        "description": "text name if no flags are given",
        "default": "none",
        "type": "symbol"
      },
      {
        "description": "search field number optionally preceded by '>'. '>=', '<', '<=', or 'near'",
        "type": "list"
      }
    ],
    "flags": [
      {
        "name": "-s <symbol, symbol>",
        "description": "struct name and field name of main structure"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "list",
          "description": "search key"
        }
      ],
      "2nd": [
        {
          "type": "symbol",
          "description": "set text name"
        },
        {
          "type": "pointer",
          "description": "pointer to the text if -s flag is used"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "found line number or -1 if not found"
        }
      ]
    },
    "draft": false,
    "content": "\"text search\" outputs the line number of the line that best matches a search key. By default it seeks a line whose leading fields match the incoming list.",
    "filename": "text-search.md"
  },
  {
    "title": "text sequence",
    "description": "sequencer/message-sender",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management, Triggers and Clocks",
    "last_update": "0.49",
    "see_also": [
      "list",
      "array",
      "scalar",
      "text define",
      "text get",
      "text set",
      "text insert",
      "text delete",
      "text size",
      "text tolist",
      "text fromlist",
      "text search",
      "text"
    ],
    "arguments": [
      {
        "description": "array name if no flags are given",
        "default": "none",
        "type": "symbol"
      }
    ],
    "flags": [
      {
        "name": "-s <symbol, symbol>",
        "description": "struct name and field name of main structure"
      },
      {
        "name": "-g",
        "description": "sets to global mode (with symbolic destinations)"
      },
      {
        "name": "-w <symbol>",
        "description": "sets symbols that define waiting points"
      },
      {
        "name": "-w <float>",
        "description": "sets number of leading floats used as waiting points"
      },
      {
        "name": "-t <float, symbol>",
        "description": "sets tempo value and time unit"
      }
    ],
    "inlets": null,
    "1st": [
      {
        "type": "list",
        "description": "messages from the sequence or waits if -g flag is given"
      }
    ],
    "2nd": [
      {
        "type": "list",
        "description": "waits if -w flag is given (which creates a mid outlet)"
      }
    ],
    "outlets": null,
    "3rd": [
      {
        "type": "bang",
        "description": "when finishing the sequence"
      }
    ],
    "methods": [
      {
        "type": "auto",
        "description": "automatically sequence interpreting waits as delay times"
      },
      {
        "type": "stop",
        "description": "stops the sequence when in auto mode"
      },
      {
        "type": "step",
        "description": "output next line"
      },
      {
        "type": "line <float>",
        "description": "set line number (actually \"message number\", from 0)"
      },
      {
        "type": "args <list>",
        "description": "set values for $1, $2, etc in the text"
      },
      {
        "type": "tempo <f, sym>",
        "description": "set tempo value (float) and time unit symbol"
      }
    ],
    "draft": true,
    "content": "",
    "filename": "text-sequence.md"
  },
  {
    "title": "text set",
    "description": "replace or add a line",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "last_update": "0.49",
    "see_also": [
      "list",
      "array",
      "scalar",
      "text define",
      "text get",
      "text",
      "text insert",
      "text delete",
      "text size",
      "text tolist",
      "text fromlist",
      "text search",
      "text sequence"
    ],
    "arguments": [
      {
        "description": "text name if no flags are given",
        "default": "none",
        "type": "symbol"
      },
      {
        "description": "set message number",
        "default": 0,
        "type": "float"
      },
      {
        "description": "set element number",
        "default": -1,
        "type": "float"
      }
    ],
    "flags": [
      {
        "name": "-s <symbol, symbol>",
        "description": "struct name and field name of main structure"
      }
    ],
    "inlets": null,
    "1st": [
      {
        "type": "list",
        "description": "a message to add or replace"
      }
    ],
    "2nd": [
      {
        "type": "float",
        "description": "message number to replace or add (if greater than the number of messages)"
      }
    ],
    "3rd": [
      {
        "type": "float",
        "description": "element number to start replacing, or replace whole message if negative"
      }
    ],
    "4th": [
      {
        "type": "symbol",
        "description": "set text name"
      },
      {
        "type": "pointer",
        "description": "pointer to the text if -s flag is used"
      }
    ],
    "outlets": null,
    "draft": false,
    "content": "",
    "filename": "text-set.md"
  },
  {
    "title": "text size",
    "description": "get number of lines or elements",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "last_update": "0.49",
    "see_also": [
      "list",
      "array",
      "scalar",
      "text define",
      "text get",
      "text set",
      "text insert",
      "text delete",
      "text",
      "text tolist",
      "text fromlist",
      "text search",
      "text sequence"
    ],
    "arguments": [
      {
        "description": "text name if no flags are given",
        "default": "none",
        "type": "symbol"
      }
    ],
    "flags": [
      {
        "name": "-s <symbol, symbol>",
        "description": "struct name and field name of main structure"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "output the number of lines"
        },
        {
          "type": "float",
          "description": "set line number and output its length"
        }
      ],
      "2nd": [
        {
          "type": "symbol",
          "description": "set text name"
        },
        {
          "type": "pointer",
          "description": "pointer to the text if -s flag is used"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "number of lines or line length"
        }
      ]
    },
    "draft": false,
    "content": "\"text size\" reports the number of lines in the text or the length of a specified line.",
    "filename": "text-size.md"
  },
  {
    "title": "text tolist",
    "description": "convert text to a list",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "last_update": "0.49",
    "see_also": [
      "list",
      "array",
      "scalar",
      "text define",
      "text get",
      "text set",
      "text insert",
      "text delete",
      "text size",
      "text",
      "text fromlist",
      "text search",
      "text sequence"
    ],
    "arguments": [
      {
        "description": "text name if no flags are given",
        "default": "none",
        "type": "symbol"
      }
    ],
    "flags": [
      {
        "name": "-s <symbol, symbol>",
        "description": "struct name and field name of main structure"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "output contents as a list"
        }
      ],
      "2nd": [
        {
          "type": "symbol",
          "description": "set text name"
        },
        {
          "type": "pointer",
          "description": "pointer to the text if -s flag is used"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "list",
          "description": "contents of text as a list"
        }
      ]
    },
    "draft": false,
    "content": "\"text tolist\" outputs the entire contents as a list. Semicolons, commas, and dollar signs are output as symbols (and so, if symbols like \", \" are encountered, they're escaped with backslashes",
    "filename": "text-tolist.md"
  },
  {
    "title": "text",
    "description": "manage a list of messages",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management",
    "last_update": "0.49",
    "see_also": [
      "list",
      "array",
      "scalar",
      "text define",
      "text get",
      "text set",
      "text insert",
      "text delete",
      "text size",
      "text tolist",
      "text fromlist",
      "text search",
      "text sequence"
    ],
    "arguments": [
      {
        "description": "sets the function of [text], possible values: define, get, set, insert, delete, size, tolist, fromlist, search and sequence. The default value is 'define'",
        "type": "symbol"
      }
    ],
    "flags": [
      {
        "name": "-k",
        "description": "saves/keeps the contents of the text with the patch"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "output a pointer to the scalar containing the text"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "pointer",
          "description": "a pointer to the scalar containing the array"
        }
      ],
      "2nd": [
        {
          "type": "anything",
          "description": "outputs \"updated\" when text changes"
        }
      ]
    },
    "methods": [
      {
        "type": "clear",
        "description": "clear contents of the text"
      },
      {
        "type": "send <symbol>",
        "description": "send pointer to a named receive object"
      },
      {
        "type": "read <symbol>",
        "description": "read from a file (with optional -c flag)"
      },
      {
        "type": "write <symbol>",
        "description": "write to a file (with optional -c flag)"
      },
      {
        "type": "sort",
        "description": "sort the text contents"
      },
      {
        "type": "click",
        "description": "open text window"
      },
      {
        "type": "close",
        "description": "closes the text window"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "text.md"
  },
  {
    "title": "textfile",
    "description": "read and write text files",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Management, File Management",
    "last_update": "0.33",
    "see_also": [
      "qlist",
      "text sequence"
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "output a whole line and go to the next"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "anything",
          "description": "lines stored in the textfile object"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "when reaching the end of sequence"
        }
      ]
    },
    "methods": [
      {
        "type": "rewind",
        "description": "go to beginning (and stop)"
      },
      {
        "type": "clear",
        "description": "empty the textfile"
      },
      {
        "type": "add <anything>",
        "description": "add a message to textfile"
      },
      {
        "type": "add2 <anything>",
        "description": "add a message but don't terminate it"
      },
      {
        "type": "set <anything>",
        "description": "clear and add a message to textfile"
      },
      {
        "type": "print",
        "description": "print contents to Pd window"
      },
      {
        "type": "read <symbol, cr>",
        "description": "read a file (with optional 'cr' argument)"
      },
      {
        "type": "write <symbol, cr>",
        "description": "write to a file (with optional 'cr' argument)"
      }
    ],
    "draft": false,
    "content": "'cr' = terminating lines only with carriage return (omitting semicolons.) You can read files this way too, in which case carriage returns are mapped to semicolons.\n\nThe textfile object reads and writes text files to and from memory. You can read a file and output sequential lines as lists, or collect lines and write them out. You can use this object to generate \"models\" for Gem, for instance.\n\nTo record textual messages and save them to a file, first send \"clear\" to empty the qlist and \"add\" to add messages (terminated with semicolons.) The message, \"add2\" adds a list of atoms without finishing with a semicolon in case you want to make variable-length messages.\n\nYou can also use this object simply for storing heterogeneous sequences of lists.",
    "filename": "textfile.md"
  },
  {
    "title": "threshold~",
    "description": "trigger from audio signal generator",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Analysis, Effects, Signal Math",
    "last_update": "0.32",
    "see_also": [
      "line",
      "line~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "signal to analyze and trigger from"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "non-0 sets internal state to 'high', 'low' otherwise"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "bang",
          "description": "bang when reaching or exceeding a trigger threshold"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "bang when receding below a rest threshold"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "trigger threshold value"
      },
      {
        "type": "float",
        "description": "trigger debounce time in ms"
      },
      {
        "type": "float",
        "description": "rest threshold value"
      },
      {
        "type": "float",
        "description": "rest debounce time in ms"
      }
    ],
    "methods": [
      {
        "type": "set <list>",
        "description": "set different values for the 4 arguments"
      }
    ],
    "draft": false,
    "content": "threshold~ monitors its input signal and outputs bangs when the signal reaches or exceeds a specified \"trigger\" value, and also when the signal recedes below a \"rest\" value - this is also known as a 'schmitt trigger'. You can specify debounce times in milliseconds for the threshold~ to wait after the two event types before triggering again.",
    "filename": "threshold~.md"
  },
  {
    "title": "throw~",
    "description": "throw signal to a matching catch~ object",
    "categories": [
      "object"
    ],
    "see_also": [
      "send~"
    ],
    "pdcategory": "vanilla, Mixing and Routing, Audio I/O",
    "last_update": "0.33",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "signal to throw to a matching catch~ object"
        }
      ]
    },
    "arguments": [
      {
        "type": "symbol",
        "description": "throw~ symbol name",
        "default": "empty symbol"
      }
    ],
    "methods": [
      {
        "type": "set <symbol>",
        "description": "set throw~ name"
      }
    ],
    "draft": false,
    "content": "Any number of throw~ objects can add into one catch~ object (but two catch~ objects cannot share the same name.",
    "filename": "throw~.md"
  },
  {
    "title": "timer",
    "description": "measure time intervals",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Triggers and Clocks",
    "last_update": "0.47",
    "see_also": [
      "cputime",
      "realtime",
      "delay",
      "metro",
      "text sequence"
    ],
    "arguments": [
      {
        "description": "tempo value",
        "default": 1,
        "type": "float"
      },
      {
        "description": "time unit",
        "default": "msec",
        "type": "symbol"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "reset (set elapsed time to zero)"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "output elapsed time"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "elapsed time in msec"
        }
      ]
    },
    "methods": [
      {
        "type": "tempo <float, symbol>",
        "description": "set tempo value (float) and time unit (symbol)"
      }
    ],
    "draft": false,
    "content": "",
    "filename": "timer.md"
  },
  {
    "title": "touchin",
    "description": "MIDI input",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.48-2",
    "see_also": [
      "notein",
      "noteout"
    ],
    "arguments": [
      {
        "description": "MIDI channel/port",
        "type": "float"
      }
    ],
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI aftertouch value"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI channel/port"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "touchin.md"
  },
  {
    "title": "touchout",
    "description": "MIDI output",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, MIDI",
    "last_update": "0.48-2",
    "see_also": [
      "notein",
      "noteout"
    ],
    "arguments": [
      {
        "description": "MIDI channel/port",
        "type": "float"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "MIDI aftertouch value"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "MIDI channel/port"
        }
      ]
    },
    "draft": false,
    "content": "",
    "filename": "touchout.md"
  },
  {
    "title": "trace",
    "description": "message tracing for debugging",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Analysis",
    "last_update": "0.52",
    "inlets": {
      "1st": [
        {
          "type": "anything",
          "description": "any message to be traced from this point on"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "arms the object for the given number of messages"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "anything",
          "description": "bypasses the input message further down the chain"
        }
      ]
    },
    "draft": false,
    "content": "When 'set-tracing' is on and the object is armed,  trace prints in the Pd window the message it receives and also outputs the messages all the other objects further down in the chain send. You can control-click on the printout to select in the patch the object that caused the message. Once this is done,  trace also prints a backtrace of messages leading up to the one that has set it off.",
    "filename": "trace.md"
  },
  {
    "title": "trigger, t",
    "description": "sequence messages in right-to-left order",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Triggers and Clocks",
    "last_update": "0.52",
    "see_also": [
      "bang",
      "unpack"
    ],
    "arguments": [
      {
        "description": "symbols that define outlet's message type. 'float', 'bang', 'symbol', 'list', 'anything', and 'pointer',  all of which can be abbreviated",
        "default": "f f",
        "type": "list"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "anything",
          "description": "any message to be sequenced over the outlets"
        }
      ]
    },
    "outlets": {
      "nth": [
        {
          "type": "anything",
          "description": "sequenced messages from right to left"
        }
      ]
    },
    "draft": false,
    "content": "sequence messages in right-to-left order",
    "filename": "trigger.md"
  },
  {
    "title": "until",
    "description": "looping mechanism",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math, Logic",
    "last_update": "0.28",
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "starts the loop"
        },
        {
          "type": "float",
          "description": "set number of iterations in the loop"
        }
      ],
      "2nd": [
        {
          "type": "bang",
          "description": "stops the loop"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "bang",
          "description": "bangs in a loop"
        }
      ]
    },
    "draft": false,
    "content": "The until object's left inlet starts a loop in which it outputs \"bang\" until its right inlet gets a bang which stops it. If you start \"until\" with a number,  it iterates at most that number of times,  as in the Max \"uzi\" object.",
    "filename": "until.md"
  },
  {
    "title": "value, v",
    "description": "shared numeric value",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Mixing and Routing, Data Management",
    "last_update": "0.51",
    "see_also": [
      "send",
      "int",
      "float",
      "expr"
    ],
    "arguments": [
      {
        "description": "sets value name (optional)",
        "type": "symbol"
      }
    ],
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "outputs the value"
        },
        {
          "type": "float",
          "description": "sets variable value"
        }
      ],
      "2nd": [
        {
          "type": "symbol",
          "description": "sets the value name"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "sets variable value"
        }
      ]
    },
    "methods": [
      {
        "type": "send <symbol>",
        "description": "sends the value to a matching receive name"
      }
    ],
    "draft": false,
    "content": "\"Value\" stores a numeric value which is shared between all values with the same name (which need not be in the same Pd window.)\n\nThe value may also be stored or recalled in expressions via the expr, expr~, and fexpr~ objects.\n\nThe value object can also receive float values sent via a [send] object or a message if it has a variable with the same name.",
    "filename": "value.md"
  },
  {
    "title": "vcf~",
    "description": "voltage-controlled band/lowpass filter",
    "categories": [
      "object"
    ],
    "see_also": [
      "bp~",
      "bob~",
      "lop~",
      "hip~",
      "biquad~",
      "slop~",
      "cpole~",
      "fexpr~"
    ],
    "pdcategory": "vanilla, Filters",
    "last_update": "0.46",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "audio signal to be filtered"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "resonant frequency in Hz"
        }
      ],
      "3rd": [
        {
          "type": "float",
          "description": "set Q"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "real output (bandpasse filtered signal)"
        }
      ],
      "2nd": [
        {
          "type": "signal",
          "description": "imaginary output (bandpasse filtered signal)"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "initial Q",
        "default": 0
      }
    ],
    "methods": [
      {
        "type": "clear",
        "description": "clear filter's memory"
      }
    ],
    "draft": false,
    "content": "Vcf~ is a resonant bandpass and lowpass filter that takes either a control or an audio signal to set center frequency, which may thus change continuously in time as in an analog voltage controlled filter (and unlike 'bp~' and 'lop~' that only take control values",
    "filename": "vcf~.md"
  },
  {
    "title": "vline~",
    "description": "high-precision audio ramp generator",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Generators, Envelopes and LFOs",
    "last_update": "0.33",
    "see_also": [
      "line",
      "line~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "set target value and start ramp"
        }
      ],
      "2nd": [
        {
          "type": "float",
          "description": "set next ramp time (cleared when ramp starts)"
        }
      ],
      "3rd": [
        {
          "type": "float",
          "description": "sets delay time"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "ramp values"
        }
      ]
    },
    "methods": [
      {
        "type": "stop",
        "description": "stops the ramp"
      }
    ],
    "draft": false,
    "content": "The vline~ object, like line~, generates linear ramps whose levels and timing are determined by messages you send it. It takes a target value, a time interval in milliseconds and an initial delay (also in ms). Ramps may start and stop between audio samples, in which case the output is interpolated accordingly.\n\nA list up to three floats distributes the values over the inlets, as usual in Pd. Note that the middle and right inlet (that sets the time and delay) do not remember old values (unlike other inlets in Pd). Thus, if you send vline~ a float without priorly specifying a ramp time and delay and sent, it jumps immediately to the target value. In the same way, a list of two values will not have a delay time if no delay time was priorly set in the right inlet.\n\nAny number of future ramps may be scheduled and vline~ will remember them and execute them in order. They must be specified in increasing order of initial delay however, since a segment cancels all planned segments at any future time.\n\n!!! BUG: vline~ objects inside reblocked subpatches can have slightly incorrect timing !!!",
    "filename": "vline~.md"
  },
  {
    "title": "vsnapshot~",
    "description": "deluxe snapshot~",
    "categories": [
      "object"
    ],
    "see_also": [
      "snapshot~"
    ],
    "pdcategory": "vanilla, Signal Math, Data Math, Analysis",
    "last_update": "0.47",
    "inlets": {
      "1st": [
        {
          "type": "bang",
          "description": "convert a signal to a float"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the converted signal at every bang"
        }
      ]
    },
    "draft": false,
    "content": "mal-designed snapshot~ extension, best not to use this\n\nThis is an attempt at making a version of snapshot~ that trades off delay for time jitter control. The behaviour is the same as snapshot~ (it takes a bang and converts a signal to a float. The idea is that you can convert from an audio signal and get a specific value within an audio block depending on the exact time it receives a bang. Unfortunately it isn't fully correct and will be replaced by a more correct one in the future. Since this change will probably be incompatible with this object, it is probably best to avoid using it until it is working correctly.",
    "filename": "vsnapshot~.md"
  },
  {
    "title": "wrap",
    "description": "wrap a number to range [0, 1)",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Data Math",
    "see_also": [
      "+~",
      "+",
      "div",
      "expr"
    ],
    "inlets": {
      "1st": [
        {
          "type": "float",
          "description": "input value"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "float",
          "description": "the result of the operation"
        }
      ]
    },
    "draft": false,
    "content": "The wrap object wraps the input to a value between 0 and 1, including negative numbers (for instance, -0.2 maps to 0.8.)",
    "filename": "wrap.md"
  },
  {
    "title": "wrap~",
    "description": "remainder modulo 1 for signals",
    "categories": [
      "object"
    ],
    "pdcategory": "vanilla, Signal Math",
    "last_update": "0.48",
    "see_also": [
      "wrap",
      "expr~"
    ],
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "input to 'modulo 1' function"
        }
      ]
    },
    "outlets": {
      "1st": [
        {
          "type": "signal",
          "description": "output of 'modulo 1' function"
        }
      ]
    },
    "draft": false,
    "content": "wrap~ gives the difference between the input and the largest integer not exceeding it (for positive numbers this is the fractional part)\n\nCOMPATIBILITY NOTE: in Pd versions before 0.48, wrap~ with an input of 0 output 1 (but now correctly outputs 0). To get the old behavior, set \"compatibility\" to 0.47 or below in Pd's command line or by a message",
    "filename": "wrap~.md"
  },
  {
    "title": "writesf~",
    "description": "write audio signals to a soundfile",
    "categories": [
      "object"
    ],
    "see_also": [
      "soundfiler",
      "readsf~"
    ],
    "pdcategory": "vanilla, File Management, Buffers",
    "last_update": "0.51",
    "inlets": {
      "1st": [
        {
          "type": "signal",
          "description": "signal to write to a channel"
        }
      ],
      "nth": [
        {
          "type": "signal",
          "description": "signal to write to a channel"
        }
      ]
    },
    "arguments": [
      {
        "type": "float",
        "description": "sets number of channels",
        "default": 1
      }
    ],
    "methods": [
      {
        "type": "open <list>",
        "description": "filename and optional flags -wave, -aiff, -caf, -next, - big, -little, -bytes <float>, -rate <float>"
      },
      {
        "type": "start",
        "description": "start streaming audio"
      },
      {
        "type": "stop",
        "description": "stop streaming audio"
      },
      {
        "type": "print",
        "description": "prints information on Pd's terminal window"
      }
    ],
    "draft": false,
    "content": "writesf~ creates a subthread whose task is to write audio streams to disk. You need not provide any disk access time between \"open\" and \"start\", but between \"stop\" and the next \"open\" you must give the object time to flush all the output to disk.\n\nThe \"open\" message may take flag-style arguments as follows:\n\n- -wave, -aiff, -caf, -next (file extension",
    "filename": "writesf~.md"
  }
]